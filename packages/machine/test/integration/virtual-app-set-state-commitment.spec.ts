import AppRegistry from "@counterfactual/contracts/build/AppRegistry.json";
import ETHBucket from "@counterfactual/contracts/build/ETHBucket.json";
import StateChannelTransaction from "@counterfactual/contracts/build/StateChannelTransaction.json";
import { VirtualAppSetStateCommitment } from "@counterfactual/machine/src/ethereum/virtual-app-set-state-commitment";
import { AssetType, NetworkContext } from "@counterfactual/types";
import { WaffleLegacyOutput } from "ethereum-waffle";
import { Contract, Wallet } from "ethers";
import { AddressZero, WeiPerEther } from "ethers/constants";
import { Signature, SigningKey } from "ethers/utils";

import { AppInstance, StateChannel } from "../../src/models";

import { toBeEq } from "./bignumber-jest-matcher";
import { connectToGanache } from "./connect-ganache";
import { getSortedRandomSigningKeys } from "./random-signing-keys";

// To be honest, 30000 is an arbitrary large number that has never failed
// to reach the done() call in the test case, not intelligently chosen
const JEST_TEST_WAIT_TIME = 30000;

// The AppRegistry.setState call _could_ be estimated but we haven't
// written this test to do that yet
const SETSTATE_COMMITMENT_GAS = 6e9;

// The app nonce that the intermediary signs
const EXPIRY_NONCE = 65536;

let networkId: number;
let wallet: Wallet;
let network: NetworkContext;
let appRegistry: Contract;

let signingKeys: SigningKey[];
let targetAppInstance: AppInstance;
let c0: VirtualAppSetStateCommitment;
let s0: Signature;

expect.extend({ toBeEq });

const rejectionOf = (promise: Promise<any>) =>
  promise.then(
    value => {
      throw value;
    },
    reason => reason
  );

beforeAll(async () => {
  [{}, wallet, networkId] = await connectToGanache();

  const relevantArtifacts = [
    { contractName: "AppRegistry", ...AppRegistry },
    { contractName: "ETHBucket", ...ETHBucket },
    { contractName: "StateChannelTransaction", ...StateChannelTransaction }
  ];

  network = {
    // Fetches the values from build artifacts of the contracts needed
    // for this test and sets the ones we don't care about to 0x0
    ETHBalanceRefund: AddressZero,
    ...relevantArtifacts.reduce(
      (accumulator: { [x: string]: string }, artifact: WaffleLegacyOutput) => ({
        ...accumulator,
        [artifact.contractName as string]: artifact.networks![networkId].address
      }),
      {}
    )
  } as NetworkContext;

  appRegistry = new Contract(
    (AppRegistry as WaffleLegacyOutput).networks![networkId].address,
    AppRegistry.abi,
    wallet
  );
});

beforeEach(() => {
  signingKeys = getSortedRandomSigningKeys(2);

  const users = signingKeys.map(x => x.address);

  const stateChannel = StateChannel.setupChannel(
    network.ETHBucket,
    AddressZero,
    users
  ).setFreeBalance(AssetType.ETH, {
    [users[0]]: WeiPerEther,
    [users[1]]: WeiPerEther
  });

  const freeBalanceETH = stateChannel.getFreeBalanceFor(AssetType.ETH);

  targetAppInstance = new AppInstance(
    AddressZero,
    users,
    10,
    freeBalanceETH.appInterface,
    freeBalanceETH.terms,
    true,
    5,
    0,
    freeBalanceETH.toJson().latestState,
    freeBalanceETH.toJson().latestNonce,
    freeBalanceETH.timeout
  );

  c0 = new VirtualAppSetStateCommitment(
    network,
    targetAppInstance.identity,
    EXPIRY_NONCE,
    targetAppInstance.timeout,
    undefined,
    undefined
  );
  s0 = signingKeys[0].signDigest(c0.hashToSign(true));
});

describe("The virtualAppSetState transaction generated by the commitment", () => {
  jest.setTimeout(JEST_TEST_WAIT_TIME);

  it("succeeds", async () => {
    const c1 = new VirtualAppSetStateCommitment(
      network,
      targetAppInstance.identity,
      EXPIRY_NONCE,
      targetAppInstance.timeout,
      targetAppInstance.hashOfLatestState,
      targetAppInstance.nonce
    );
    const s1 = signingKeys[1].signDigest(c1.hashToSign(false));

    const txn = c1.transaction([s1], s0);

    await wallet.sendTransaction({
      ...txn,
      gasLimit: SETSTATE_COMMITMENT_GAS
    });

    const contractAppState = await appRegistry.appStates(
      targetAppInstance.identityHash
    );

    expect(contractAppState.appStateHash).toBe(
      targetAppInstance.hashOfLatestState
    );
  });
  it("fails with nonce above expiry", async () => {
    const c1 = new VirtualAppSetStateCommitment(
      network,
      targetAppInstance.identity,
      EXPIRY_NONCE,
      targetAppInstance.timeout,
      targetAppInstance.hashOfLatestState,
      EXPIRY_NONCE + 1
    );
    const s1 = signingKeys[1].signDigest(c1.hashToSign(false));

    const txn = c1.transaction([s1], s0);

    const e = await rejectionOf(
      wallet.sendTransaction({
        ...txn,
        gasLimit: SETSTATE_COMMITMENT_GAS
      })
    );
    expect(e);
  });
});
