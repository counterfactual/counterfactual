/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';

import '@stencil/router';
import '@stencil/state-tunnel';
import {
  RouterHistory,
} from '@stencil/router';
import {
  GameState,
  HighRollerAppState,
  HighRollerStage,
  PlayerType,
} from './data/game-types';
import {
  AppInstance,
} from './data/mock-app-instance';
import {
  AppInstanceInfo,
  HighRollerUIMutableState,
  HighRollerUIState,
} from './data/types';


export namespace Components {

  interface AppAcceptInvite {
    'betAmount': string;
    'history': RouterHistory;
    'myName': string;
    'opponentName': string;
  }
  interface AppAcceptInviteAttributes extends StencilHTMLAttributes {
    'betAmount'?: string;
    'history'?: RouterHistory;
    'myName'?: string;
    'opponentName'?: string;
  }

  interface AppGameCoin {
    'coins': string[][];
    'delay': number;
    'speed': number;
    'x': number;
  }
  interface AppGameCoinAttributes extends StencilHTMLAttributes {
    'coins'?: string[][];
    'delay'?: number;
    'speed'?: number;
    'x'?: number;
  }

  interface AppGameCoins {}
  interface AppGameCoinsAttributes extends StencilHTMLAttributes {}

  interface AppGameDie {
    'playerType': PlayerType;
    'value': number;
  }
  interface AppGameDieAttributes extends StencilHTMLAttributes {
    'playerType'?: PlayerType;
    'value'?: number;
  }

  interface AppGamePlayer {
    'playerName': string;
    'playerRoll': number[];
    'playerScore': number;
    'playerType': PlayerType;
  }
  interface AppGamePlayerAttributes extends StencilHTMLAttributes {
    'playerName'?: string;
    'playerRoll'?: number[];
    'playerScore'?: number;
    'playerType'?: PlayerType;
  }

  interface AppGameStatus {
    'account': any;
    'betAmount': string;
    'gameState': GameState;
    'highRollerStage': HighRollerStage;
    'isProposing': boolean;
    'label': string;
    'opponent': any;
  }
  interface AppGameStatusAttributes extends StencilHTMLAttributes {
    'account'?: any;
    'betAmount'?: string;
    'gameState'?: GameState;
    'highRollerStage'?: HighRollerStage;
    'isProposing'?: boolean;
    'label'?: string;
    'opponent'?: any;
  }

  interface AppGame {
    'account': any;
    'appInstance': AppInstance;
    'appInstanceId': string;
    'betAmount': string;
    'cfProvider': cf.Provider;
    'gameState': GameState;
    'generateRandomRoll': () => number[];
    'highRollerState': HighRollerAppState;
    'history': RouterHistory;
    'isProposing': boolean;
    'myRoll': number[];
    'myScore': number;
    'opponent': any;
    'opponentRoll': number[];
    'opponentScore': number;
    'updateUIState': (data: HighRollerUIMutableState) => void;
  }
  interface AppGameAttributes extends StencilHTMLAttributes {
    'account'?: any;
    'appInstance'?: AppInstance;
    'appInstanceId'?: string;
    'betAmount'?: string;
    'cfProvider'?: cf.Provider;
    'gameState'?: GameState;
    'generateRandomRoll'?: () => number[];
    'highRollerState'?: HighRollerAppState;
    'history'?: RouterHistory;
    'isProposing'?: boolean;
    'myRoll'?: number[];
    'myScore'?: number;
    'opponent'?: any;
    'opponentRoll'?: number[];
    'opponentScore'?: number;
    'updateUIState'?: (data: HighRollerUIMutableState) => void;
  }

  interface AppLogo {
    'history': RouterHistory;
    'provideRouterHistory': (history: RouterHistory) => void;
  }
  interface AppLogoAttributes extends StencilHTMLAttributes {
    'history'?: RouterHistory;
    'provideRouterHistory'?: (history: RouterHistory) => void;
  }

  interface AppProvider {
    'appFactory': cf.AppFactory;
    'appInstance': AppInstance;
    'cfProvider': cf.Provider;
    'gameState': GameState;
    'generateRandomRoll': () => number[];
    'goToGame': (history: RouterHistory) => void;
    'highRoller': (
    num1: number,
    num2: number
    ) => Promise<{
      playerFirstRoll: number[];
      playerSecondRoll: number[];
    }>;
    'highRollerState': HighRollerAppState;
    'history': RouterHistory;
    'intermediary': string;
    'myRoll': number[];
    'myScore': number;
    'nodeProvider': MockNodeProvider;
    'opponentRoll': number[];
    'opponentScore': number;
    'updateAppFactory': (appFactory: cf.AppFactory) => void;
    'updateAppInstance': (appInstance: AppInstance) => void;
    'updateCfProvider': (cfProvider: cf.Provider) => void;
    'updateIntermediary': (intermediary: string) => void;
    'updateUIState': (data: HighRollerUIMutableState) => void;
  }
  interface AppProviderAttributes extends StencilHTMLAttributes {
    'appFactory'?: cf.AppFactory;
    'appInstance'?: AppInstance;
    'cfProvider'?: cf.Provider;
    'gameState'?: GameState;
    'generateRandomRoll'?: () => number[];
    'goToGame'?: (history: RouterHistory) => void;
    'highRoller'?: (
    num1: number,
    num2: number
    ) => Promise<{
      playerFirstRoll: number[];
      playerSecondRoll: number[];
    }>;
    'highRollerState'?: HighRollerAppState;
    'history'?: RouterHistory;
    'intermediary'?: string;
    'myRoll'?: number[];
    'myScore'?: number;
    'nodeProvider'?: MockNodeProvider;
    'opponentRoll'?: number[];
    'opponentScore'?: number;
    'updateAppFactory'?: (appFactory: cf.AppFactory) => void;
    'updateAppInstance'?: (appInstance: AppInstance) => void;
    'updateCfProvider'?: (cfProvider: cf.Provider) => void;
    'updateIntermediary'?: (intermediary: string) => void;
    'updateUIState'?: (data: HighRollerUIMutableState) => void;
  }

  interface AppRoot {
    'state': any;
    'uiState': HighRollerUIState;
  }
  interface AppRootAttributes extends StencilHTMLAttributes {
    'state'?: any;
    'uiState'?: HighRollerUIState;
  }

  interface AppWager {
    'account': any;
    'appFactory': cf.AppFactory;
    'history': RouterHistory;
    'standalone': boolean;
    'updateAppInstance': (appInstance: AppInstanceInfo) => void;
    'updateOpponent': (opponent: any) => void;
  }
  interface AppWagerAttributes extends StencilHTMLAttributes {
    'account'?: any;
    'appFactory'?: cf.AppFactory;
    'history'?: RouterHistory;
    'standalone'?: boolean;
    'updateAppInstance'?: (appInstance: AppInstanceInfo) => void;
    'updateOpponent'?: (opponent: any) => void;
  }

  interface AppWaiting {
    'account': any;
    'appInstance': any;
    'betAmount': string;
    'cfProvider': any;
    'history': RouterHistory;
    'isProposing': boolean;
    'myName': string;
    'opponent': any;
    'opponentName': string;
  }
  interface AppWaitingAttributes extends StencilHTMLAttributes {
    'account'?: any;
    'appInstance'?: any;
    'betAmount'?: string;
    'cfProvider'?: any;
    'history'?: RouterHistory;
    'isProposing'?: boolean;
    'myName'?: string;
    'opponent'?: any;
    'opponentName'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'AppAcceptInvite': Components.AppAcceptInvite;
    'AppGameCoin': Components.AppGameCoin;
    'AppGameCoins': Components.AppGameCoins;
    'AppGameDie': Components.AppGameDie;
    'AppGamePlayer': Components.AppGamePlayer;
    'AppGameStatus': Components.AppGameStatus;
    'AppGame': Components.AppGame;
    'AppLogo': Components.AppLogo;
    'AppProvider': Components.AppProvider;
    'AppRoot': Components.AppRoot;
    'AppWager': Components.AppWager;
    'AppWaiting': Components.AppWaiting;
  }

  interface StencilIntrinsicElements {
    'app-accept-invite': Components.AppAcceptInviteAttributes;
    'app-game-coin': Components.AppGameCoinAttributes;
    'app-game-coins': Components.AppGameCoinsAttributes;
    'app-game-die': Components.AppGameDieAttributes;
    'app-game-player': Components.AppGamePlayerAttributes;
    'app-game-status': Components.AppGameStatusAttributes;
    'app-game': Components.AppGameAttributes;
    'app-logo': Components.AppLogoAttributes;
    'app-provider': Components.AppProviderAttributes;
    'app-root': Components.AppRootAttributes;
    'app-wager': Components.AppWagerAttributes;
    'app-waiting': Components.AppWaitingAttributes;
  }


  interface HTMLAppAcceptInviteElement extends Components.AppAcceptInvite, HTMLStencilElement {}
  var HTMLAppAcceptInviteElement: {
    prototype: HTMLAppAcceptInviteElement;
    new (): HTMLAppAcceptInviteElement;
  };

  interface HTMLAppGameCoinElement extends Components.AppGameCoin, HTMLStencilElement {}
  var HTMLAppGameCoinElement: {
    prototype: HTMLAppGameCoinElement;
    new (): HTMLAppGameCoinElement;
  };

  interface HTMLAppGameCoinsElement extends Components.AppGameCoins, HTMLStencilElement {}
  var HTMLAppGameCoinsElement: {
    prototype: HTMLAppGameCoinsElement;
    new (): HTMLAppGameCoinsElement;
  };

  interface HTMLAppGameDieElement extends Components.AppGameDie, HTMLStencilElement {}
  var HTMLAppGameDieElement: {
    prototype: HTMLAppGameDieElement;
    new (): HTMLAppGameDieElement;
  };

  interface HTMLAppGamePlayerElement extends Components.AppGamePlayer, HTMLStencilElement {}
  var HTMLAppGamePlayerElement: {
    prototype: HTMLAppGamePlayerElement;
    new (): HTMLAppGamePlayerElement;
  };

  interface HTMLAppGameStatusElement extends Components.AppGameStatus, HTMLStencilElement {}
  var HTMLAppGameStatusElement: {
    prototype: HTMLAppGameStatusElement;
    new (): HTMLAppGameStatusElement;
  };

  interface HTMLAppGameElement extends Components.AppGame, HTMLStencilElement {}
  var HTMLAppGameElement: {
    prototype: HTMLAppGameElement;
    new (): HTMLAppGameElement;
  };

  interface HTMLAppLogoElement extends Components.AppLogo, HTMLStencilElement {}
  var HTMLAppLogoElement: {
    prototype: HTMLAppLogoElement;
    new (): HTMLAppLogoElement;
  };

  interface HTMLAppProviderElement extends Components.AppProvider, HTMLStencilElement {}
  var HTMLAppProviderElement: {
    prototype: HTMLAppProviderElement;
    new (): HTMLAppProviderElement;
  };

  interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLAppWagerElement extends Components.AppWager, HTMLStencilElement {}
  var HTMLAppWagerElement: {
    prototype: HTMLAppWagerElement;
    new (): HTMLAppWagerElement;
  };

  interface HTMLAppWaitingElement extends Components.AppWaiting, HTMLStencilElement {}
  var HTMLAppWaitingElement: {
    prototype: HTMLAppWaitingElement;
    new (): HTMLAppWaitingElement;
  };

  interface HTMLElementTagNameMap {
    'app-accept-invite': HTMLAppAcceptInviteElement
    'app-game-coin': HTMLAppGameCoinElement
    'app-game-coins': HTMLAppGameCoinsElement
    'app-game-die': HTMLAppGameDieElement
    'app-game-player': HTMLAppGamePlayerElement
    'app-game-status': HTMLAppGameStatusElement
    'app-game': HTMLAppGameElement
    'app-logo': HTMLAppLogoElement
    'app-provider': HTMLAppProviderElement
    'app-root': HTMLAppRootElement
    'app-wager': HTMLAppWagerElement
    'app-waiting': HTMLAppWaitingElement
  }

  interface ElementTagNameMap {
    'app-accept-invite': HTMLAppAcceptInviteElement;
    'app-game-coin': HTMLAppGameCoinElement;
    'app-game-coins': HTMLAppGameCoinsElement;
    'app-game-die': HTMLAppGameDieElement;
    'app-game-player': HTMLAppGamePlayerElement;
    'app-game-status': HTMLAppGameStatusElement;
    'app-game': HTMLAppGameElement;
    'app-logo': HTMLAppLogoElement;
    'app-provider': HTMLAppProviderElement;
    'app-root': HTMLAppRootElement;
    'app-wager': HTMLAppWagerElement;
    'app-waiting': HTMLAppWaitingElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
