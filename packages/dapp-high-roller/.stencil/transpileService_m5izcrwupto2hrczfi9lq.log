{"moduleFile":{"sourceFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/components/app-root/app-root.tsx","localImports":["/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/data/counterfactual","/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/data/game-types","/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/data/high-roller"],"externalImports":["@stencil/core","@stencil/router"],"potentialCmpRefs":[{"tag":"stencil-router"},{"tag":"stencil-route-switch"},{"tag":"app-provider"},{"tag":"stencil-route"}],"cmpMeta":{"tagNameMeta":"app-root","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/components/app-root/app-root.scss","cmpRelativePath":"app-root.scss","originalComponentPath":"app-root.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"AppRoot","tags":[],"documentation":"","type":"typeof AppRoot"},"encapsulationMeta":1,"componentClass":"AppRoot","membersMeta":{"userDataReceived":{"memberType":16},"history":{"memberType":16},"state":{"memberType":2,"attribName":"state","attribType":{"text":"any","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":1,"jsdoc":{"name":"state","tags":[],"documentation":"","type":"any"}},"uiState":{"memberType":2,"attribName":"ui-state","attribType":{"text":"HighRollerUIState","required":false,"optional":false,"typeReferences":{"HighRollerUIState":{"referenceLocation":"import","importReferenceLocation":"../../data/types"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"uiState","tags":[],"documentation":"","type":"HighRollerUIMutableState & { updateUIState: (state: HighRollerUIMutableState) => void; highRoller: (num1: number, num2: number) => Promise<{ myRoll: number[]; opponentRoll: number[]; }>; generateRandomRoll: () => number[]; }"}}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/components/app-root/app-root.js"},"jsText":"import CounterfactualTunnel from \"../../data/counterfactual\";\r\nimport { GameState, HighRollerStage } from \"../../data/game-types\";\r\nimport HighRollerUITunnel from \"../../data/high-roller\";\r\nconst { solidityKeccak256 } = ethers.utils;\r\nconst { HashZero } = ethers.constants;\r\nexport class AppRoot {\r\n    constructor() {\r\n        this.userDataReceived = false;\r\n        this.history = {};\r\n        const params = new URLSearchParams(window.location.search);\r\n        this.state = {\r\n            account: {},\r\n            opponent: {},\r\n            standalone: params.get(\"standalone\") === \"true\" || false,\r\n            appInstance: null,\r\n            appFactory: null,\r\n            cfProvider: null,\r\n            intermediary: null,\r\n            updateAppInstance: this.updateAppInstance.bind(this),\r\n            updateAppFactory: this.updateAppFactory.bind(this),\r\n            updateUser: this.updateAccount.bind(this),\r\n            updateOpponent: this.updateOpponent.bind(this),\r\n            updateCfProvider: this.updateCfProvider.bind(this),\r\n            updateIntermediary: this.updateIntermediary.bind(this)\r\n        };\r\n        this.uiState = {\r\n            myRoll: [0, 0],\r\n            myScore: 0,\r\n            opponentRoll: [0, 0],\r\n            opponentScore: 0,\r\n            gameState: GameState.Play,\r\n            updateUIState: this.updateUIState.bind(this),\r\n            highRoller: this.highRoller.bind(this),\r\n            generateRandomRoll: this.generateRandomRoll.bind(this),\r\n            highRollerState: {\r\n                stage: HighRollerStage.WAITING_FOR_P1_COMMITMENT,\r\n                salt: HashZero,\r\n                commitHash: HashZero,\r\n                playerFirstNumber: 0,\r\n                playerSecondNumber: 0,\r\n                versionNumber: 0\r\n            }\r\n        };\r\n        window.addEventListener(\"popstate\", () => {\r\n            window.parent.postMessage(`playground:send:dappRoute|${location.hash}`, \"*\");\r\n        });\r\n    }\r\n    setupPlaygroundMessageListeners() {\r\n        window.addEventListener(\"message\", async (event) => {\r\n            if (typeof event.data === \"string\" &&\r\n                event.data.startsWith(\"playground:response:user\")) {\r\n                const [, data] = event.data.split(\"|\");\r\n                const account = JSON.parse(data);\r\n                this.updateAccount(account);\r\n                this.userDataReceived = true;\r\n            }\r\n            if (typeof event.data === \"string\" &&\r\n                event.data.startsWith(\"playground:response:appInstance\")) {\r\n                const [, data] = event.data.split(\"|\");\r\n                if (data) {\r\n                    console.log(\"Received playground appInstance: \", data);\r\n                    const { appInstance } = JSON.parse(data);\r\n                    this.updateAppInstance(appInstance);\r\n                    this.updateOpponent({\r\n                        attributes: {\r\n                            nodeAddress: this.state.appInstance.initialState.initiatorAddress\r\n                        }\r\n                    });\r\n                    this.goToWaitingRoom(this.history);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    async componentWillLoad() {\r\n        this.setupPlaygroundMessageListeners();\r\n    }\r\n    async componentDidLoad() {\r\n        window.parent.postMessage(\"playground:request:user\", \"*\");\r\n        if (this.state.standalone) {\r\n            const mockAccount = {\r\n                user: {\r\n                    address: \"0xc60b9023bb8dc153b4046977328ce79af12a77e0\",\r\n                    email: \"alon2@example.com\",\r\n                    id: \"687297bc-8014-4c82-8cee-3b7ca7db09d4\",\r\n                    username: \"MyName\"\r\n                },\r\n                multisigAddress: \"0x9499ac5A66c36447e535d252c049304D80961CED\"\r\n            };\r\n            this.updateAccount(mockAccount);\r\n            this.userDataReceived = true;\r\n        }\r\n    }\r\n    receiveRouterHistory(history) {\r\n        this.history = history;\r\n    }\r\n    updateAccount(account) {\r\n        this.state = Object.assign({}, this.state, { account });\r\n        ga(\"set\", \"userId\", account.user.id);\r\n    }\r\n    updateOpponent(opponent) {\r\n        this.state = Object.assign({}, this.state, { opponent });\r\n    }\r\n    updateAppInstance(appInstance) {\r\n        this.state = Object.assign({}, this.state, { appInstance });\r\n        console.log(\"appInstance updated\", appInstance);\r\n    }\r\n    updateAppFactory(appFactory) {\r\n        this.state = Object.assign({}, this.state, { appFactory });\r\n    }\r\n    updateCfProvider(cfProvider) {\r\n        this.state = Object.assign({}, this.state, { cfProvider });\r\n        console.log(\"CFProvider instance updated\");\r\n    }\r\n    updateIntermediary(intermediary) {\r\n        this.state = Object.assign({}, this.state, { intermediary });\r\n    }\r\n    updateUIState(state) {\r\n        this.uiState = Object.assign({}, this.uiState, state);\r\n        console.log(\"%cNew UI state detected\", \"font-size: 14px; color: red\");\r\n        console.log(\"    \", this.uiState);\r\n    }\r\n    generateRandomRoll() {\r\n        return [\r\n            1 + Math.floor(Math.random() * Math.floor(6)),\r\n            1 + Math.floor(Math.random() * Math.floor(6))\r\n        ];\r\n    }\r\n    async highRoller(num1, num2) {\r\n        const randomness = solidityKeccak256([\"uint256\"], [num1.mul(num2)]);\r\n        const abi = [\r\n            `\n      function highRoller(bytes32 randomness)\n        public\n        pure\n        returns(uint8 playerFirstTotal, uint8 playerSecondTotal)\n    `\r\n        ];\r\n        const provider = new ethers.providers.Web3Provider(web3.currentProvider);\r\n        const contractAddress = \"0x144F1A5C2db59B58f2c73d09A2acb27a57E47618\";\r\n        const contract = new ethers.Contract(contractAddress, abi, provider);\r\n        const result = await contract.highRoller(randomness);\r\n        return {\r\n            playerFirstRoll: this.getDieNumbers(result[0]),\r\n            playerSecondRoll: this.getDieNumbers(result[1])\r\n        };\r\n    }\r\n    getDieNumbers(totalSum) {\r\n        if (totalSum === 12) {\r\n            return [6, 6];\r\n        }\r\n        if (totalSum > 2 && totalSum < 12) {\r\n            return [Math.floor(totalSum / 2), Math.ceil(totalSum / 2)];\r\n        }\r\n        if (totalSum > 2 && totalSum % 2 === 0) {\r\n            return [Math.floor(totalSum / 2) - 1, Math.ceil(totalSum / 2) + 1];\r\n        }\r\n        return [totalSum / 2, totalSum / 2];\r\n    }\r\n    goToGame(history, isProposing = true) {\r\n        history.push({\r\n            pathname: \"/game\",\r\n            state: {\r\n                isProposing,\r\n                betAmount: ethers.utils.formatEther(this.state.appInstance.initiatorDeposit)\r\n            },\r\n            query: {},\r\n            key: \"\"\r\n        });\r\n    }\r\n    goToWaitingRoom(history) {\r\n        history.push(\"/waiting\", {\r\n            isProposing: false,\r\n            betAmount: ethers.utils.formatEther(this.state.appInstance.responderDeposit)\r\n        });\r\n    }\r\n    render() {\r\n        return this.userDataReceived ? (h(\"div\", { class: \"height-100\" },\r\n            h(\"main\", { class: \"height-100\" },\r\n                h(CounterfactualTunnel.Provider, { state: this.state },\r\n                    h(HighRollerUITunnel.Provider, { state: this.uiState },\r\n                        h(\"stencil-router\", { historyType: \"hash\" },\r\n                            h(\"stencil-route-switch\", { scrollTopOffset: 0 },\r\n                                h(\"app-provider\", { updateAppInstance: this.state.updateAppInstance.bind(this), updateAppFactory: this.state.updateAppFactory.bind(this), updateCfProvider: this.state.updateCfProvider.bind(this), updateIntermediary: this.state.updateIntermediary.bind(this), updateUIState: this.uiState.updateUIState.bind(this), highRoller: this.uiState.highRoller.bind(this), generateRandomRoll: this.uiState.generateRandomRoll.bind(this), goToGame: this.goToGame.bind(this), history: this.history },\r\n                                    h(\"stencil-route\", { url: \"/\", exact: true, component: \"app-logo\", componentProps: {\r\n                                            cfProvider: this.state.cfProvider,\r\n                                            appInstance: this.state.appInstance,\r\n                                            goToWaitingRoom: this.goToWaitingRoom,\r\n                                            updateAppInstance: this.updateAppInstance,\r\n                                            provideRouterHistory: this.receiveRouterHistory.bind(this)\r\n                                        } }),\r\n                                    h(\"stencil-route\", { url: \"/wager\", component: \"app-wager\", componentProps: {\r\n                                            updateOpponent: this.state.updateOpponent\r\n                                        } }),\r\n                                    h(\"stencil-route\", { url: \"/game\", component: \"app-game\" }),\r\n                                    h(\"stencil-route\", { url: \"/waiting\", component: \"app-waiting\", componentProps: {\r\n                                            cfProvider: this.state.cfProvider,\r\n                                            appInstance: this.state.appInstance,\r\n                                            goToWaitingRoom: this.goToWaitingRoom,\r\n                                            updateAppInstance: this.updateAppInstance,\r\n                                            history: this.history\r\n                                        } }),\r\n                                    h(\"stencil-route\", { url: \"/accept-invite\", component: \"app-accept-invite\" }))))))))) : (h(\"h1\", { class: \"App message\" }, \"connecting....\"));\r\n    }\r\n    static get is() { return \"app-root\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get properties() { return {\r\n        \"history\": {\r\n            \"state\": true\r\n        },\r\n        \"state\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"state\",\r\n            \"mutable\": true\r\n        },\r\n        \"uiState\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"ui-state\",\r\n            \"mutable\": true\r\n        },\r\n        \"userDataReceived\": {\r\n            \"state\": true\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:app-root:**/\"; }\r\n}\r\n"}