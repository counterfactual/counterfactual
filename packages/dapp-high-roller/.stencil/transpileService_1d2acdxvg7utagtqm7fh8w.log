{"moduleFile":{"sourceFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/components/app-wager/app-wager.tsx","localImports":["/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/data/counterfactual","/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/data/game-types"],"externalImports":["@stencil/core","@stencil/router"],"potentialCmpRefs":[{"tag":"app-waiting"}],"cmpMeta":{"tagNameMeta":"app-wager","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/components/app-wager/app-wager.scss","cmpRelativePath":"app-wager.scss","originalComponentPath":"app-wager.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"AppWager","tags":[],"documentation":"User Story\n0.1 ETH is staked hard coded\nThe username is retrieved from the Playground","type":"typeof AppWager"},"encapsulationMeta":1,"componentClass":"AppWager","membersMeta":{"el":{"memberType":64},"betAmount":{"memberType":16},"myName":{"memberType":16},"opponent":{"memberType":16},"intermediary":{"memberType":16},"isError":{"memberType":16},"isWaiting":{"memberType":16},"error":{"memberType":16,"watchCallbacks":["onErrorSet"]},"history":{"memberType":1,"attribName":"history","attribType":{"text":"RouterHistory","required":false,"optional":false,"typeReferences":{"RouterHistory":{"referenceLocation":"import","importReferenceLocation":"@stencil/router"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"history","tags":[],"documentation":"","type":"RouterHistory","default":"{} as RouterHistory"}},"appFactory":{"memberType":1,"attribName":"app-factory","attribType":{"text":"cf.AppFactory","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"appFactory","tags":[],"documentation":"","type":"{ new (appID: string, encodings: AppABIEncodings, provider: Provider): AppFactory; proposeInstall(parameters: { proposedToIdentifier: string; initiatorDeposit: BigNumberish; responderDeposit: BigNumberish; initialState: SolidityABIEncoderV2Type; }): Promise<string>; proposeInstallVirtual(parameters: { proposedToIdentifier: string; initiatorDeposit: BigNumberish; responderDeposit: BigNumberish; initialState: SolidityABIEncoderV2Type; intermediaries: string[]; timeout: number; }): Promise<string>; }","default":"{} as cf.AppFactory"}},"account":{"memberType":1,"attribName":"account","attribType":{"text":"any","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":1,"jsdoc":{"name":"account","tags":[],"documentation":"","type":"any"}},"standalone":{"memberType":1,"attribName":"standalone","attribType":{"text":"boolean","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":4,"jsdoc":{"name":"standalone","tags":[],"documentation":"","type":"boolean","default":"false"}},"updateAppInstance":{"memberType":1,"attribName":"update-app-instance","attribType":{"text":"(appInstance: AppInstanceInfo) => void","required":false,"optional":false,"typeReferences":{"AppInstanceInfo":{"referenceLocation":"import","importReferenceLocation":"../../data/types"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"updateAppInstance","tags":[],"documentation":"","type":"(appInstance: AppInstanceInfo) => void","default":"() => {}"}},"updateOpponent":{"memberType":1,"attribName":"update-opponent","attribType":{"text":"(opponent: any) => void","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"updateOpponent","tags":[],"documentation":"","type":"(opponent: any) => void","default":"() => {}"}}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/components/app-wager/app-wager.js"},"jsText":"import CounterfactualTunnel from \"../../data/counterfactual\";\r\nimport { HighRollerStage } from \"../../data/game-types\";\r\nconst { HashZero } = ethers.constants;\r\nexport class AppWager {\r\n    constructor() {\r\n        this.el = {};\r\n        this.history = {};\r\n        this.appFactory = {};\r\n        this.betAmount = \"0.01\";\r\n        this.myName = \"\";\r\n        this.opponent = { attributes: {} };\r\n        this.intermediary = \"\";\r\n        this.isError = false;\r\n        this.isWaiting = false;\r\n        this.standalone = false;\r\n        this.updateAppInstance = () => { };\r\n        this.updateOpponent = () => { };\r\n    }\r\n    async componentWillLoad() {\r\n        this.myName = this.account.user.username;\r\n        return await this.matchmake();\r\n    }\r\n    async handlePlay(e) {\r\n        e.preventDefault();\r\n        try {\r\n            const initialState = {\r\n                stage: HighRollerStage.WAITING_FOR_P1_COMMITMENT,\r\n                salt: HashZero,\r\n                commitHash: HashZero,\r\n                playerFirstNumber: 0,\r\n                playerSecondNumber: 0,\r\n                versionNumber: 0\r\n            };\r\n            const currentEthBalance = ethers.utils.parseEther(this.account.balance);\r\n            const bet = ethers.utils.parseEther(this.betAmount);\r\n            if (currentEthBalance.lt(bet)) {\r\n                this.error = `Insufficient funds: You need at least ${this.betAmount} ETH to play.`;\r\n                return;\r\n            }\r\n            if (bet.gt(ethers.utils.parseEther(\"0.01\")) ||\r\n                bet.lt(ethers.utils.parseEther(\"0\"))) {\r\n                this.error = `Please, place a bet between 0 and 0.01 ETH.`;\r\n                return;\r\n            }\r\n            await this.appFactory.proposeInstallVirtual({\r\n                initialState,\r\n                proposedToIdentifier: this.opponent.attributes.nodeAddress,\r\n                responderDeposit: ethers.utils.parseEther(this.betAmount),\r\n                initiatorDeposit: ethers.utils.parseEther(this.betAmount),\r\n                timeout: 172800,\r\n                intermediaries: [this.intermediary]\r\n            });\r\n            this.isWaiting = true;\r\n        }\r\n        catch (e) {\r\n            debugger;\r\n        }\r\n    }\r\n    async matchmake() {\r\n        try {\r\n            const result = await this.fetchMatchmake();\r\n            this.opponent = {\r\n                attributes: {\r\n                    username: result.data.attributes.username,\r\n                    nodeAddress: result.data.attributes.nodeAddress,\r\n                    ethAddress: result.data.attributes.ethAddress\r\n                }\r\n            };\r\n            this.intermediary = result.data.attributes.intermediary;\r\n            this.error = null;\r\n            this.updateOpponent(this.opponent);\r\n        }\r\n        catch (error) {\r\n            this.error = error;\r\n        }\r\n    }\r\n    onErrorSet() {\r\n        this.isError = !!this.error;\r\n    }\r\n    handleChange(e, prop) {\r\n        this[prop] = e.target.value;\r\n    }\r\n    async fetchMatchmake() {\r\n        if (this.standalone) {\r\n            return {\r\n                data: {\r\n                    type: \"matchmaking\",\r\n                    id: \"2b83cb14-c7aa-5208-8da8-369aeb1a3f24\",\r\n                    attributes: {\r\n                        intermediary: this.account.multisigAddress\r\n                    },\r\n                    relationships: {\r\n                        users: {\r\n                            data: {\r\n                                type: \"users\",\r\n                                id: this.account.user.id\r\n                            }\r\n                        },\r\n                        matchedUser: {\r\n                            data: {\r\n                                type: \"matchedUsers\",\r\n                                id: \"3d54b508-b355-4323-8738-4cdf7290a2fd\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                included: [\r\n                    {\r\n                        type: \"users\",\r\n                        id: this.account.user.id,\r\n                        attributes: {\r\n                            username: this.account.user.username,\r\n                            ethAddress: this.account.user.ethAddress\r\n                        }\r\n                    },\r\n                    {\r\n                        type: \"matchedUsers\",\r\n                        id: \"3d54b508-b355-4323-8738-4cdf7290a2fd\",\r\n                        attributes: {\r\n                            username: \"MyOpponent\",\r\n                            ethAddress: \"0x12345\"\r\n                        }\r\n                    }\r\n                ]\r\n            };\r\n        }\r\n        return new Promise(resolve => {\r\n            const onMatchmakeResponse = (event) => {\r\n                if (!event.data.toString().startsWith(\"playground:response:matchmake\")) {\r\n                    return;\r\n                }\r\n                window.removeEventListener(\"message\", onMatchmakeResponse);\r\n                const [, data] = event.data.split(\"|\");\r\n                resolve(JSON.parse(data));\r\n            };\r\n            window.addEventListener(\"message\", onMatchmakeResponse);\r\n            window.parent.postMessage(\"playground:request:matchmake\", \"*\");\r\n        });\r\n    }\r\n    render() {\r\n        if (this.isWaiting) {\r\n            return (h(\"app-waiting\", { myName: this.myName, betAmount: this.betAmount, opponentName: this.opponent.attributes.username, isProposing: true }));\r\n        }\r\n        return (h(\"div\", { class: \"wrapper\" },\r\n            h(\"div\", { class: \"wager\" },\r\n                h(\"div\", { class: \"message\" },\r\n                    h(\"img\", { class: \"message__icon\", src: \"/assets/images/logo.svg\", alt: \"High Roller\" }),\r\n                    h(\"h1\", { class: \"message__title\" }, \"Welcome!\"),\r\n                    h(\"p\", { class: \"message__body\" }, \"Ready to play?\")),\r\n                h(\"form\", { class: \"form\", onSubmit: (e) => this.handlePlay(e) },\r\n                    h(\"label\", { htmlFor: \"myName\" }, \"Your Name\"),\r\n                    h(\"input\", { class: \"form__input\", id: \"myName\", type: \"text\", placeholder: \"Your name\", value: this.myName, onInput: e => this.handleChange(e, \"myName\"), readOnly: true }),\r\n                    h(\"label\", { htmlFor: \"betAmount\" }, \"Bet Amount ( ETH )\"),\r\n                    h(\"input\", { class: \"form__input\", id: \"betAmount\", type: \"number\", placeholder: \"0.01\", value: this.betAmount, onInput: e => this.handleChange(e, \"betAmount\"), min: 0, max: 0.01, step: 0.00000001 }),\r\n                    this.isError ? (h(\"label\", { class: \"message__error\" }, this.error instanceof Error\r\n                        ? `${this.error.message}: ${this.error.stack}`\r\n                        : this.error)) : ({}),\r\n                    h(\"button\", { class: \"form__button\" },\r\n                        h(\"div\", null, \"Play!\"))))));\r\n    }\r\n    static get is() { return \"app-wager\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get properties() { return {\r\n        \"account\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"account\"\r\n        },\r\n        \"appFactory\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"app-factory\"\r\n        },\r\n        \"betAmount\": {\r\n            \"state\": true\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"error\": {\r\n            \"state\": true,\r\n            \"watchCallbacks\": [\"onErrorSet\"]\r\n        },\r\n        \"history\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"history\"\r\n        },\r\n        \"intermediary\": {\r\n            \"state\": true\r\n        },\r\n        \"isError\": {\r\n            \"state\": true\r\n        },\r\n        \"isWaiting\": {\r\n            \"state\": true\r\n        },\r\n        \"myName\": {\r\n            \"state\": true\r\n        },\r\n        \"opponent\": {\r\n            \"state\": true\r\n        },\r\n        \"standalone\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"standalone\"\r\n        },\r\n        \"updateAppInstance\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"update-app-instance\"\r\n        },\r\n        \"updateOpponent\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"update-opponent\"\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:app-wager:**/\"; }\r\n}\r\nCounterfactualTunnel.injectProps(AppWager, [\r\n    \"appFactory\",\r\n    \"updateAppInstance\",\r\n    \"account\",\r\n    \"opponent\",\r\n    \"standalone\"\r\n]);\r\n"}