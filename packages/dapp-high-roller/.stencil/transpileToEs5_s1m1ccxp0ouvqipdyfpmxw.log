var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
App.loadBundle('/**:bundle-id:**/', ['exports', './chunk-7a957887.js', './chunk-346f9d40.js', './chunk-48936b03.js', './chunk-b4eb213b.js'], function (exports, __chunk_1, __chunk_2, __chunk_3, __chunk_4) {
    var h = window.App.h;
    var HashZero = ethers.constants.HashZero;
    var bigNumberify = ethers.utils.bigNumberify;
    var AppGame = /** @class */ (function () {
        function AppGame() {
            this.el = {};
            this.history = {};
            this.betAmount = "0.01 ETH";
            this.isProposing = false;
            this.appInstanceId = "";
            this.cfProvider = {};
            this.appInstance = {};
            this.account = { user: { username: "Facundo" } };
            this.opponent = { attributes: { username: "John" } };
            this.generateRandomRoll = function () { return []; };
            this.gameStatusLabel = "";
            this.defaultHighRollerState = {
                stage: __chunk_3.HighRollerStage.WAITING_FOR_P1_COMMITMENT,
                salt: HashZero,
                commitHash: HashZero,
                playerFirstNumber: 0,
                playerSecondNumber: 0,
                versionNumber: 0
            };
            this.highRollerState = this
                .defaultHighRollerState;
            this.gameState = __chunk_3.GameState.Play;
            this.myRoll = [1, 1];
            this.myScore = 0;
            this.opponentRoll = [1, 1];
            this.opponentScore = 0;
            this.updateUIState = function () { };
            this.rollingAnimationInterval = {};
            this.rolling = {
                myRoll: false,
                opponentRoll: false
            };
        }
        AppGame.prototype.componentWillLoad = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.betAmount = __chunk_1.getProp("betAmount", this);
                    this.isProposing = __chunk_1.getProp("isProposing", this);
                    this.appInstanceId = __chunk_1.getProp("appInstanceId", this);
                    return [2 /*return*/];
                });
            });
        };
        AppGame.prototype.onHighRollerStateChanged = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.highRollerState.stage === __chunk_3.HighRollerStage.P2_COMMITTED_TO_NUM &&
                                !this.rolling.opponentRoll)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.beginRolling("opponentRoll")];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        AppGame.prototype.onGameStateChanged = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.gameState !== __chunk_3.GameState.Play)) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.stopRolling("myRoll")];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.stopRolling("opponentRoll")];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        AppGame.prototype.beginRolling = function (roller) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.rolling[roller] = true;
                    this.scheduleRoll(roller);
                    return [2 /*return*/];
                });
            });
        };
        AppGame.prototype.scheduleRoll = function (roller) {
            var _this = this;
            this.rollingAnimationInterval[roller] = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.roll(roller)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            }); }); }, 100 + Math.floor(Math.random() * Math.floor(150)));
        };
        AppGame.prototype.roll = function (roller) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this[roller] = this.generateRandomRoll();
                    if (this.rolling[roller]) {
                        this.scheduleRoll(roller);
                    }
                    return [2 /*return*/];
                });
            });
        };
        AppGame.prototype.stopRolling = function (roller) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.rolling[roller] = false;
                    clearTimeout(this.rollingAnimationInterval[roller]);
                    return [2 /*return*/];
                });
            });
        };
        AppGame.prototype.handleRoll = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, numberSalt, playerFirstNumber, hash, commitHashAction, _b, _c, _d, _e, playerSecondNumber, commitHashAction, _f;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            if (!!this.appInstance.takeAction) return [3 /*break*/, 2];
                            _a = this;
                            return [4 /*yield*/, this.cfProvider.getOrCreateAppInstance(this.appInstanceId, this.appInstance)];
                        case 1:
                            _a.appInstance = _g.sent();
                            console.log("Reset appInstance", this.appInstance);
                            _g.label = 2;
                        case 2:
                            if (!(this.highRollerState.stage === __chunk_3.HighRollerStage.WAITING_FOR_P1_COMMITMENT)) return [3 /*break*/, 5];
                            return [4 /*yield*/, this.beginRolling("myRoll")];
                        case 3:
                            _g.sent();
                            numberSalt = __chunk_1.generateSalt();
                            playerFirstNumber = 1 + Math.floor(Math.random() * Math.floor(1000));
                            hash = __chunk_1.computeCommitHash(numberSalt, playerFirstNumber);
                            commitHashAction = {
                                actionType: __chunk_3.HighRollerActionType.COMMIT_TO_HASH,
                                actionHash: hash,
                                number: 0
                            };
                            _b = this;
                            _d = (_c = Object).assign;
                            _e = [{}];
                            return [4 /*yield*/, this.appInstance.takeAction(commitHashAction)];
                        case 4:
                            _b.highRollerState = _d.apply(_c, _e.concat([(_g.sent()), { playerFirstNumber: bigNumberify(playerFirstNumber), salt: numberSalt }]));
                            this.updateUIState({
                                highRollerState: this.highRollerState
                            });
                            return [3 /*break*/, 8];
                        case 5:
                            if (!(this.highRollerState.stage === __chunk_3.HighRollerStage.P1_COMMITTED_TO_HASH)) return [3 /*break*/, 8];
                            return [4 /*yield*/, this.beginRolling("myRoll")];
                        case 6:
                            _g.sent();
                            playerSecondNumber = 1 + Math.floor(Math.random() * Math.floor(1000));
                            commitHashAction = {
                                number: playerSecondNumber,
                                actionType: __chunk_3.HighRollerActionType.COMMIT_TO_NUM,
                                actionHash: HashZero
                            };
                            _f = this;
                            return [4 /*yield*/, this.appInstance.takeAction(commitHashAction)];
                        case 7:
                            _f.highRollerState = (_g.sent());
                            this.gameStatusLabel = "Who will win?";
                            _g.label = 8;
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        AppGame.prototype.handleRematch = function () {
            this.gameState = __chunk_3.GameState.Play;
            this.highRollerState = this.defaultHighRollerState;
        };
        AppGame.prototype.handleExit = function () {
            window.location.assign("/");
        };
        AppGame.prototype.render = function () {
            var _this = this;
            return [
                h("div", { class: "wrapper" }, h("div", { class: "game" }, h("app-game-player", { playerName: this.opponent.attributes.username, playerScore: this.opponentScore, playerType: __chunk_3.PlayerType.Black, playerRoll: this.opponentRoll }), h("app-game-status", { gameState: this.gameState, isProposing: this.isProposing, betAmount: this.betAmount, highRollerStage: this.highRollerState.stage, label: this.gameStatusLabel }), h("app-game-player", { playerName: "You", playerScore: this.myScore, playerType: __chunk_3.PlayerType.White, playerRoll: this.myRoll }), this.gameState === __chunk_3.GameState.Play ? (h("div", { class: "actions" }, h("button", { class: "btn btn--center", onClick: function () { return _this.handleRoll(); } }, "Roll your dice!"))) : (h("div", { class: "actions" }, h("button", { class: "btn btn--exit", onClick: function () { return _this.handleExit(); } }, "Exit"))))),
                this.gameState === __chunk_3.GameState.Won ? h("app-game-coins", null) : undefined
            ];
        };
        Object.defineProperty(AppGame, "is", {
            get: function () { return "app-game"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppGame, "encapsulation", {
            get: function () { return "shadow"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppGame, "properties", {
            get: function () {
                return {
                    "account": {
                        "type": "Any",
                        "attr": "account"
                    },
                    "appInstance": {
                        "type": "Any",
                        "attr": "app-instance",
                        "mutable": true
                    },
                    "appInstanceId": {
                        "type": String,
                        "attr": "app-instance-id",
                        "mutable": true
                    },
                    "betAmount": {
                        "type": String,
                        "attr": "bet-amount",
                        "mutable": true
                    },
                    "cfProvider": {
                        "type": "Any",
                        "attr": "cf-provider"
                    },
                    "el": {
                        "elementRef": true
                    },
                    "gameState": {
                        "type": Number,
                        "attr": "game-state",
                        "mutable": true,
                        "watchCallbacks": ["onGameStateChanged"]
                    },
                    "gameStatusLabel": {
                        "state": true
                    },
                    "generateRandomRoll": {
                        "type": "Any",
                        "attr": "generate-random-roll"
                    },
                    "highRollerState": {
                        "type": "Any",
                        "attr": "high-roller-state",
                        "mutable": true,
                        "watchCallbacks": ["onHighRollerStateChanged"]
                    },
                    "history": {
                        "type": "Any",
                        "attr": "history"
                    },
                    "isProposing": {
                        "type": Boolean,
                        "attr": "is-proposing",
                        "mutable": true
                    },
                    "myRoll": {
                        "type": "Any",
                        "attr": "my-roll",
                        "mutable": true
                    },
                    "myScore": {
                        "type": Number,
                        "attr": "my-score",
                        "mutable": true
                    },
                    "opponent": {
                        "type": "Any",
                        "attr": "opponent"
                    },
                    "opponentRoll": {
                        "type": "Any",
                        "attr": "opponent-roll",
                        "mutable": true
                    },
                    "opponentScore": {
                        "type": Number,
                        "attr": "opponent-score",
                        "mutable": true
                    },
                    "updateUIState": {
                        "type": "Any",
                        "attr": "update-u-i-state"
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppGame, "style", {
            get: function () { return "/**style-placeholder:app-game:**/"; },
            enumerable: true,
            configurable: true
        });
        return AppGame;
    }());
    __chunk_3.CounterfactualTunnel.injectProps(AppGame, [
        "account",
        "opponent",
        "cfProvider",
        "appInstance"
    ]);
    __chunk_4.HighRollerUITunnel.injectProps(AppGame, [
        "myRoll",
        "myScore",
        "opponentRoll",
        "opponentScore",
        "gameState",
        "updateUIState",
        "generateRandomRoll",
        "highRollerState"
    ]);
    var DICE_PATH = "./assets/images/dice/TYPE/0";
    var AppGameDie = /** @class */ (function () {
        function AppGameDie() {
            this.playerType = __chunk_3.PlayerType.Black;
            this.value = 1;
        }
        AppGameDie.prototype.render = function () {
            var dicePath = DICE_PATH.replace(/TYPE/gi, this.playerType);
            return (h("div", { class: "die__wrapper" }, h("div", { class: "die__faces die__face-" + this.value }, h("img", { src: dicePath + "1.svg", class: "die__1 " + this.playerType, alt: "" }), h("img", { src: dicePath + "2.svg", class: "die__2 " + this.playerType, alt: "" }), h("img", { src: dicePath + "3.svg", class: "die__3 " + this.playerType, alt: "" }), h("img", { src: dicePath + "4.svg", class: "die__4 " + this.playerType, alt: "" }), h("img", { src: dicePath + "5.svg", class: "die__5 " + this.playerType, alt: "" }), h("img", { src: dicePath + "6.svg", class: "die__6 " + this.playerType, alt: "" }))));
        };
        Object.defineProperty(AppGameDie, "is", {
            get: function () { return "app-game-die"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppGameDie, "encapsulation", {
            get: function () { return "shadow"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppGameDie, "properties", {
            get: function () {
                return {
                    "playerType": {
                        "type": String,
                        "attr": "player-type"
                    },
                    "value": {
                        "type": Number,
                        "attr": "value"
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppGameDie, "style", {
            get: function () { return "/**style-placeholder:app-game-die:**/"; },
            enumerable: true,
            configurable: true
        });
        return AppGameDie;
    }());
    var AppGamePlayer = /** @class */ (function () {
        function AppGamePlayer() {
            this.playerName = "";
            this.playerScore = 0;
            this.playerType = __chunk_3.PlayerType.Black;
            this.playerRoll = [1, 1];
        }
        AppGamePlayer.prototype.render = function () {
            return (h("div", { class: "player" }, h("div", { class: "player-info" }, h("span", { class: "player-info__name " + this.playerType }, this.playerName), h("div", { class: "player-info__status" }, h("span", { class: "player-info__status__color " + this.playerType }), h("span", { class: "player-info__status__score" }, this.playerScore))), h("div", { class: "player__dice" }, h("app-game-die", { playerType: this.playerType, value: this.playerRoll[0] }), h("app-game-die", { playerType: this.playerType, value: this.playerRoll[1] }))));
        };
        Object.defineProperty(AppGamePlayer, "is", {
            get: function () { return "app-game-player"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppGamePlayer, "encapsulation", {
            get: function () { return "shadow"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppGamePlayer, "properties", {
            get: function () {
                return {
                    "playerName": {
                        "type": String,
                        "attr": "player-name"
                    },
                    "playerRoll": {
                        "type": "Any",
                        "attr": "player-roll"
                    },
                    "playerScore": {
                        "type": Number,
                        "attr": "player-score"
                    },
                    "playerType": {
                        "type": String,
                        "attr": "player-type"
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppGamePlayer, "style", {
            get: function () { return "/**style-placeholder:app-game-player:**/"; },
            enumerable: true,
            configurable: true
        });
        return AppGamePlayer;
    }());
    var AppGameStatus = /** @class */ (function () {
        function AppGameStatus() {
            this.el = {};
            this.gameState = __chunk_3.GameState.Play;
            this.highRollerStage = __chunk_3.HighRollerStage.WAITING_FOR_P1_COMMITMENT;
            this.isProposing = true;
            this.betAmount = "0.01 ETH";
            this.account = { user: { username: "Facundo" } };
            this.opponent = { attributes: { username: "John" } };
            this.label = "";
        }
        Object.defineProperty(AppGameStatus.prototype, "gameStatusLabelForTurn", {
            get: function () {
                if (this.label) {
                    return this.label;
                }
                var isTurnForFirstPlayer = this.highRollerStage === __chunk_3.HighRollerStage.WAITING_FOR_P1_COMMITMENT;
                var isTurnForSecondPlayer = !this.isProposing &&
                    this.highRollerStage === __chunk_3.HighRollerStage.P1_COMMITTED_TO_HASH;
                if (isTurnForFirstPlayer || isTurnForSecondPlayer) {
                    return "Your turn";
                }
                return this.opponent.attributes.username + "'s turn";
            },
            enumerable: true,
            configurable: true
        });
        AppGameStatus.prototype.render = function () {
            return (h("div", { class: "divider" }, this.gameState === __chunk_3.GameState.Play ? (h("div", { class: "divider__status divider__status--turn" }, this.gameStatusLabelForTurn)) : this.gameState === __chunk_3.GameState.Won ? (h("div", { class: "divider__status divider__status--won" }, h("span", { class: "result" }, "You Won!"), h("span", { class: "reward" }, this.betAmount))) : this.gameState === __chunk_3.GameState.Lost ? (h("div", { class: "divider__status divider__status--lost" }, h("span", { class: "result" }, "You Lost!"), h("span", { class: "reward" }, this.betAmount))) : (h("div", { class: "divider__status divider__status--turn" }, "It's a tie!"))));
        };
        Object.defineProperty(AppGameStatus, "is", {
            get: function () { return "app-game-status"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppGameStatus, "encapsulation", {
            get: function () { return "shadow"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppGameStatus, "properties", {
            get: function () {
                return {
                    "account": {
                        "type": "Any",
                        "attr": "account"
                    },
                    "betAmount": {
                        "type": String,
                        "attr": "bet-amount"
                    },
                    "el": {
                        "elementRef": true
                    },
                    "gameState": {
                        "type": Number,
                        "attr": "game-state"
                    },
                    "highRollerStage": {
                        "type": Number,
                        "attr": "high-roller-stage"
                    },
                    "isProposing": {
                        "type": Boolean,
                        "attr": "is-proposing"
                    },
                    "label": {
                        "type": String,
                        "attr": "label"
                    },
                    "opponent": {
                        "type": "Any",
                        "attr": "opponent"
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppGameStatus, "style", {
            get: function () { return "/**style-placeholder:app-game-status:**/"; },
            enumerable: true,
            configurable: true
        });
        return AppGameStatus;
    }());
    __chunk_3.CounterfactualTunnel.injectProps(AppGameStatus, ["account", "opponent"]);
    exports.AppGame = AppGame;
    exports.AppGameDie = AppGameDie;
    exports.AppGamePlayer = AppGamePlayer;
    exports.AppGameStatus = AppGameStatus;
    Object.defineProperty(exports, '__esModule', { value: true });
});
