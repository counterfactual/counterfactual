{"moduleFile":{"sourceFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/components/app-provider/app-provider.tsx","localImports":["/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/data/counterfactual","/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/data/game-types","/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/data/high-roller","/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/data/mock-node-provider"],"externalImports":["@stencil/core","@stencil/router"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"app-provider","stylesMeta":{},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"AppProvider","tags":[],"documentation":"","type":"typeof AppProvider"},"encapsulationMeta":0,"componentClass":"AppProvider","membersMeta":{"el":{"memberType":64},"history":{"memberType":1,"attribName":"history","attribType":{"text":"RouterHistory","required":false,"optional":false,"typeReferences":{"RouterHistory":{"referenceLocation":"import","importReferenceLocation":"@stencil/router"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"history","tags":[],"documentation":"","type":"RouterHistory","default":"{} as RouterHistory"}},"updateAppInstance":{"memberType":1,"attribName":"update-app-instance","attribType":{"text":"(appInstance: AppInstance) => void","required":false,"optional":false,"typeReferences":{"AppInstance":{"referenceLocation":"import","importReferenceLocation":"../../data/mock-app-instance"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"updateAppInstance","tags":[],"documentation":"","type":"(appInstance: AppInstance) => void","default":"() => {}"}},"updateAppFactory":{"memberType":1,"attribName":"update-app-factory","attribType":{"text":"(appFactory: cf.AppFactory) => void","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"updateAppFactory","tags":[],"documentation":"","type":"(appFactory: AppFactory) => void","default":"() => {}"}},"updateCfProvider":{"memberType":1,"attribName":"update-cf-provider","attribType":{"text":"(cfProvider: cf.Provider) => void","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"updateCfProvider","tags":[],"documentation":"","type":"(cfProvider: Provider) => void","default":"() => {}"}},"updateIntermediary":{"memberType":1,"attribName":"update-intermediary","attribType":{"text":"(intermediary: string) => void","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"updateIntermediary","tags":[],"documentation":"","type":"(intermediary: string) => void","default":"() => {}"}},"updateUIState":{"memberType":1,"attribName":"update-u-i-state","attribType":{"text":"(data: HighRollerUIMutableState) => void","required":false,"optional":false,"typeReferences":{"HighRollerUIMutableState":{"referenceLocation":"import","importReferenceLocation":"../../data/types"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"updateUIState","tags":[],"documentation":"","type":"(data: HighRollerUIMutableState) => void","default":"() => {}"}},"goToGame":{"memberType":1,"attribName":"go-to-game","attribType":{"text":"(history: RouterHistory) => void","required":false,"optional":false,"typeReferences":{"RouterHistory":{"referenceLocation":"import","importReferenceLocation":"@stencil/router"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"goToGame","tags":[],"documentation":"","type":"(history: RouterHistory) => void","default":"() => {}"}},"highRoller":{"memberType":1,"attribName":"high-roller","attribType":{"text":"(\n    num1: number,\n    num2: number\n  ) => Promise<{\n    playerFirstRoll: number[];\n    playerSecondRoll: number[];\n  }>","required":false,"optional":false,"typeReferences":{"Promise":{"referenceLocation":"global"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"highRoller","tags":[],"documentation":"","type":"(num1: number, num2: number) => Promise<{ playerFirstRoll: number[]; playerSecondRoll: number[]; }>","default":"async () => ({\n    playerFirstRoll: [0, 0],\n    playerSecondRoll: [0, 0]\n  })"}},"generateRandomRoll":{"memberType":1,"attribName":"generate-random-roll","attribType":{"text":"() => number[]","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"generateRandomRoll","tags":[],"documentation":"","type":"() => number[]","default":"() => [0, 0]"}},"highRollerState":{"memberType":1,"attribName":"high-roller-state","attribType":{"text":"HighRollerAppState","required":false,"optional":false,"typeReferences":{"HighRollerAppState":{"referenceLocation":"import","importReferenceLocation":"../../data/game-types"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"highRollerState","tags":[],"documentation":"","type":"{ stage: HighRollerStage; salt: string; commitHash: string; playerFirstNumber: number; playerSecondNumber: number; versionNumber: number; }","default":"{} as HighRollerAppState"}},"gameState":{"memberType":1,"attribName":"game-state","attribType":{"text":"GameState","required":false,"optional":false,"typeReferences":{"GameState":{"referenceLocation":"import","importReferenceLocation":"../../data/game-types"}}},"reflectToAttrib":false,"propType":8,"jsdoc":{"name":"gameState","tags":[],"documentation":"","type":"GameState.Lost | GameState.Play | GameState.Tie | GameState.Won","default":"GameState.Play"}},"myRoll":{"memberType":1,"attribName":"my-roll","attribType":{"text":"number[]","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"myRoll","tags":[],"documentation":"","type":"number[]","default":"[1, 1]"}},"myScore":{"memberType":1,"attribName":"my-score","attribType":{"text":"number","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":8,"jsdoc":{"name":"myScore","tags":[],"documentation":"","type":"number","default":"0"}},"opponentRoll":{"memberType":1,"attribName":"opponent-roll","attribType":{"text":"number[]","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"opponentRoll","tags":[],"documentation":"","type":"number[]","default":"[1, 1]"}},"opponentScore":{"memberType":1,"attribName":"opponent-score","attribType":{"text":"number","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":8,"jsdoc":{"name":"opponentScore","tags":[],"documentation":"","type":"number","default":"0"}},"nodeProvider":{"memberType":2,"attribName":"node-provider","attribType":{"text":"MockNodeProvider","required":false,"optional":false,"typeReferences":{"MockNodeProvider":{"referenceLocation":"global"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"nodeProvider","tags":[],"documentation":"","type":"NodeProvider","default":"{} as MockNodeProvider"}},"cfProvider":{"memberType":2,"attribName":"cf-provider","attribType":{"text":"cf.Provider","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"cfProvider","tags":[],"documentation":"","type":"{ once: (eventName: any, callback: (data: EventData) => void) => void; on: (eventName: any, callback: (data: EventData) => void) => void; callRawNodeMethod: (methodName: MethodName, params: MethodParams) => Promise<MethodResponse>; appInstances: { [appInstanceId: string]: AppInstance; }; nodeProvider: NodeProvider; getOrCreateAppInstance: (id: string, info: AppInstance) => Promise<AppInstance>; }","default":"{} as cf.Provider"}},"appFactory":{"memberType":2,"attribName":"app-factory","attribType":{"text":"cf.AppFactory","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"appFactory","tags":[],"documentation":"","type":"{ new (appID: string, encodings: AppABIEncodings, provider: Provider): AppFactory; proposeInstall(parameters: { proposedToIdentifier: string; initiatorDeposit: BigNumberish; responderDeposit: BigNumberish; initialState: SolidityABIEncoderV2Type; }): Promise<string>; proposeInstallVirtual(parameters: { proposedToIdentifier: string; initiatorDeposit: BigNumberish; responderDeposit: BigNumberish; initialState: SolidityABIEncoderV2Type; intermediaries: string[]; timeout: number; }): Promise<string>; }","default":"{} as cf.AppFactory"}},"appInstance":{"memberType":2,"attribName":"app-instance","attribType":{"text":"AppInstance","required":false,"optional":false,"typeReferences":{"AppInstance":{"referenceLocation":"import","importReferenceLocation":"../../data/mock-app-instance"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"appInstance","tags":[],"documentation":"","type":"AppInstance","default":"{} as AppInstance"}},"intermediary":{"memberType":1,"attribName":"intermediary","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"intermediary","tags":[],"documentation":"","type":"string","default":"\"\""}}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":true,"hasSvg":false,"jsFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/components/app-provider/app-provider.js"},"jsText":"import CounterfactualTunnel from \"../../data/counterfactual\";\r\nimport { GameState, HighRollerActionType, HighRollerStage } from \"../../data/game-types\";\r\nimport HighRollerUITunnel from \"../../data/high-roller\";\r\nimport MockNodeProvider from \"../../data/mock-node-provider\";\r\nconst bn = ethers.utils.bigNumberify;\r\nexport class AppProvider {\r\n    constructor() {\r\n        this.el = {};\r\n        this.history = {};\r\n        this.updateAppInstance = () => { };\r\n        this.updateAppFactory = () => { };\r\n        this.updateCfProvider = () => { };\r\n        this.updateIntermediary = () => { };\r\n        this.updateUIState = () => { };\r\n        this.goToGame = () => { };\r\n        this.highRoller = async () => ({\r\n            playerFirstRoll: [0, 0],\r\n            playerSecondRoll: [0, 0]\r\n        });\r\n        this.generateRandomRoll = () => [0, 0];\r\n        this.highRollerState = {};\r\n        this.gameState = GameState.Play;\r\n        this.myRoll = [1, 1];\r\n        this.myScore = 0;\r\n        this.opponentRoll = [1, 1];\r\n        this.opponentScore = 0;\r\n        this.nodeProvider = {};\r\n        this.cfProvider = {};\r\n        this.appFactory = {};\r\n        this.appInstance = {};\r\n        this.intermediary = \"\";\r\n    }\r\n    async componentWillLoad() {\r\n        const params = new URLSearchParams(window.location.search);\r\n        this.nodeProvider = !params.get(\"standalone\")\r\n            ? new cf.NodeProvider()\r\n            : new MockNodeProvider();\r\n        await this.nodeProvider.connect();\r\n        this.setupCfProvider();\r\n    }\r\n    setupCfProvider() {\r\n        this.cfProvider = new cf.Provider(this.nodeProvider);\r\n        this.cfProvider.on(\"chan_updateState\", this.onUpdateState.bind(this));\r\n        this.cfProvider.on(\"chan_uninstall\", this.onUninstall.bind(this));\r\n        this.cfProvider.on(\"chan_installVirtual\", this.onInstall.bind(this));\r\n        const highRollerAppDefinitionAddr = \"0x144F1A5C2db59B58f2c73d09A2acb27a57E47618\";\r\n        this.appFactory = new cf.AppFactory(highRollerAppDefinitionAddr, {\r\n            actionEncoding: \"tuple(uint8 actionType, uint256 number, bytes32 actionHash)\",\r\n            stateEncoding: `\n          tuple(\n            uint8 stage,\n            bytes32 salt,\n            bytes32 commitHash,\n            uint256 playerFirstNumber,\n            uint256 playerSecondNumber,\n            uint256 versionNumber\n          )\n        `\r\n        }, this.cfProvider);\r\n        this.updateAppFactory(this.appFactory);\r\n        this.updateCfProvider(this.cfProvider);\r\n    }\r\n    isReadyForHighRoller(state) {\r\n        return (bn(state.playerFirstNumber).toNumber() &&\r\n            bn(state.playerSecondNumber).toNumber() &&\r\n            state.stage === HighRollerStage.P1_REVEALED_NUM);\r\n    }\r\n    async onUpdateState({ data }) {\r\n        const newState = data.newState;\r\n        const state = Object.assign({}, newState, { playerFirstNumber: this.highRollerState.playerFirstNumber || newState[\"playerFirstNumber\"] });\r\n        console.log(\"playerFirstNumber\", state.playerFirstNumber, \"playerSecondNumber\", state.playerSecondNumber);\r\n        if (state.stage === HighRollerStage.P2_COMMITTED_TO_NUM) {\r\n            return await this.appInstance.takeAction({\r\n                actionType: HighRollerActionType.REVEAL_NUM,\r\n                actionHash: this.highRollerState.salt,\r\n                number: state.playerFirstNumber\r\n            });\r\n        }\r\n        if (!this.isReadyForHighRoller(state)) {\r\n            this.updateUIState({ highRollerState: state });\r\n            return;\r\n        }\r\n        let myScore = this.myScore;\r\n        let opponentScore = this.opponentScore;\r\n        let gameState;\r\n        const rolls = await this.highRoller(state.playerFirstNumber, state.playerSecondNumber);\r\n        const myRoll = rolls.playerSecondRoll;\r\n        const opponentRoll = rolls.playerFirstRoll;\r\n        const totalMyRoll = myRoll[0] + myRoll[1];\r\n        const totalOpponentRoll = opponentRoll[0] + opponentRoll[1];\r\n        if (totalMyRoll > totalOpponentRoll) {\r\n            myScore = this.myScore + 1;\r\n            gameState = GameState.Won;\r\n        }\r\n        else if (totalMyRoll < totalOpponentRoll) {\r\n            opponentScore += 1;\r\n            gameState = GameState.Lost;\r\n        }\r\n        else {\r\n            gameState = GameState.Tie;\r\n        }\r\n        const highRollerState = state;\r\n        const newUIState = {\r\n            myRoll,\r\n            opponentRoll,\r\n            myScore,\r\n            opponentScore,\r\n            gameState,\r\n            highRollerState\r\n        };\r\n        this.updateUIState(newUIState);\r\n        if (state.stage === HighRollerStage.P1_REVEALED_NUM) {\r\n            await this.appInstance.uninstall(this.intermediary);\r\n        }\r\n    }\r\n    onInstall(data) {\r\n        this.updateAppInstance(data.data.appInstance);\r\n        this.goToGame(this.history);\r\n    }\r\n    onUninstall(data) { }\r\n    render() {\r\n        return h(\"slot\", null);\r\n    }\r\n    static get is() { return \"app-provider\"; }\r\n    static get properties() { return {\r\n        \"appFactory\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"app-factory\",\r\n            \"mutable\": true\r\n        },\r\n        \"appInstance\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"app-instance\",\r\n            \"mutable\": true\r\n        },\r\n        \"cfProvider\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"cf-provider\",\r\n            \"mutable\": true\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"gameState\": {\r\n            \"type\": Number,\r\n            \"attr\": \"game-state\"\r\n        },\r\n        \"generateRandomRoll\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"generate-random-roll\"\r\n        },\r\n        \"goToGame\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"go-to-game\"\r\n        },\r\n        \"highRoller\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"high-roller\"\r\n        },\r\n        \"highRollerState\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"high-roller-state\"\r\n        },\r\n        \"history\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"history\"\r\n        },\r\n        \"intermediary\": {\r\n            \"type\": String,\r\n            \"attr\": \"intermediary\"\r\n        },\r\n        \"myRoll\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"my-roll\"\r\n        },\r\n        \"myScore\": {\r\n            \"type\": Number,\r\n            \"attr\": \"my-score\"\r\n        },\r\n        \"nodeProvider\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"node-provider\",\r\n            \"mutable\": true\r\n        },\r\n        \"opponentRoll\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"opponent-roll\"\r\n        },\r\n        \"opponentScore\": {\r\n            \"type\": Number,\r\n            \"attr\": \"opponent-score\"\r\n        },\r\n        \"updateAppFactory\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"update-app-factory\"\r\n        },\r\n        \"updateAppInstance\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"update-app-instance\"\r\n        },\r\n        \"updateCfProvider\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"update-cf-provider\"\r\n        },\r\n        \"updateIntermediary\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"update-intermediary\"\r\n        },\r\n        \"updateUIState\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"update-u-i-state\"\r\n        }\r\n    }; }\r\n}\r\nHighRollerUITunnel.injectProps(AppProvider, [\r\n    \"myRoll\",\r\n    \"myScore\",\r\n    \"opponentRoll\",\r\n    \"opponentScore\",\r\n    \"gameState\",\r\n    \"updateUIState\",\r\n    \"highRollerState\"\r\n]);\r\nCounterfactualTunnel.injectProps(AppProvider, [\"appInstance\", \"intermediary\"]);\r\n"}