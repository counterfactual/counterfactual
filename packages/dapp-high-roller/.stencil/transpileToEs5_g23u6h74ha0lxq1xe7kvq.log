var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
App.loadBundle('/**:bundle-id:**/', ['exports', './chunk-7a957887.js', './chunk-346f9d40.js', './chunk-48936b03.js'], function (exports, __chunk_1, __chunk_2, __chunk_3) {
    var h = window.App.h;
    var HashZero = ethers.constants.HashZero;
    var AppWager = /** @class */ (function () {
        function AppWager() {
            this.el = {};
            this.history = {};
            this.appFactory = {};
            this.betAmount = "0.01";
            this.myName = "";
            this.opponent = { attributes: {} };
            this.intermediary = "";
            this.isError = false;
            this.isWaiting = false;
            this.standalone = false;
            this.updateAppInstance = function () { };
            this.updateOpponent = function () { };
        }
        AppWager.prototype.componentWillLoad = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.myName = this.account.user.username;
                            return [4 /*yield*/, this.matchmake()];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        AppWager.prototype.handlePlay = function (e) {
            return __awaiter(this, void 0, void 0, function () {
                var initialState, currentEthBalance, bet, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            e.preventDefault();
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            initialState = {
                                stage: __chunk_3.HighRollerStage.WAITING_FOR_P1_COMMITMENT,
                                salt: HashZero,
                                commitHash: HashZero,
                                playerFirstNumber: 0,
                                playerSecondNumber: 0,
                                versionNumber: 0
                            };
                            currentEthBalance = ethers.utils.parseEther(this.account.balance);
                            bet = ethers.utils.parseEther(this.betAmount);
                            if (currentEthBalance.lt(bet)) {
                                this.error = "Insufficient funds: You need at least " + this.betAmount + " ETH to play.";
                                return [2 /*return*/];
                            }
                            if (bet.gt(ethers.utils.parseEther("0.01")) ||
                                bet.lt(ethers.utils.parseEther("0"))) {
                                this.error = "Please, place a bet between 0 and 0.01 ETH.";
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, this.appFactory.proposeInstallVirtual({
                                    initialState: initialState,
                                    proposedToIdentifier: this.opponent.attributes.nodeAddress,
                                    responderDeposit: ethers.utils.parseEther(this.betAmount),
                                    initiatorDeposit: ethers.utils.parseEther(this.betAmount),
                                    timeout: 172800,
                                    intermediaries: [this.intermediary]
                                })];
                        case 2:
                            _a.sent();
                            this.isWaiting = true;
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            debugger;
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        AppWager.prototype.matchmake = function () {
            return __awaiter(this, void 0, void 0, function () {
                var result, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.fetchMatchmake()];
                        case 1:
                            result = _a.sent();
                            this.opponent = {
                                attributes: {
                                    username: result.data.attributes.username,
                                    nodeAddress: result.data.attributes.nodeAddress,
                                    ethAddress: result.data.attributes.ethAddress
                                }
                            };
                            this.intermediary = result.data.attributes.intermediary;
                            this.error = null;
                            this.updateOpponent(this.opponent);
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            this.error = error_1;
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        AppWager.prototype.onErrorSet = function () {
            this.isError = !!this.error;
        };
        AppWager.prototype.handleChange = function (e, prop) {
            this[prop] = e.target.value;
        };
        AppWager.prototype.fetchMatchmake = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (this.standalone) {
                        return [2 /*return*/, {
                                data: {
                                    type: "matchmaking",
                                    id: "2b83cb14-c7aa-5208-8da8-369aeb1a3f24",
                                    attributes: {
                                        intermediary: this.account.multisigAddress
                                    },
                                    relationships: {
                                        users: {
                                            data: {
                                                type: "users",
                                                id: this.account.user.id
                                            }
                                        },
                                        matchedUser: {
                                            data: {
                                                type: "matchedUsers",
                                                id: "3d54b508-b355-4323-8738-4cdf7290a2fd"
                                            }
                                        }
                                    }
                                },
                                included: [
                                    {
                                        type: "users",
                                        id: this.account.user.id,
                                        attributes: {
                                            username: this.account.user.username,
                                            ethAddress: this.account.user.ethAddress
                                        }
                                    },
                                    {
                                        type: "matchedUsers",
                                        id: "3d54b508-b355-4323-8738-4cdf7290a2fd",
                                        attributes: {
                                            username: "MyOpponent",
                                            ethAddress: "0x12345"
                                        }
                                    }
                                ]
                            }];
                    }
                    return [2 /*return*/, new Promise(function (resolve) {
                            var onMatchmakeResponse = function (event) {
                                if (!event.data.toString().startsWith("playground:response:matchmake")) {
                                    return;
                                }
                                window.removeEventListener("message", onMatchmakeResponse);
                                var _a = event.data.split("|"), data = _a[1];
                                resolve(JSON.parse(data));
                            };
                            window.addEventListener("message", onMatchmakeResponse);
                            window.parent.postMessage("playground:request:matchmake", "*");
                        })];
                });
            });
        };
        AppWager.prototype.render = function () {
            var _this = this;
            if (this.isWaiting) {
                return (h("app-waiting", { myName: this.myName, betAmount: this.betAmount, opponentName: this.opponent.attributes.username, isProposing: true }));
            }
            return (h("div", { class: "wrapper" }, h("div", { class: "wager" }, h("div", { class: "message" }, h("img", { class: "message__icon", src: "/assets/images/logo.svg", alt: "High Roller" }), h("h1", { class: "message__title" }, "Welcome!"), h("p", { class: "message__body" }, "Ready to play?")), h("form", { class: "form", onSubmit: function (e) { return _this.handlePlay(e); } }, h("label", { htmlFor: "myName" }, "Your Name"), h("input", { class: "form__input", id: "myName", type: "text", placeholder: "Your name", value: this.myName, onInput: function (e) { return _this.handleChange(e, "myName"); }, readOnly: true }), h("label", { htmlFor: "betAmount" }, "Bet Amount ( ETH )"), h("input", { class: "form__input", id: "betAmount", type: "number", placeholder: "0.01", value: this.betAmount, onInput: function (e) { return _this.handleChange(e, "betAmount"); }, min: 0, max: 0.01, step: 0.00000001 }), this.isError ? (h("label", { class: "message__error" }, this.error instanceof Error
                ? this.error.message + ": " + this.error.stack
                : this.error)) : ({}), h("button", { class: "form__button" }, h("div", null, "Play!"))))));
        };
        Object.defineProperty(AppWager, "is", {
            get: function () { return "app-wager"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppWager, "encapsulation", {
            get: function () { return "shadow"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppWager, "properties", {
            get: function () {
                return {
                    "account": {
                        "type": "Any",
                        "attr": "account"
                    },
                    "appFactory": {
                        "type": "Any",
                        "attr": "app-factory"
                    },
                    "betAmount": {
                        "state": true
                    },
                    "el": {
                        "elementRef": true
                    },
                    "error": {
                        "state": true,
                        "watchCallbacks": ["onErrorSet"]
                    },
                    "history": {
                        "type": "Any",
                        "attr": "history"
                    },
                    "intermediary": {
                        "state": true
                    },
                    "isError": {
                        "state": true
                    },
                    "isWaiting": {
                        "state": true
                    },
                    "myName": {
                        "state": true
                    },
                    "opponent": {
                        "state": true
                    },
                    "standalone": {
                        "type": Boolean,
                        "attr": "standalone"
                    },
                    "updateAppInstance": {
                        "type": "Any",
                        "attr": "update-app-instance"
                    },
                    "updateOpponent": {
                        "type": "Any",
                        "attr": "update-opponent"
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppWager, "style", {
            get: function () { return "/**style-placeholder:app-wager:**/"; },
            enumerable: true,
            configurable: true
        });
        return AppWager;
    }());
    __chunk_3.CounterfactualTunnel.injectProps(AppWager, [
        "appFactory",
        "updateAppInstance",
        "account",
        "opponent",
        "standalone"
    ]);
    var AppWaiting = /** @class */ (function () {
        function AppWaiting() {
            this.el = {};
            this.history = {};
            this.myName = "";
            this.betAmount = "";
            this.opponentName = "";
            this.isProposing = false;
            this.seconds = 60;
            this.isCountdownStarted = false;
        }
        AppWaiting.prototype.componentWillLoad = function () {
            this.betAmount = __chunk_1.getProp("betAmount", this);
            this.isProposing = __chunk_1.getProp("isProposing", this);
        };
        AppWaiting.prototype.componentDidLoad = function () {
            this.setupWaiting();
        };
        AppWaiting.prototype.countDown = function () {
            var _this = this;
            if (this.seconds === 1) {
                return;
            }
            setTimeout(function () {
                _this.seconds = _this.seconds - 1;
                _this.countDown();
            }, 1000);
        };
        AppWaiting.prototype.goToGame = function (opponentName, appInstanceId) {
            console.log("GO TO GAME: " + opponentName);
            this.history.push({
                pathname: "/game",
                state: {
                    appInstanceId: appInstanceId,
                    opponentName: opponentName,
                    betAmount: this.betAmount,
                    myName: this.myName,
                    isProposing: this.isProposing
                },
                query: {},
                key: ""
            });
        };
        AppWaiting.prototype.startCountdown = function () {
            if (this.isCountdownStarted) {
                return;
            }
            this.isCountdownStarted = true;
            this.countDown();
        };
        AppWaiting.prototype.setupWaiting = function (cfProvider, appInstance, account, opponent) {
            if (this.isProposing) {
                this.setupWaitingProposing();
            }
            else {
                this.setupWaitingAccepting();
            }
        };
        AppWaiting.prototype.setupWaitingProposing = function () {
            if (this.isCountdownStarted) {
                return;
            }
            this.startCountdown();
        };
        AppWaiting.prototype.setupWaitingAccepting = function () {
            var _this = this;
            this.cfProvider.once("updateState", function () {
                _this.goToGame(_this.opponentName, _this.appInstance.id);
            });
            this.myName = this.account.user.username;
            this.opponentName = this.opponent.attributes.username;
        };
        AppWaiting.prototype.render = function () {
            return (h("div", { class: "wrapper" }, h("div", { class: "waiting" }, h("div", { class: "message" }, h("img", { class: "message__icon", src: "/assets/images/logo.svg", alt: "High Roller" }), h("h1", { class: "message__title" }, "Waiting Room"), h("p", { class: "message__body" }, this.isProposing
                ? "Waiting for another player to join the game in"
                : "Waiting on " + this.opponentName + "'s roll..."), this.isProposing ? h("p", { class: "countdown" }, this.seconds) : {}, h("p", null, "Player: ", this.myName, " ", h("br", null), "Opponent: ", this.opponentName, " ", h("br", null), "Bet Amount: ", this.betAmount, " ETH")))));
        };
        Object.defineProperty(AppWaiting, "is", {
            get: function () { return "app-waiting"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppWaiting, "encapsulation", {
            get: function () { return "shadow"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppWaiting, "properties", {
            get: function () {
                return {
                    "account": {
                        "type": "Any",
                        "attr": "account"
                    },
                    "appInstance": {
                        "type": "Any",
                        "attr": "app-instance"
                    },
                    "betAmount": {
                        "type": String,
                        "attr": "bet-amount",
                        "mutable": true
                    },
                    "cfProvider": {
                        "type": "Any",
                        "attr": "cf-provider"
                    },
                    "el": {
                        "elementRef": true
                    },
                    "history": {
                        "type": "Any",
                        "attr": "history"
                    },
                    "isCountdownStarted": {
                        "state": true
                    },
                    "isProposing": {
                        "type": Boolean,
                        "attr": "is-proposing",
                        "mutable": true
                    },
                    "myName": {
                        "type": String,
                        "attr": "my-name",
                        "mutable": true
                    },
                    "opponent": {
                        "type": "Any",
                        "attr": "opponent"
                    },
                    "opponentName": {
                        "type": String,
                        "attr": "opponent-name",
                        "mutable": true
                    },
                    "seconds": {
                        "state": true
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppWaiting, "style", {
            get: function () { return "/**style-placeholder:app-waiting:**/"; },
            enumerable: true,
            configurable: true
        });
        return AppWaiting;
    }());
    __chunk_3.CounterfactualTunnel.injectProps(AppWaiting, [
        "cfProvider",
        "appInstance",
        "account",
        "opponent"
    ]);
    exports.AppWager = AppWager;
    exports.AppWaiting = AppWaiting;
    Object.defineProperty(exports, '__esModule', { value: true });
});
