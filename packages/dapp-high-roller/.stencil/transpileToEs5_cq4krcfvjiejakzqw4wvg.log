var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
App.loadBundle('/**:bundle-id:**/', ['exports', './chunk-346f9d40.js', './chunk-650041b1.js'], function (exports, __chunk_2, __chunk_5) {
    var h = window.App.h;
    var AppLogo = /** @class */ (function () {
        function AppLogo() {
            this.el = {};
            this.provideRouterHistory = function () { };
            this.history = {};
        }
        AppLogo.prototype.componentWillLoad = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.provideRouterHistory(this.history);
                    window.parent.postMessage("playground:request:appInstance", "*");
                    return [2 /*return*/];
                });
            });
        };
        AppLogo.prototype.render = function () {
            return (h("div", null, h("stencil-route-link", { url: "/wager" }, h("div", { class: "wrapper wrapper--welcome clickable" }, h("h1", { class: "welcome__logo" }, h("img", { src: "/assets/images/logo.svg", alt: "High Roller" }))), h("app-game-coins", null))));
        };
        Object.defineProperty(AppLogo, "is", {
            get: function () { return "app-logo"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppLogo, "encapsulation", {
            get: function () { return "shadow"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppLogo, "properties", {
            get: function () {
                return {
                    "el": {
                        "elementRef": true
                    },
                    "history": {
                        "type": "Any",
                        "attr": "history"
                    },
                    "provideRouterHistory": {
                        "type": "Any",
                        "attr": "provide-router-history"
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppLogo, "style", {
            get: function () { return "/**style-placeholder:app-logo:**/"; },
            enumerable: true,
            configurable: true
        });
        return AppLogo;
    }());
    function getUrl(url, root) {
        if (url.charAt(0) == "/" && root.charAt(root.length - 1) == "/") {
            return root.slice(0, root.length - 1) + url;
        }
        return root + url;
    }
    var RouteLink = /** @class */ (function () {
        function RouteLink() {
            this.unsubscribe = function () { return; };
            this.activeClass = "link-active";
            this.exact = false;
            this.strict = true;
            this.custom = "a";
            this.match = null;
        }
        RouteLink.prototype.componentWillLoad = function () {
            this.computeMatch();
        };
        RouteLink.prototype.computeMatch = function () {
            if (this.location) {
                this.match = __chunk_5.matchPath(this.location.pathname, {
                    path: this.urlMatch || this.url,
                    exact: this.exact,
                    strict: this.strict
                });
            }
        };
        RouteLink.prototype.handleClick = function (e) {
            if (__chunk_5.isModifiedEvent(e) || !this.history || !this.url || !this.root) {
                return;
            }
            e.preventDefault();
            return this.history.push(getUrl(this.url, this.root));
        };
        RouteLink.prototype.render = function () {
            var _a;
            var anchorAttributes = {
                class: (_a = {},
                    _a[this.activeClass] = this.match !== null,
                    _a),
                onClick: this.handleClick.bind(this)
            };
            if (this.anchorClass) {
                anchorAttributes.class[this.anchorClass] = true;
            }
            if (this.custom === "a") {
                anchorAttributes = Object.assign({}, anchorAttributes, { href: this.url, title: this.anchorTitle, role: this.anchorRole, tabindex: this.anchorTabIndex, "aria-haspopup": this.ariaHaspopup, id: this.anchorId, "aria-posinset": this.ariaPosinset, "aria-setsize": this.ariaSetsize, "aria-label": this.ariaLabel });
            }
            return (h(this.custom, Object.assign({}, anchorAttributes), h("slot", null)));
        };
        Object.defineProperty(RouteLink, "is", {
            get: function () { return "stencil-route-link"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouteLink, "properties", {
            get: function () {
                return {
                    "activeClass": {
                        "type": String,
                        "attr": "active-class"
                    },
                    "anchorClass": {
                        "type": String,
                        "attr": "anchor-class"
                    },
                    "anchorId": {
                        "type": String,
                        "attr": "anchor-id"
                    },
                    "anchorRole": {
                        "type": String,
                        "attr": "anchor-role"
                    },
                    "anchorTabIndex": {
                        "type": String,
                        "attr": "anchor-tab-index"
                    },
                    "anchorTitle": {
                        "type": String,
                        "attr": "anchor-title"
                    },
                    "ariaHaspopup": {
                        "type": String,
                        "attr": "aria-haspopup"
                    },
                    "ariaLabel": {
                        "type": String,
                        "attr": "aria-label"
                    },
                    "ariaPosinset": {
                        "type": String,
                        "attr": "aria-posinset"
                    },
                    "ariaSetsize": {
                        "type": Number,
                        "attr": "aria-setsize"
                    },
                    "custom": {
                        "type": String,
                        "attr": "custom"
                    },
                    "el": {
                        "elementRef": true
                    },
                    "exact": {
                        "type": Boolean,
                        "attr": "exact"
                    },
                    "history": {
                        "type": "Any",
                        "attr": "history"
                    },
                    "location": {
                        "type": "Any",
                        "attr": "location",
                        "watchCallbacks": ["computeMatch"]
                    },
                    "match": {
                        "state": true
                    },
                    "root": {
                        "type": String,
                        "attr": "root"
                    },
                    "strict": {
                        "type": Boolean,
                        "attr": "strict"
                    },
                    "url": {
                        "type": String,
                        "attr": "url"
                    },
                    "urlMatch": {
                        "type": String,
                        "attr": "url-match"
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        return RouteLink;
    }());
    __chunk_5.ActiveRouter.injectProps(RouteLink, [
        "history",
        "location",
        "root"
    ]);
    exports.AppLogo = AppLogo;
    exports.StencilRouteLink = RouteLink;
    Object.defineProperty(exports, '__esModule', { value: true });
});
