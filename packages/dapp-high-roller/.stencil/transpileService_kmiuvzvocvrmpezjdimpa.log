{"moduleFile":{"sourceFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/components/app-game/app-game.tsx","localImports":["/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/data/counterfactual","/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/data/game-types","/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/data/high-roller","/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/utils/utils"],"externalImports":["@stencil/core","@stencil/router"],"potentialCmpRefs":[{"tag":"app-game-player"},{"tag":"app-game-status"},{"tag":"app-game-coins"}],"cmpMeta":{"tagNameMeta":"app-game","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/components/app-game/app-game.scss","cmpRelativePath":"app-game.scss","originalComponentPath":"app-game.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"AppGame","tags":[],"documentation":"","type":"typeof AppGame"},"encapsulationMeta":1,"componentClass":"AppGame","membersMeta":{"el":{"memberType":64},"gameStatusLabel":{"memberType":16},"history":{"memberType":1,"attribName":"history","attribType":{"text":"RouterHistory","required":false,"optional":false,"typeReferences":{"RouterHistory":{"referenceLocation":"import","importReferenceLocation":"@stencil/router"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"history","tags":[],"documentation":"","type":"RouterHistory","default":"{} as RouterHistory"}},"betAmount":{"memberType":2,"attribName":"bet-amount","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"betAmount","tags":[],"documentation":"","type":"string","default":"\"0.01 ETH\""}},"isProposing":{"memberType":2,"attribName":"is-proposing","attribType":{"text":"boolean","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":4,"jsdoc":{"name":"isProposing","tags":[],"documentation":"","type":"boolean","default":"false"}},"appInstanceId":{"memberType":2,"attribName":"app-instance-id","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"appInstanceId","tags":[],"documentation":"","type":"string","default":"\"\""}},"cfProvider":{"memberType":1,"attribName":"cf-provider","attribType":{"text":"cf.Provider","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"cfProvider","tags":[],"documentation":"","type":"{ once: (eventName: any, callback: (data: EventData) => void) => void; on: (eventName: any, callback: (data: EventData) => void) => void; callRawNodeMethod: (methodName: MethodName, params: MethodParams) => Promise<MethodResponse>; appInstances: { [appInstanceId: string]: AppInstance; }; nodeProvider: NodeProvider; getOrCreateAppInstance: (id: string, info: AppInstance) => Promise<AppInstance>; }","default":"{} as cf.Provider"}},"appInstance":{"memberType":2,"attribName":"app-instance","attribType":{"text":"AppInstance","required":false,"optional":false,"typeReferences":{"AppInstance":{"referenceLocation":"import","importReferenceLocation":"../../data/mock-app-instance"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"appInstance","tags":[],"documentation":"","type":"AppInstance","default":"{} as AppInstance"}},"account":{"memberType":1,"attribName":"account","attribType":{"text":"any","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":1,"jsdoc":{"name":"account","tags":[],"documentation":"","type":"any","default":"{ user: { username: \"Facundo\" } }"}},"opponent":{"memberType":1,"attribName":"opponent","attribType":{"text":"any","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":1,"jsdoc":{"name":"opponent","tags":[],"documentation":"","type":"any","default":"{ attributes: { username: \"John\" } }"}},"generateRandomRoll":{"memberType":1,"attribName":"generate-random-roll","attribType":{"text":"() => number[]","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"generateRandomRoll","tags":[],"documentation":"","type":"() => number[]","default":"() => []"}},"highRollerState":{"memberType":2,"attribName":"high-roller-state","attribType":{"text":"HighRollerAppState","required":false,"optional":false,"typeReferences":{"HighRollerAppState":{"referenceLocation":"import","importReferenceLocation":"../../data/game-types"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"highRollerState","tags":[],"documentation":"","type":"{ stage: HighRollerStage; salt: string; commitHash: string; playerFirstNumber: number; playerSecondNumber: number; versionNumber: number; }","default":"this\n    .defaultHighRollerState"},"watchCallbacks":["onHighRollerStateChanged"]},"gameState":{"memberType":2,"attribName":"game-state","attribType":{"text":"GameState","required":false,"optional":false,"typeReferences":{"GameState":{"referenceLocation":"import","importReferenceLocation":"../../data/game-types"}}},"reflectToAttrib":false,"propType":8,"jsdoc":{"name":"gameState","tags":[],"documentation":"","type":"GameState.Lost | GameState.Play | GameState.Tie | GameState.Won","default":"GameState.Play"},"watchCallbacks":["onGameStateChanged"]},"myRoll":{"memberType":2,"attribName":"my-roll","attribType":{"text":"number[]","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"myRoll","tags":[],"documentation":"","type":"number[]","default":"[1, 1]"}},"myScore":{"memberType":2,"attribName":"my-score","attribType":{"text":"number","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":8,"jsdoc":{"name":"myScore","tags":[],"documentation":"","type":"number","default":"0"}},"opponentRoll":{"memberType":2,"attribName":"opponent-roll","attribType":{"text":"number[]","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"opponentRoll","tags":[],"documentation":"","type":"number[]","default":"[1, 1]"}},"opponentScore":{"memberType":2,"attribName":"opponent-score","attribType":{"text":"number","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":8,"jsdoc":{"name":"opponentScore","tags":[],"documentation":"","type":"number","default":"0"}},"updateUIState":{"memberType":1,"attribName":"update-u-i-state","attribType":{"text":"(data: HighRollerUIMutableState) => void","required":false,"optional":false,"typeReferences":{"HighRollerUIMutableState":{"referenceLocation":"import","importReferenceLocation":"../../data/types"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"updateUIState","tags":[],"documentation":"","type":"(data: HighRollerUIMutableState) => void","default":"() => {}"}}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/dapp-high-roller/src/components/app-game/app-game.js"},"jsText":"import CounterfactualTunnel from \"../../data/counterfactual\";\r\nimport { GameState, HighRollerActionType, HighRollerStage, PlayerType } from \"../../data/game-types\";\r\nimport HighRollerUITunnel from \"../../data/high-roller\";\r\nimport { computeCommitHash, generateSalt, getProp } from \"../../utils/utils\";\r\nconst { HashZero } = ethers.constants;\r\nconst { bigNumberify } = ethers.utils;\r\nexport class AppGame {\r\n    constructor() {\r\n        this.el = {};\r\n        this.history = {};\r\n        this.betAmount = \"0.01 ETH\";\r\n        this.isProposing = false;\r\n        this.appInstanceId = \"\";\r\n        this.cfProvider = {};\r\n        this.appInstance = {};\r\n        this.account = { user: { username: \"Facundo\" } };\r\n        this.opponent = { attributes: { username: \"John\" } };\r\n        this.generateRandomRoll = () => [];\r\n        this.gameStatusLabel = \"\";\r\n        this.defaultHighRollerState = {\r\n            stage: HighRollerStage.WAITING_FOR_P1_COMMITMENT,\r\n            salt: HashZero,\r\n            commitHash: HashZero,\r\n            playerFirstNumber: 0,\r\n            playerSecondNumber: 0,\r\n            versionNumber: 0\r\n        };\r\n        this.highRollerState = this\r\n            .defaultHighRollerState;\r\n        this.gameState = GameState.Play;\r\n        this.myRoll = [1, 1];\r\n        this.myScore = 0;\r\n        this.opponentRoll = [1, 1];\r\n        this.opponentScore = 0;\r\n        this.updateUIState = () => { };\r\n        this.rollingAnimationInterval = {};\r\n        this.rolling = {\r\n            myRoll: false,\r\n            opponentRoll: false\r\n        };\r\n    }\r\n    async componentWillLoad() {\r\n        this.betAmount = getProp(\"betAmount\", this);\r\n        this.isProposing = getProp(\"isProposing\", this);\r\n        this.appInstanceId = getProp(\"appInstanceId\", this);\r\n    }\r\n    async onHighRollerStateChanged() {\r\n        if (this.highRollerState.stage === HighRollerStage.P2_COMMITTED_TO_NUM &&\r\n            !this.rolling.opponentRoll) {\r\n            await this.beginRolling(\"opponentRoll\");\r\n        }\r\n    }\r\n    async onGameStateChanged() {\r\n        if (this.gameState !== GameState.Play) {\r\n            await this.stopRolling(\"myRoll\");\r\n            await this.stopRolling(\"opponentRoll\");\r\n        }\r\n    }\r\n    async beginRolling(roller) {\r\n        this.rolling[roller] = true;\r\n        this.scheduleRoll(roller);\r\n    }\r\n    scheduleRoll(roller) {\r\n        this.rollingAnimationInterval[roller] = setTimeout(async () => await this.roll(roller), 100 + Math.floor(Math.random() * Math.floor(150)));\r\n    }\r\n    async roll(roller) {\r\n        this[roller] = this.generateRandomRoll();\r\n        if (this.rolling[roller]) {\r\n            this.scheduleRoll(roller);\r\n        }\r\n    }\r\n    async stopRolling(roller) {\r\n        this.rolling[roller] = false;\r\n        clearTimeout(this.rollingAnimationInterval[roller]);\r\n    }\r\n    async handleRoll() {\r\n        if (!this.appInstance.takeAction) {\r\n            this.appInstance = await this.cfProvider.getOrCreateAppInstance(this.appInstanceId, this.appInstance);\r\n            console.log(\"Reset appInstance\", this.appInstance);\r\n        }\r\n        if (this.highRollerState.stage === HighRollerStage.WAITING_FOR_P1_COMMITMENT) {\r\n            await this.beginRolling(\"myRoll\");\r\n            const numberSalt = generateSalt();\r\n            const playerFirstNumber = 1 + Math.floor(Math.random() * Math.floor(1000));\r\n            const hash = computeCommitHash(numberSalt, playerFirstNumber);\r\n            const commitHashAction = {\r\n                actionType: HighRollerActionType.COMMIT_TO_HASH,\r\n                actionHash: hash,\r\n                number: 0\r\n            };\r\n            this.highRollerState = Object.assign({}, (await this.appInstance.takeAction(commitHashAction)), { playerFirstNumber: bigNumberify(playerFirstNumber), salt: numberSalt });\r\n            this.updateUIState({\r\n                highRollerState: this.highRollerState\r\n            });\r\n        }\r\n        else if (this.highRollerState.stage === HighRollerStage.P1_COMMITTED_TO_HASH) {\r\n            await this.beginRolling(\"myRoll\");\r\n            const playerSecondNumber = 1 + Math.floor(Math.random() * Math.floor(1000));\r\n            const commitHashAction = {\r\n                number: playerSecondNumber,\r\n                actionType: HighRollerActionType.COMMIT_TO_NUM,\r\n                actionHash: HashZero\r\n            };\r\n            this.highRollerState = (await this.appInstance.takeAction(commitHashAction));\r\n            this.gameStatusLabel = \"Who will win?\";\r\n        }\r\n    }\r\n    handleRematch() {\r\n        this.gameState = GameState.Play;\r\n        this.highRollerState = this.defaultHighRollerState;\r\n    }\r\n    handleExit() {\r\n        window.location.assign(\"/\");\r\n    }\r\n    render() {\r\n        return [\r\n            h(\"div\", { class: \"wrapper\" },\r\n                h(\"div\", { class: \"game\" },\r\n                    h(\"app-game-player\", { playerName: this.opponent.attributes.username, playerScore: this.opponentScore, playerType: PlayerType.Black, playerRoll: this.opponentRoll }),\r\n                    h(\"app-game-status\", { gameState: this.gameState, isProposing: this.isProposing, betAmount: this.betAmount, highRollerStage: this.highRollerState.stage, label: this.gameStatusLabel }),\r\n                    h(\"app-game-player\", { playerName: \"You\", playerScore: this.myScore, playerType: PlayerType.White, playerRoll: this.myRoll }),\r\n                    this.gameState === GameState.Play ? (h(\"div\", { class: \"actions\" },\r\n                        h(\"button\", { class: \"btn btn--center\", onClick: () => this.handleRoll() }, \"Roll your dice!\"))) : (h(\"div\", { class: \"actions\" },\r\n                        h(\"button\", { class: \"btn btn--exit\", onClick: () => this.handleExit() }, \"Exit\"))))),\r\n            this.gameState === GameState.Won ? h(\"app-game-coins\", null) : undefined\r\n        ];\r\n    }\r\n    static get is() { return \"app-game\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get properties() { return {\r\n        \"account\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"account\"\r\n        },\r\n        \"appInstance\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"app-instance\",\r\n            \"mutable\": true\r\n        },\r\n        \"appInstanceId\": {\r\n            \"type\": String,\r\n            \"attr\": \"app-instance-id\",\r\n            \"mutable\": true\r\n        },\r\n        \"betAmount\": {\r\n            \"type\": String,\r\n            \"attr\": \"bet-amount\",\r\n            \"mutable\": true\r\n        },\r\n        \"cfProvider\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"cf-provider\"\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"gameState\": {\r\n            \"type\": Number,\r\n            \"attr\": \"game-state\",\r\n            \"mutable\": true,\r\n            \"watchCallbacks\": [\"onGameStateChanged\"]\r\n        },\r\n        \"gameStatusLabel\": {\r\n            \"state\": true\r\n        },\r\n        \"generateRandomRoll\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"generate-random-roll\"\r\n        },\r\n        \"highRollerState\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"high-roller-state\",\r\n            \"mutable\": true,\r\n            \"watchCallbacks\": [\"onHighRollerStateChanged\"]\r\n        },\r\n        \"history\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"history\"\r\n        },\r\n        \"isProposing\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"is-proposing\",\r\n            \"mutable\": true\r\n        },\r\n        \"myRoll\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"my-roll\",\r\n            \"mutable\": true\r\n        },\r\n        \"myScore\": {\r\n            \"type\": Number,\r\n            \"attr\": \"my-score\",\r\n            \"mutable\": true\r\n        },\r\n        \"opponent\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"opponent\"\r\n        },\r\n        \"opponentRoll\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"opponent-roll\",\r\n            \"mutable\": true\r\n        },\r\n        \"opponentScore\": {\r\n            \"type\": Number,\r\n            \"attr\": \"opponent-score\",\r\n            \"mutable\": true\r\n        },\r\n        \"updateUIState\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"update-u-i-state\"\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:app-game:**/\"; }\r\n}\r\nCounterfactualTunnel.injectProps(AppGame, [\r\n    \"account\",\r\n    \"opponent\",\r\n    \"cfProvider\",\r\n    \"appInstance\"\r\n]);\r\nHighRollerUITunnel.injectProps(AppGame, [\r\n    \"myRoll\",\r\n    \"myScore\",\r\n    \"opponentRoll\",\r\n    \"opponentScore\",\r\n    \"gameState\",\r\n    \"updateUIState\",\r\n    \"generateRandomRoll\",\r\n    \"highRollerState\"\r\n]);\r\n"}