var __awaiter = this && this.__awaiter || function(t, e, n, i) {
  return new (n || (n = Promise))(function(r, a) {
    function fulfilled(t) {
      try {
        step(i.next(t));
      } catch (t) {
        a(t);
      }
    }
    function rejected(t) {
      try {
        step(i.throw(t));
      } catch (t) {
        a(t);
      }
    }
    function step(t) {
      t.done ? r(t.value) : new n(function(e) {
        e(t.value);
      }).then(fulfilled, rejected);
    }
    step((i = i.apply(t, e || [])).next());
  });
}, __generator = this && this.__generator || function(t, e) {
  var n, i, r, a, o = {
    label: 0,
    sent: function() {
      if (1 & r[0]) throw r[1];
      return r[1];
    },
    trys: [],
    ops: []
  };
  return a = {
    next: verb(0),
    throw: verb(1),
    return: verb(2)
  }, "function" == typeof Symbol && (a[Symbol.iterator] = function() {
    return this;
  }), a;
  function verb(a) {
    return function(s) {
      return function(a) {
        if (n) throw new TypeError("Generator is already executing.");
        for (;o; ) try {
          if (n = 1, i && (r = 2 & a[0] ? i.return : a[0] ? i.throw || ((r = i.return) && r.call(i), 
          0) : i.next) && !(r = r.call(i, a[1])).done) return r;
          switch (i = 0, r && (a = [ 2 & a[0], r.value ]), a[0]) {
           case 0:
           case 1:
            r = a;
            break;

           case 4:
            return o.label++, {
              value: a[1],
              done: !1
            };

           case 5:
            o.label++, i = a[1], a = [ 0 ];
            continue;

           case 7:
            a = o.ops.pop(), o.trys.pop();
            continue;

           default:
            if (!(r = (r = o.trys).length > 0 && r[r.length - 1]) && (6 === a[0] || 2 === a[0])) {
              o = 0;
              continue;
            }
            if (3 === a[0] && (!r || a[1] > r[0] && a[1] < r[3])) {
              o.label = a[1];
              break;
            }
            if (6 === a[0] && o.label < r[1]) {
              o.label = r[1], r = a;
              break;
            }
            if (r && o.label < r[2]) {
              o.label = r[2], o.ops.push(a);
              break;
            }
            r[2] && o.ops.pop(), o.trys.pop();
            continue;
          }
          a = e.call(t, o);
        } catch (t) {
          a = [ 6, t ], i = 0;
        } finally {
          n = r = 0;
        }
        if (5 & a[0]) throw a[1];
        return {
          value: a[0] ? a[1] : void 0,
          done: !0
        };
      }([ a, s ]);
    };
  }
};

App.loadBundle("/**:bundle-id:**/", [ "exports", "./chunk-346f9d40.js", "./chunk-faed910a.js", "./chunk-cc018d56.js" ], function(t, e, n, i) {
  var r = window.App.h, a = "The hub is currently making a deposit in the channel. Currently, this demo does not support asyncronous deposits.", o = /** @class */ function() {
    function AccountExchange() {
      var t = this;
      this.user = {}, this.ethFreeBalanceWei = 0, this.ethMultisigBalance = 0, this.ethWeb3WalletBalance = 0, 
      this.ethPendingDepositTxHash = "", this.ethPendingDepositAmountWei = 0, this.ethPendingWithdrawalTxHash = "", 
      this.ethPendingWithdrawalAmountWei = 0, this.network = "", this.updateAccount = function(t) {}, 
      this.deposit = function() {
        return __awaiter(t, void 0, void 0, function() {
          return __generator(this, function(t) {
            return [ 2 /*return*/ , {} ];
          });
        });
      }, this.withdraw = function() {
        return __awaiter(t, void 0, void 0, function() {
          return __generator(this, function(t) {
            return [ 2 /*return*/ ];
          });
        });
      }, this.getBalances = function() {
        return __awaiter(t, void 0, void 0, function() {
          return __generator(this, function(t) {
            return [ 2 /*return*/ , void 0 ];
          });
        });
      }, this.getEtherscanAddressURL = function() {
        return "";
      }, this.getEtherscanTxURL = function() {
        return "";
      }, this.history = {}, this.depositError = "", this.withdrawalError = "", this.isDepositPending = !1, 
      this.isWithdrawalPending = !1;
    }
    return AccountExchange.prototype.componentDidUpdate = function() {
      this.user && this.user.id || this.history.push("/");
    }, AccountExchange.prototype.removeError = function() {
      this.updateAccount({
        error: null
      });
    }, AccountExchange.prototype.onEthPendingDepositTxHashChanged = function() {
      this.updateDepositPendingState();
    }, AccountExchange.prototype.onEthPendingDepositAmountWeiChanged = function() {
      this.updateDepositPendingState();
    }, AccountExchange.prototype.onEthPendingWithdrawalTxHashChanged = function() {
      this.updateWithdrawalPendingState();
    }, AccountExchange.prototype.onEthPendingWithdrawalAmountWeiChanged = function() {
      this.updateWithdrawalPendingState();
    }, AccountExchange.prototype.updateDepositPendingState = function() {
      this.isDepositPending = Boolean(this.ethPendingDepositTxHash) && Boolean(this.ethPendingDepositAmountWei);
    }, AccountExchange.prototype.updateWithdrawalPendingState = function() {
      this.isWithdrawalPending = Boolean(this.ethPendingWithdrawalTxHash) && Boolean(this.ethPendingWithdrawalAmountWei);
    }, AccountExchange.prototype.onUserAcquired = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(t) {
          switch (t.label) {
           case 0:
            return this.user ? [ 4 /*yield*/ , this.getBalances() ] : [ 3 /*break*/ , 2 ];

           case 1:
            t.sent(), t.label = 2;

           case 2:
            return [ 2 /*return*/ ];
          }
        });
      });
    }, AccountExchange.prototype.onDepositClicked = function(t) {
      return __awaiter(this, void 0, void 0, function() {
        var e;
        return __generator(this, function(n) {
          switch (n.label) {
           case 0:
            return n.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , this.deposit(window.ethers.utils.parseEther(t.target.value).toHexString()) ];

           case 1:
            return n.sent(), [ 3 /*break*/ , 3 ];

           case 2:
            if (!(e = n.sent()).toString().includes("Cannot deposit while another deposit")) throw e;
            return window.alert(a), [ 3 /*break*/ , 3 ];

           case 3:
            return [ 2 /*return*/ ];
          }
        });
      });
    }, AccountExchange.prototype.onWithdrawClicked = function(t) {
      return __awaiter(this, void 0, void 0, function() {
        var e;
        return __generator(this, function(n) {
          switch (n.label) {
           case 0:
            return n.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , this.withdraw(window.ethers.utils.parseEther(t.target.value).toHexString()) ];

           case 1:
            return n.sent(), [ 3 /*break*/ , 3 ];

           case 2:
            if (!(e = n.sent()).toString().includes("Cannot withdraw while another deposit")) throw e;
            return window.alert(a), [ 3 /*break*/ , 3 ];

           case 3:
            return [ 2 /*return*/ ];
          }
        });
      });
    }, AccountExchange.prototype.getMultisigEtherscanLink = function() {
      return this.user.multisigAddress ? r("a", {
        target: "_blank",
        href: this.getEtherscanAddressURL(this.user.multisigAddress)
      }, "View State Channels Wallet on Etherscan") : r("a", {
        target: "_blank",
        href: this.getEtherscanTxURL(this.user.transactionHash)
      }, "View State Channels Wallet Deployment Transaction on Etherscan");
    }, AccountExchange.prototype.getPendingDepositEtherscanLink = function() {
      var t = window.ethers.constants.Zero, e = this.ethPendingDepositAmountWei || t;
      return this.isDepositPending ? r("a", {
        href: this.getEtherscanTxURL(this.ethPendingDepositTxHash),
        target: "_blank"
      }, "ðŸ’° Pending Deposit of", " ", window.ethers.utils.formatEther(e), " ETH") : null;
    }, AccountExchange.prototype.getPendingWithdrawalEtherscanLink = function() {
      var t = window.ethers.constants.Zero, e = this.ethPendingWithdrawalAmountWei || t;
      return this.isWithdrawalPending ? r("a", {
        href: this.getEtherscanTxURL(this.ethPendingWithdrawalTxHash),
        target: "_blank"
      }, "ðŸ’¸ Pending Withdrawal of", " ", window.ethers.utils.formatEther(e), "ETH") : null;
    }, AccountExchange.prototype.render = function() {
      var t = window.ethers.constants.Zero, e = this.ethFreeBalanceWei || t;
      return [ r("layout-header", null), r("div", {
        class: "form-containers"
      }, r("div", {
        class: "form-container"
      }, r("h1", null, "Deposit ETH"), r("account-eth-form", {
        onSubmit: this.onDepositClicked.bind(this),
        button: this.isDepositPending ? "Deposit in progress" : "Deposit",
        disabled: !!this.isDepositPending,
        loading: !!this.isDepositPending,
        provideFaucetLink: !0,
        error: this.depositError,
        available: window.ethers.utils.bigNumberify(this.ethWeb3WalletBalance),
        min: .1,
        max: 1
      })), r("div", {
        class: "form-container"
      }, r("h1", null, "Withdraw ETH"), r("account-eth-form", {
        onSubmit: this.onWithdrawClicked.bind(this),
        button: this.isWithdrawalPending ? "Withdrawal in progress" : "Withdraw",
        disabled: !!this.isWithdrawalPending,
        loading: !!this.isWithdrawalPending,
        error: this.withdrawalError,
        available: window.ethers.utils.bigNumberify(e),
        min: 0,
        max: Number(window.ethers.utils.formatEther(e))
      })), r("div", {
        class: "container"
      }, r("p", null, this.getMultisigEtherscanLink()), r("p", null, this.getPendingDepositEtherscanLink()), r("p", null, this.getPendingWithdrawalEtherscanLink()))) ];
    }, Object.defineProperty(AccountExchange, "is", {
      get: function() {
        return "account-exchange";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(AccountExchange, "encapsulation", {
      get: function() {
        return "shadow";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(AccountExchange, "properties", {
      get: function() {
        return {
          deposit: {
            type: "Any",
            attr: "deposit"
          },
          depositError: {
            state: !0
          },
          el: {
            elementRef: !0
          },
          ethFreeBalanceWei: {
            type: Number,
            attr: "eth-free-balance-wei"
          },
          ethMultisigBalance: {
            type: Number,
            attr: "eth-multisig-balance"
          },
          ethPendingDepositAmountWei: {
            type: Number,
            attr: "eth-pending-deposit-amount-wei",
            watchCallbacks: [ "onEthPendingDepositAmountWeiChanged" ]
          },
          ethPendingDepositTxHash: {
            type: String,
            attr: "eth-pending-deposit-tx-hash",
            watchCallbacks: [ "onEthPendingDepositTxHashChanged" ]
          },
          ethPendingWithdrawalAmountWei: {
            type: Number,
            attr: "eth-pending-withdrawal-amount-wei",
            watchCallbacks: [ "onEthPendingWithdrawalAmountWeiChanged" ]
          },
          ethPendingWithdrawalTxHash: {
            type: String,
            attr: "eth-pending-withdrawal-tx-hash",
            watchCallbacks: [ "onEthPendingWithdrawalTxHashChanged" ]
          },
          ethWeb3WalletBalance: {
            type: Number,
            attr: "eth-web-3-wallet-balance"
          },
          getBalances: {
            type: "Any",
            attr: "get-balances"
          },
          getEtherscanAddressURL: {
            type: "Any",
            attr: "get-etherscan-address-u-r-l"
          },
          getEtherscanTxURL: {
            type: "Any",
            attr: "get-etherscan-tx-u-r-l"
          },
          history: {
            type: "Any",
            attr: "history"
          },
          isDepositPending: {
            state: !0
          },
          isWithdrawalPending: {
            state: !0
          },
          network: {
            type: String,
            attr: "network"
          },
          updateAccount: {
            type: "Any",
            attr: "update-account"
          },
          user: {
            type: "Any",
            attr: "user",
            watchCallbacks: [ "onUserAcquired" ]
          },
          withdraw: {
            type: "Any",
            attr: "withdraw"
          },
          withdrawalError: {
            state: !0
          }
        };
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(AccountExchange, "style", {
      get: function() {
        return "/**style-placeholder:account-exchange:**/";
      },
      enumerable: !0,
      configurable: !0
    }), AccountExchange;
  }();
  n.AccountTunnel.injectProps(o, [ "ethFreeBalanceWei", "ethMultisigBalance", "ethPendingDepositTxHash", "ethPendingDepositAmountWei", "ethPendingWithdrawalTxHash", "ethPendingWithdrawalAmountWei", "updateAccount", "user", "deposit", "withdraw", "getBalances" ]), 
  i.WalletTunnel.injectProps(o, [ "network", "ethWeb3WalletBalance", "getEtherscanAddressURL", "getEtherscanTxURL" ]), 
  t.AccountExchange = o, Object.defineProperty(t, "__esModule", {
    value: !0
  });
});