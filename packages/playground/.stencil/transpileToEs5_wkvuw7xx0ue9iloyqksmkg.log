import * as tslib_1 from "tslib";
import { h } from '../app.core.js';
import './chunk-deed3e85.js';
import { a as AccountTunnel } from './chunk-dfef6d51.js';
import { a as WalletTunnel } from './chunk-a343ce23.js';
var HUB_IS_DEPOSITING_ALERT = "The hub is currently making a deposit in the channel. Currently, this demo does not support asyncronous deposits.";
var AccountExchange = /** @class */ (function () {
    function AccountExchange() {
        var _this = this;
        this.user = {};
        this.ethFreeBalanceWei = 0;
        this.ethMultisigBalance = 0;
        this.ethWeb3WalletBalance = 0;
        this.ethPendingDepositTxHash = "";
        this.ethPendingDepositAmountWei = 0;
        this.ethPendingWithdrawalTxHash = "";
        this.ethPendingWithdrawalAmountWei = 0;
        this.network = "";
        this.updateAccount = function (e) { };
        this.deposit = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, ({})];
        }); }); };
        this.withdraw = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        }); }); };
        this.getBalances = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, undefined];
        }); }); };
        this.getEtherscanAddressURL = function () { return ""; };
        this.getEtherscanTxURL = function () { return ""; };
        this.history = {};
        this.depositError = "";
        this.withdrawalError = "";
        this.isDepositPending = false;
        this.isWithdrawalPending = false;
    }
    AccountExchange.prototype.componentDidUpdate = function () {
        if (!this.user || !this.user.id) {
            this.history.push("/");
            return;
        }
    };
    AccountExchange.prototype.removeError = function () {
        this.updateAccount({
            error: null
        });
    };
    AccountExchange.prototype.onEthPendingDepositTxHashChanged = function () {
        this.updateDepositPendingState();
    };
    AccountExchange.prototype.onEthPendingDepositAmountWeiChanged = function () {
        this.updateDepositPendingState();
    };
    AccountExchange.prototype.onEthPendingWithdrawalTxHashChanged = function () {
        this.updateWithdrawalPendingState();
    };
    AccountExchange.prototype.onEthPendingWithdrawalAmountWeiChanged = function () {
        this.updateWithdrawalPendingState();
    };
    AccountExchange.prototype.updateDepositPendingState = function () {
        this.isDepositPending =
            Boolean(this.ethPendingDepositTxHash) &&
                Boolean(this.ethPendingDepositAmountWei);
    };
    AccountExchange.prototype.updateWithdrawalPendingState = function () {
        this.isWithdrawalPending =
            Boolean(this.ethPendingWithdrawalTxHash) &&
                Boolean(this.ethPendingWithdrawalAmountWei);
    };
    AccountExchange.prototype.onUserAcquired = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.user) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getBalances()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    AccountExchange.prototype.onDepositClicked = function (e) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.deposit(window["ethers"].utils.parseEther(e.target.value).toHexString())];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _a.sent();
                        if (e_1.toString().includes("Cannot deposit while another deposit")) {
                            window.alert(HUB_IS_DEPOSITING_ALERT);
                        }
                        else {
                            throw e_1;
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AccountExchange.prototype.onWithdrawClicked = function (e) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e_2;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.withdraw(window["ethers"].utils.parseEther(e.target.value).toHexString())];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_2 = _a.sent();
                        if (e_2.toString().includes("Cannot withdraw while another deposit")) {
                            window.alert(HUB_IS_DEPOSITING_ALERT);
                        }
                        else {
                            throw e_2;
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AccountExchange.prototype.getMultisigEtherscanLink = function () {
        return this.user.multisigAddress ? (h("a", { target: "_blank", href: this.getEtherscanAddressURL(this.user.multisigAddress) }, "View State Channels Wallet on Etherscan")) : (h("a", { target: "_blank", href: this.getEtherscanTxURL(this.user.transactionHash) }, "View State Channels Wallet Deployment Transaction on Etherscan"));
    };
    AccountExchange.prototype.getPendingDepositEtherscanLink = function () {
        var Zero = window["ethers"].constants.Zero;
        var ethPendingDepositAmountWei = this.ethPendingDepositAmountWei || Zero;
        return this.isDepositPending ? (h("a", { href: this.getEtherscanTxURL(this.ethPendingDepositTxHash), target: "_blank" }, "\uD83D\uDCB0 Pending Deposit of", " ", window["ethers"].utils.formatEther(ethPendingDepositAmountWei), " ETH")) : null;
    };
    AccountExchange.prototype.getPendingWithdrawalEtherscanLink = function () {
        var Zero = window["ethers"].constants.Zero;
        var ethPendingWithdrawalAmountWei = this.ethPendingWithdrawalAmountWei || Zero;
        return this.isWithdrawalPending ? (h("a", { href: this.getEtherscanTxURL(this.ethPendingWithdrawalTxHash), target: "_blank" }, "\uD83D\uDCB8 Pending Withdrawal of", " ", window["ethers"].utils.formatEther(ethPendingWithdrawalAmountWei), "ETH")) : null;
    };
    AccountExchange.prototype.render = function () {
        var Zero = window["ethers"].constants.Zero;
        var ethFreeBalanceWei = this.ethFreeBalanceWei || Zero;
        return [
            h("layout-header", null),
            h("div", { class: "form-containers" }, h("div", { class: "form-container" }, h("h1", null, "Deposit ETH"), h("account-eth-form", { onSubmit: this.onDepositClicked.bind(this), button: this.isDepositPending ? "Deposit in progress" : "Deposit", disabled: this.isDepositPending ? true : false, loading: this.isDepositPending ? true : false, provideFaucetLink: true, error: this.depositError, available: window["ethers"].utils.bigNumberify(this.ethWeb3WalletBalance), min: 0.1, max: 1 })), h("div", { class: "form-container" }, h("h1", null, "Withdraw ETH"), h("account-eth-form", { onSubmit: this.onWithdrawClicked.bind(this), button: this.isWithdrawalPending ? "Withdrawal in progress" : "Withdraw", disabled: this.isWithdrawalPending ? true : false, loading: this.isWithdrawalPending ? true : false, error: this.withdrawalError, available: window["ethers"].utils.bigNumberify(ethFreeBalanceWei), min: 0, max: Number(window["ethers"].utils.formatEther(ethFreeBalanceWei)) })), h("div", { class: "container" }, h("p", null, this.getMultisigEtherscanLink()), h("p", null, this.getPendingDepositEtherscanLink()), h("p", null, this.getPendingWithdrawalEtherscanLink())))
        ];
    };
    Object.defineProperty(AccountExchange, "is", {
        get: function () { return "account-exchange"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccountExchange, "encapsulation", {
        get: function () { return "shadow"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccountExchange, "properties", {
        get: function () {
            return {
                "deposit": {
                    "type": "Any",
                    "attr": "deposit"
                },
                "depositError": {
                    "state": true
                },
                "el": {
                    "elementRef": true
                },
                "ethFreeBalanceWei": {
                    "type": Number,
                    "attr": "eth-free-balance-wei"
                },
                "ethMultisigBalance": {
                    "type": Number,
                    "attr": "eth-multisig-balance"
                },
                "ethPendingDepositAmountWei": {
                    "type": Number,
                    "attr": "eth-pending-deposit-amount-wei",
                    "watchCallbacks": ["onEthPendingDepositAmountWeiChanged"]
                },
                "ethPendingDepositTxHash": {
                    "type": String,
                    "attr": "eth-pending-deposit-tx-hash",
                    "watchCallbacks": ["onEthPendingDepositTxHashChanged"]
                },
                "ethPendingWithdrawalAmountWei": {
                    "type": Number,
                    "attr": "eth-pending-withdrawal-amount-wei",
                    "watchCallbacks": ["onEthPendingWithdrawalAmountWeiChanged"]
                },
                "ethPendingWithdrawalTxHash": {
                    "type": String,
                    "attr": "eth-pending-withdrawal-tx-hash",
                    "watchCallbacks": ["onEthPendingWithdrawalTxHashChanged"]
                },
                "ethWeb3WalletBalance": {
                    "type": Number,
                    "attr": "eth-web-3-wallet-balance"
                },
                "getBalances": {
                    "type": "Any",
                    "attr": "get-balances"
                },
                "getEtherscanAddressURL": {
                    "type": "Any",
                    "attr": "get-etherscan-address-u-r-l"
                },
                "getEtherscanTxURL": {
                    "type": "Any",
                    "attr": "get-etherscan-tx-u-r-l"
                },
                "history": {
                    "type": "Any",
                    "attr": "history"
                },
                "isDepositPending": {
                    "state": true
                },
                "isWithdrawalPending": {
                    "state": true
                },
                "network": {
                    "type": String,
                    "attr": "network"
                },
                "updateAccount": {
                    "type": "Any",
                    "attr": "update-account"
                },
                "user": {
                    "type": "Any",
                    "attr": "user",
                    "watchCallbacks": ["onUserAcquired"]
                },
                "withdraw": {
                    "type": "Any",
                    "attr": "withdraw"
                },
                "withdrawalError": {
                    "state": true
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccountExchange, "style", {
        get: function () { return "/**style-placeholder:account-exchange:**/"; },
        enumerable: true,
        configurable: true
    });
    return AccountExchange;
}());
AccountTunnel.injectProps(AccountExchange, [
    "ethFreeBalanceWei",
    "ethMultisigBalance",
    "ethPendingDepositTxHash",
    "ethPendingDepositAmountWei",
    "ethPendingWithdrawalTxHash",
    "ethPendingWithdrawalAmountWei",
    "updateAccount",
    "user",
    "deposit",
    "withdraw",
    "getBalances"
]);
WalletTunnel.injectProps(AccountExchange, [
    "network",
    "ethWeb3WalletBalance",
    "getEtherscanAddressURL",
    "getEtherscanTxURL"
]);
export { AccountExchange };
