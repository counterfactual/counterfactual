var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
App.loadBundle('/**:bundle-id:**/', ['exports', './chunk-346f9d40.js', './chunk-faed910a.js', './chunk-00addb69.js', './chunk-f52e57f9.js', './chunk-cc018d56.js', './chunk-84817f4c.js'], function (exports, __chunk_1, __chunk_2, __chunk_3, __chunk_4, __chunk_5, __chunk_6) {
    var h = window.App.h;
    var DialogInsufficientFunds = /** @class */ (function () {
        function DialogInsufficientFunds() {
            this.onDeposit = function () { };
            this.onReject = function () { };
        }
        DialogInsufficientFunds.prototype.render = function () {
            var _this = this;
            return (h("widget-dialog", { visible: true, dialogTitle: "Insufficient funds", content: h("label", null, "You need at least", " ", window["ethers"].utils.formatEther(this.message.minimumEthBalance), " ", "ETH to ETH in your Playground account to install this game."), primaryButtonText: "Deposit", onPrimaryButtonClicked: function () { return _this.onDeposit(); }, secondaryButtonText: "Reject", onSecondaryButtonClicked: function () { return _this.onReject(); } }));
        };
        Object.defineProperty(DialogInsufficientFunds, "is", {
            get: function () { return "dialog-insufficient-funds"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DialogInsufficientFunds, "encapsulation", {
            get: function () { return "shadow"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DialogInsufficientFunds, "properties", {
            get: function () {
                return {
                    "message": {
                        "type": "Any",
                        "attr": "message"
                    },
                    "onDeposit": {
                        "type": "Any",
                        "attr": "on-deposit"
                    },
                    "onReject": {
                        "type": "Any",
                        "attr": "on-reject"
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        return DialogInsufficientFunds;
    }());
    var KOVAN_NETWORK_ID = "42";
    var DialogProposeInstall = /** @class */ (function () {
        function DialogProposeInstall() {
            this.el = {};
            this.onAccept = function () { };
            this.onReject = function () { };
            this.apps = [];
            this.user = {};
        }
        DialogProposeInstall.prototype.componentWillLoad = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!this.message.data) return [3 /*break*/, 2];
                            _a = this;
                            return [4 /*yield*/, __chunk_6.PlaygroundAPIClient.getUserByNodeAddress(this.message.data.proposedByIdentifier)];
                        case 1:
                            _a.user = _b.sent();
                            _b.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        DialogProposeInstall.prototype.render = function () {
            var _this = this;
            var app = this.apps.find(function (app) {
                return (app.id[KOVAN_NETWORK_ID] === _this.message.data.params.appDefinition);
            });
            if (!app) {
                throw Error("You've received an installation proposal from a different Ethereum network");
            }
            return (h("widget-dialog", { visible: true, dialogTitle: "You've been invited to play!", content: h("label", null, "You'll need to deposit", h("br", null), h("strong", null, window["ethers"].utils.formatEther(this.message.data.params.initiatorDeposit), " ", "ETH"), " ", "to play ", h("strong", null, app.name), " with", " ", h("strong", null, this.user.username), "."), primaryButtonText: "Accept", onPrimaryButtonClicked: function () { return _this.onAccept(_this.message); }, secondaryButtonText: "Reject", onSecondaryButtonClicked: function () { return _this.onReject(); } }));
        };
        Object.defineProperty(DialogProposeInstall, "is", {
            get: function () { return "dialog-propose-install"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DialogProposeInstall, "encapsulation", {
            get: function () { return "shadow"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DialogProposeInstall, "properties", {
            get: function () {
                return {
                    "apps": {
                        "type": "Any",
                        "attr": "apps"
                    },
                    "el": {
                        "elementRef": true
                    },
                    "message": {
                        "type": "Any",
                        "attr": "message"
                    },
                    "onAccept": {
                        "type": "Any",
                        "attr": "on-accept"
                    },
                    "onReject": {
                        "type": "Any",
                        "attr": "on-reject"
                    },
                    "user": {
                        "state": true
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        return DialogProposeInstall;
    }());
    __chunk_3.AppRegistryTunnel.injectProps(DialogProposeInstall, ["apps"]);
    var DialogRejectInstall = /** @class */ (function () {
        function DialogRejectInstall() {
            this.onOKClicked = function () { };
            this.onReject = function () { };
            this.username = "";
        }
        DialogRejectInstall.prototype.componentWillLoad = function () {
            var lastMatchmake = JSON.parse(window.localStorage.getItem("playground:lastMatchmake") ||
                '{"attributes":{"username":"Your opponent"}}');
            this.username = lastMatchmake.data.attributes.username;
        };
        DialogRejectInstall.prototype.render = function () {
            var _this = this;
            return (h("widget-dialog", { visible: true, dialogTitle: "Sorry :(", content: h("label", null, h("strong", null, this.username), " has declined your invitation to play."), primaryButtonText: "OK", onPrimaryButtonClicked: function () { return _this.onOKClicked(); } }));
        };
        Object.defineProperty(DialogRejectInstall, "is", {
            get: function () { return "dialog-reject-install"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DialogRejectInstall, "encapsulation", {
            get: function () { return "shadow"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DialogRejectInstall, "properties", {
            get: function () {
                return {
                    "message": {
                        "type": "Any",
                        "attr": "message"
                    },
                    "onOKClicked": {
                        "type": "Any",
                        "attr": "on-o-k-clicked"
                    },
                    "onReject": {
                        "type": "Any",
                        "attr": "on-reject"
                    },
                    "username": {
                        "state": true
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        return DialogRejectInstall;
    }());
    var HeaderDrawer = /** @class */ (function () {
        function HeaderDrawer() {
            this.closeDrawer = {};
            this.opened = false;
        }
        HeaderDrawer.prototype.menuClicked = function (event) {
            event.preventDefault();
            this.closeDrawer.emit();
        };
        HeaderDrawer.prototype.render = function () {
            var _this = this;
            return (h("div", { class: this.opened ? "drawer-container opened" : "drawer-container" }, h("a", { onClick: function (e) { return _this.menuClicked(e); }, class: "drawer-screen" }), h("menu", { class: "drawer" }, h("header-content", null))));
        };
        Object.defineProperty(HeaderDrawer, "is", {
            get: function () { return "header-drawer"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeaderDrawer, "encapsulation", {
            get: function () { return "shadow"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeaderDrawer, "properties", {
            get: function () {
                return {
                    "opened": {
                        "type": Boolean,
                        "attr": "opened"
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeaderDrawer, "events", {
            get: function () {
                return [{
                        "name": "closeDrawer",
                        "method": "closeDrawer",
                        "bubbles": true,
                        "cancelable": true,
                        "composed": true
                    }];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeaderDrawer, "style", {
            get: function () { return "/**style-placeholder:header-drawer:**/"; },
            enumerable: true,
            configurable: true
        });
        return HeaderDrawer;
    }());
    var LayoutHeader = /** @class */ (function () {
        function LayoutHeader() {
            this.drawerOpened = false;
        }
        LayoutHeader.prototype.closeDrawerHandler = function (e) {
            this.drawerOpened = false;
        };
        LayoutHeader.prototype.openDrawerHandler = function (e) {
            this.drawerOpened = true;
        };
        LayoutHeader.prototype.render = function () {
            var _this = this;
            return [
                h("header-drawer", { opened: this.drawerOpened, onCloseDrawer: function (e) { return _this.closeDrawerHandler(e); } }),
                h("header", { class: "header" }, h("div", { class: "hide-on-desktop" }, h("div", { class: "mobile-content" }, h("a", { class: "drawer-toggle", onClick: function (e) { return _this.openDrawerHandler(e); } }, h("img", { src: "/assets/icon/menu-btn.svg", alt: "Menu" })), h("div", { class: "logo-container" }, h("stencil-route-link", { url: "/" }, h("img", { src: "/assets/icon/logo.svg", alt: "Counterfactual", class: "logo" }))), h("div", { class: "account-container" }, h("header-balance", null)))), h("div", { class: "hide-on-mobile desktop-wrapper" }, h("header-content", null)))
            ];
        };
        Object.defineProperty(LayoutHeader, "is", {
            get: function () { return "layout-header"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutHeader, "encapsulation", {
            get: function () { return "shadow"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutHeader, "properties", {
            get: function () {
                return {
                    "drawerOpened": {
                        "state": true
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutHeader, "style", {
            get: function () { return "/**style-placeholder:layout-header:**/"; },
            enumerable: true,
            configurable: true
        });
        return LayoutHeader;
    }());
    var KOVAN_NETWORK_ID$1 = "42";
    var NodeListener = /** @class */ (function () {
        function NodeListener() {
            this.el = {};
            this.apps = [];
            this.web3Detected = false;
            this.history = {};
            this.provider = {};
            this.ethMultisigBalance = window["ethers"].constants.Zero;
            this.nodeMessageResolver = {
                proposeInstallVirtualEvent: this.onProposeInstallVirtual.bind(this),
                rejectInstallEvent: this.onRejectInstall.bind(this),
                rejectInstallVirtualEvent: this.onRejectInstall.bind(this)
            };
        }
        Object.defineProperty(NodeListener.prototype, "cfProvider", {
            get: function () {
                return __chunk_4.CounterfactualNode.getCfProvider();
            },
            enumerable: true,
            configurable: true
        });
        NodeListener.prototype.componentWillLoad = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (this.web3Detected) {
                        this.bindNodeEvents();
                    }
                    return [2 /*return*/];
                });
            });
        };
        NodeListener.prototype.bindNodeEvents = function () {
            var _this = this;
            Object.keys(this.nodeMessageResolver).forEach(function (eventName) {
                _this.cfProvider.off(eventName);
                _this.cfProvider.on(eventName, _this.nodeMessageResolver[eventName].bind(_this));
            });
        };
        NodeListener.prototype.onProposeInstallVirtual = function (data) {
            this.currentMessage = data;
            this.showModal();
        };
        NodeListener.prototype.onRejectInstall = function (data) {
            this.currentMessage = data;
            this.showModal();
        };
        NodeListener.prototype.acceptProposeInstall = function (message) {
            return __awaiter(this, void 0, void 0, function () {
                var proposeInstallParams, currentEthBalance, minimumEthBalance, _a, appInstanceId, intermediaries, intermediaryIdentifier, installedApp_1, app, error_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 2, , 3]);
                            proposeInstallParams = message.data
                                .params;
                            currentEthBalance = this.ethMultisigBalance;
                            minimumEthBalance = window["ethers"].utils.bigNumberify(proposeInstallParams.initiatorDeposit);
                            if (currentEthBalance.lt(minimumEthBalance)) {
                                this.currentModalType = "error";
                                this.currentErrorType = "INSUFFICIENT_FUNDS";
                                this.currentMessage = { minimumEthBalance: minimumEthBalance };
                                return [2 /*return*/];
                            }
                            _a = this.currentMessage.data, appInstanceId = _a.appInstanceId, intermediaries = _a.intermediaries;
                            intermediaryIdentifier = intermediaries[0];
                            return [4 /*yield*/, this.cfProvider.installVirtual(appInstanceId, intermediaryIdentifier)];
                        case 1:
                            installedApp_1 = _b.sent();
                            app = this.apps.find(function (app) {
                                return (app.id[KOVAN_NETWORK_ID$1] === installedApp_1.appInstance.appDefinition);
                            });
                            if (!app) {
                                throw Error("You've received an installation proposal from a different Ethereum network");
                            }
                            window.localStorage.setItem("playground:installingDapp", JSON.stringify({
                                installedApp: installedApp_1,
                                name: app.name,
                                dappContainerUrl: "/dapp/" + app.slug,
                                dappUrl: app.url
                            }));
                            this.history.push("/dapp/" + app.slug);
                            this.hideModal();
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _b.sent();
                            this.currentModalType = "error";
                            this.currentErrorType = error_1.message;
                            console.error(error_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        NodeListener.prototype.rejectProposeInstall = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.cfProvider.rejectInstall(this.currentMessage.data.appInstanceId)];
                        case 1:
                            _a.sent();
                            this.hideModal();
                            return [2 /*return*/];
                    }
                });
            });
        };
        NodeListener.prototype.showModal = function () {
            this.currentModalType = this.currentMessage.type;
        };
        NodeListener.prototype.hideModal = function () {
            this.currentModalType = "none";
        };
        NodeListener.prototype.render = function () {
            var _this = this;
            var modal = {};
            if (this.currentModalType === "proposeInstallVirtualEvent") {
                modal = (h("dialog-propose-install", { message: this.currentMessage, onAccept: this.acceptProposeInstall.bind(this), onReject: this.rejectProposeInstall.bind(this) }));
            }
            if (this.currentModalType === "rejectInstallVirtualEvent" ||
                this.currentModalType === "rejectInstallEvent") {
                modal = (h("dialog-reject-install", { message: this.currentMessage, onOKClicked: this.hideModal.bind(this) }));
            }
            if (this.currentModalType === "error") {
                if (this.currentErrorType === "INSUFFICIENT_FUNDS") {
                    modal = (h("dialog-insufficient-funds", { message: this.currentMessage, onDeposit: this.hideModal.bind(this), onReject: this.rejectProposeInstall.bind(this) }));
                }
                else {
                    modal = (h("widget-dialog", { dialogTitle: "Something went wrong", content: this.currentErrorType + ". See the console for more info.", primaryButtonText: "OK", onPrimaryButtonClicked: function () { return _this.hideModal(); } }));
                }
            }
            return [h("slot", null), modal];
        };
        Object.defineProperty(NodeListener, "is", {
            get: function () { return "node-listener"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeListener, "encapsulation", {
            get: function () { return "shadow"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeListener, "properties", {
            get: function () {
                return {
                    "apps": {
                        "type": "Any",
                        "attr": "apps"
                    },
                    "currentErrorType": {
                        "state": true
                    },
                    "currentMessage": {
                        "state": true
                    },
                    "currentModalType": {
                        "state": true
                    },
                    "el": {
                        "elementRef": true
                    },
                    "ethMultisigBalance": {
                        "type": "Any",
                        "attr": "eth-multisig-balance"
                    },
                    "history": {
                        "type": "Any",
                        "attr": "history"
                    },
                    "provider": {
                        "type": "Any",
                        "attr": "provider"
                    },
                    "web3Detected": {
                        "type": Boolean,
                        "attr": "web-3-detected"
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        return NodeListener;
    }());
    __chunk_3.AppRegistryTunnel.injectProps(NodeListener, ["apps"]);
    __chunk_2.AccountTunnel.injectProps(NodeListener, ["ethMultisigBalance"]);
    __chunk_5.WalletTunnel.injectProps(NodeListener, ["web3Detected", "provider"]);
    exports.DialogInsufficientFunds = DialogInsufficientFunds;
    exports.DialogProposeInstall = DialogProposeInstall;
    exports.DialogRejectInstall = DialogRejectInstall;
    exports.HeaderDrawer = HeaderDrawer;
    exports.LayoutHeader = LayoutHeader;
    exports.NodeListener = NodeListener;
    Object.defineProperty(exports, '__esModule', { value: true });
});
