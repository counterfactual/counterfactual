import { h } from '../app.core.js';
var FormButton = /** @class */ (function () {
    function FormButton() {
        this.el = {};
        this.buttonPressed = {};
        this.disabled = false;
        this.spinner = false;
    }
    FormButton.prototype.handleClick = function (e) {
        e.preventDefault();
        this.buttonPressed.emit(e);
    };
    FormButton.prototype.render = function () {
        return (h("button", { disabled: this.disabled, onClick: this.handleClick.bind(this), class: this.el.className || "button" }, this.spinner ? (h("widget-spinner", { visible: true, type: "circle", color: "white" })) : ({}), h("slot", null)));
    };
    Object.defineProperty(FormButton, "is", {
        get: function () { return "form-button"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormButton, "encapsulation", {
        get: function () { return "shadow"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormButton, "properties", {
        get: function () {
            return {
                "disabled": {
                    "type": Boolean,
                    "attr": "disabled"
                },
                "el": {
                    "elementRef": true
                },
                "spinner": {
                    "type": Boolean,
                    "attr": "spinner"
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormButton, "events", {
        get: function () {
            return [{
                    "name": "buttonPressed",
                    "method": "buttonPressed",
                    "bubbles": true,
                    "cancelable": true,
                    "composed": true
                }];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormButton, "style", {
        get: function () { return "/**style-placeholder:form-button:**/"; },
        enumerable: true,
        configurable: true
    });
    return FormButton;
}());
var FormContainer = /** @class */ (function () {
    function FormContainer() {
        this.formSubmitted = {};
    }
    FormContainer.prototype.handleSubmit = function (e) {
        e.preventDefault();
        this.formSubmitted.emit(e);
    };
    FormContainer.prototype.render = function () {
        var _this = this;
        return (h("form", { onSubmit: function (e) { return _this.handleSubmit(e); } }, h("slot", null)));
    };
    Object.defineProperty(FormContainer, "is", {
        get: function () { return "form-container"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormContainer, "encapsulation", {
        get: function () { return "shadow"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormContainer, "events", {
        get: function () {
            return [{
                    "name": "formSubmitted",
                    "method": "formSubmitted",
                    "bubbles": true,
                    "cancelable": true,
                    "composed": true
                }];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormContainer, "style", {
        get: function () { return "/**style-placeholder:form-container:**/"; },
        enumerable: true,
        configurable: true
    });
    return FormContainer;
}());
var FormInput = /** @class */ (function () {
    function FormInput() {
        this.change = {};
        this.disabled = false;
        this.label = "";
        this.unit = "";
        this.type = "text";
        this.min = -Infinity;
        this.max = Infinity;
        this.step = 1;
        this.autofocus = false;
        this.error = "";
        this.value = "";
    }
    FormInput.prototype.handleChange = function (event) {
        this.value = event.target.value;
        this.error = "";
        this.change.emit(event);
    };
    FormInput.prototype.render = function () {
        var _this = this;
        return (h("label", null, h("div", { class: "label" }, this.label ? this.label : h("slot", { name: "label" })), h("div", { class: this.disabled ? "input-container disabled" : "input-container" }, h("input", { class: "input", autoFocus: this.autofocus, disabled: this.disabled, type: this.type, value: this.value, max: this.max, min: this.min, step: this.step, onInput: function (event) { return _this.handleChange(event); } }), this.unit ? h("div", { class: "unit" }, this.unit) : null), this.error ? h("div", { class: "error" }, this.error) : null));
    };
    Object.defineProperty(FormInput, "is", {
        get: function () { return "form-input"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormInput, "encapsulation", {
        get: function () { return "shadow"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormInput, "properties", {
        get: function () {
            return {
                "autofocus": {
                    "type": Boolean,
                    "attr": "autofocus"
                },
                "disabled": {
                    "type": Boolean,
                    "attr": "disabled"
                },
                "error": {
                    "type": String,
                    "attr": "error",
                    "mutable": true
                },
                "label": {
                    "type": String,
                    "attr": "label"
                },
                "max": {
                    "type": Number,
                    "attr": "max"
                },
                "min": {
                    "type": Number,
                    "attr": "min"
                },
                "step": {
                    "type": Number,
                    "attr": "step"
                },
                "type": {
                    "type": String,
                    "attr": "type"
                },
                "unit": {
                    "type": String,
                    "attr": "unit"
                },
                "value": {
                    "type": "Any",
                    "attr": "value",
                    "mutable": true
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormInput, "events", {
        get: function () {
            return [{
                    "name": "change",
                    "method": "change",
                    "bubbles": true,
                    "cancelable": true,
                    "composed": true
                }];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormInput, "style", {
        get: function () { return "/**style-placeholder:form-input:**/"; },
        enumerable: true,
        configurable: true
    });
    return FormInput;
}());
export { FormButton, FormContainer, FormInput };
