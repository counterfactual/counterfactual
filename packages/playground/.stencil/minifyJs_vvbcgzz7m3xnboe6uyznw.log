const t = window.App.h;

class e {
  constructor() {
    this.closeDrawer = {}, this.opened = !1, this.connected = !1;
  }
  menuClicked(t) {
    t.preventDefault(), this.closeDrawer.emit();
  }
  updateConnectionWidget(t) {
    this.connected = t.detail.authenticated;
  }
  render() {
    return t("nav", {
      class: "header-content"
    }, t("div", {
      class: "left"
    }, t("div", {
      class: "top-line"
    }, t("widget-logo", null), t("a", {
      class: "hide-on-desktop",
      onClick: t => this.menuClicked(t)
    }, t("img", {
      src: "/assets/icon/menu-btn.svg",
      alt: "Menu"
    }))), t("div", {
      class: "connection"
    }, t("widget-connection", null)), t("widget-dev-flags", null)), t("header-account", {
      onAuthenticationChanged: t => this.updateConnectionWidget(t)
    }));
  }
  static get is() {
    return "header-content";
  }
  static get encapsulation() {
    return "shadow";
  }
  static get properties() {
    return {
      connected: {
        state: !0
      },
      opened: {
        type: Boolean,
        attr: "opened"
      }
    };
  }
  static get events() {
    return [ {
      name: "closeDrawer",
      method: "closeDrawer",
      bubbles: !0,
      cancelable: !0,
      composed: !0
    } ];
  }
  static get style() {
    return "/**style-placeholder:header-content:**/";
  }
}

class n {
  constructor() {
    this.showingModal = !1;
  }
  get matchmakeWith() {
    return localStorage.getItem("playground:matchmakeWith");
  }
  get hasAnyFlags() {
    return this.matchmakeWith;
  }
  showModal() {
    this.showingModal = !0;
  }
  hideModal() {
    this.showingModal = !1;
  }
  unset(t, e) {
    e.preventDefault(), localStorage.removeItem(t), e.target.outerHTML = "Cleared!";
  }
  buildFlagRow(e, n) {
    return t("tr", null, t("td", null, e), t("td", null, this[n]), t("td", null, t("a", {
      href: "#",
      onClick: t => this.unset(e, t)
    }, "Unset")));
  }
  get dialog() {
    const e = [];
    this.matchmakeWith && e.push(this.buildFlagRow("playground:matchmakeWith", "matchmakeWith"));
    const n = t("table", {
      cellSpacing: 0,
      cellPadding: 0
    }, t("tr", null, t("th", null, "Flag"), t("th", null, "Value"), t("th", null)), e);
    return t("widget-dialog", {
      dialogTitle: "Using dev flags",
      content: n,
      dialogClass: "dialog--dev-flags",
      contentClass: "dialog-content--dev-flags",
      visible: this.showingModal,
      primaryButtonText: "Close",
      onPrimaryButtonClicked: this.hideModal.bind(this)
    });
  }
  render() {
    return this.hasAnyFlags ? [ t("widget-tooltip", {
      onClick: this.showModal.bind(this),
      message: "Click here for full details"
    }, "⚠️ Using dev flags"), this.dialog ] : t("div", null);
  }
  static get is() {
    return "widget-dev-flags";
  }
  static get encapsulation() {
    return "shadow";
  }
  static get properties() {
    return {
      showingModal: {
        state: !0
      }
    };
  }
  static get style() {
    return "/**style-placeholder:widget-dev-flags:**/";
  }
}

export { e as HeaderContent, n as WidgetDevFlags };