App.loadBundle("/**:bundle-id:**/", [ "exports" ], function(e) {
  /*!
     * StencilStateTunnel: Core, es5
     * Built with http://stenciljs.com
     */
  function u(e, r) {
    for (var o, i, u = null, a = !1, c = !1, s = arguments.length; s-- > 2; ) t.push(arguments[s]);
    for (;t.length > 0; ) {
      var f = t.pop();
      if (f && void 0 !== f.pop) for (s = f.length; s--; ) t.push(f[s]); else "boolean" == typeof f && (f = null), 
      (c = "function" != typeof e) && (null == f ? f = "" : "number" == typeof f ? f = String(f) : "string" != typeof f && (c = !1)), 
      c && a ? u[u.length - 1].vtext += f : null === u ? u = [ c ? {
        vtext: f
      } : f ] : u.push(c ? {
        vtext: f
      } : f), a = c;
    }
    if (null != r) {
      if (r.className && (r.class = r.className), "object" == typeof r.class) {
        for (s in r.class) r.class[s] && t.push(s);
        r.class = t.join(" "), t.length = 0;
      }
      null != r.key && (o = r.key), null != r.name && (i = r.name);
    }
    return "function" == typeof e ? e(r, u || [], n) : {
      vtag: e,
      vchildren: u,
      vtext: void 0,
      vattrs: r,
      vkey: o,
      vname: i,
      w: void 0,
      g: !1
    };
  }
  function f(e) {
    return {
      vtag: e.vtag,
      vchildren: e.vchildren,
      vtext: e.vtext,
      vattrs: e.vattrs,
      vkey: e.vkey,
      vname: e.vname
    };
  }
  window, Object.setPrototypeOf || Array;
  var t = [], n = {
    forEach: function(e, t) {
      e.forEach(function(e, n, r) {
        return t(f(e), n, r);
      });
    },
    map: function(e, t) {
      return e.map(function(e, n, r) {
        return function(e) {
          return {
            vtag: e.vtag,
            vchildren: e.vchildren,
            vtext: e.vtext,
            vattrs: e.vattrs,
            vkey: e.vkey,
            vname: e.vname
          };
        }(t(f(e), n, r));
      });
    }
  };
  /*! Built with http://stenciljs.com */  function defaultConsumerRender(e, t) {
    return u("context-consumer", {
      subscribe: e,
      renderer: t
    });
  }
  // StencilStateTunnel: ES Module
  e.createProviderConsumer = function(e, t) {
    void 0 === t && (t = defaultConsumerRender);
    var n = new Map(), r = e;
    function updateListener(e, t) {
      Array.isArray(e) ? e.slice().forEach(function(e) {
        t[e] = r[e];
      }) : t[e] = Object.assign({}, r), t.forceUpdate();
    }
    function attachListener(e) {
      return function(t) {
        n.has(t) || (n.set(t, e), updateListener(e, t));
      };
    }
    function subscribe(e, t) {
      return attachListener(t)(e), function() {
        n.delete(e);
      };
    }
    return {
      Provider: function(e, t) {
        return r = e.state, n.forEach(updateListener), t;
      },
      Consumer: function(e, n) {
        return t(subscribe, n[0]);
      },
      wrapConsumer: function(e, t) {
        var n = e.is;
        return function(e) {
          var r = e.children, o = function(e, t) {
            var n = {};
            for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && t.indexOf(r) < 0 && (n[r] = e[r]);
            if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
              var o = 0;
              for (r = Object.getOwnPropertySymbols(e); o < r.length; o++) t.indexOf(r[o]) < 0 && (n[r[o]] = e[r[o]]);
            }
            return n;
          }(e, [ "children" ]);
          return u(n, Object.assign({
            ref: attachListener(t)
          }, o), r);
        };
      },
      injectProps: function(e, t) {
        var n = null, r = Object.keys(e.properties).find(function(t) {
          return 1 == e.properties[t].elementRef;
        });
        if (null == r) throw new Error("Please ensure that your Component " + e.is + ' has an attribute with an "@Element" decorator. This is required to be able to inject properties.');
        var o = e.prototype.componentWillLoad;
        e.prototype.componentWillLoad = function() {
          if (n = subscribe(this[r], t), o) return o.bind(this)();
        };
        var i = e.prototype.componentDidUnload;
        e.prototype.componentDidUnload = function() {
          if (n(), i) return i.bind(this)();
        };
      }
    };
  };
});