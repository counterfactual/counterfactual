App.loadBundle("/**:bundle-id:**/", [ "exports" ], function(e) {
  var t = window.App.h, n = /** @class */ function() {
    function FormButton() {
      this.el = {}, this.buttonPressed = {}, this.disabled = !1, this.spinner = !1;
    }
    return FormButton.prototype.handleClick = function(e) {
      e.preventDefault(), this.buttonPressed.emit(e);
    }, FormButton.prototype.render = function() {
      return t("button", {
        disabled: this.disabled,
        onClick: this.handleClick.bind(this),
        class: this.el.className || "button"
      }, this.spinner ? t("widget-spinner", {
        visible: !0,
        type: "circle",
        color: "white"
      }) : {}, t("slot", null));
    }, Object.defineProperty(FormButton, "is", {
      get: function() {
        return "form-button";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(FormButton, "encapsulation", {
      get: function() {
        return "shadow";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(FormButton, "properties", {
      get: function() {
        return {
          disabled: {
            type: Boolean,
            attr: "disabled"
          },
          el: {
            elementRef: !0
          },
          spinner: {
            type: Boolean,
            attr: "spinner"
          }
        };
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(FormButton, "events", {
      get: function() {
        return [ {
          name: "buttonPressed",
          method: "buttonPressed",
          bubbles: !0,
          cancelable: !0,
          composed: !0
        } ];
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(FormButton, "style", {
      get: function() {
        return "/**style-placeholder:form-button:**/";
      },
      enumerable: !0,
      configurable: !0
    }), FormButton;
  }(), r = /** @class */ function() {
    function FormContainer() {
      this.formSubmitted = {};
    }
    return FormContainer.prototype.handleSubmit = function(e) {
      e.preventDefault(), this.formSubmitted.emit(e);
    }, FormContainer.prototype.render = function() {
      var e = this;
      return t("form", {
        onSubmit: function(t) {
          return e.handleSubmit(t);
        }
      }, t("slot", null));
    }, Object.defineProperty(FormContainer, "is", {
      get: function() {
        return "form-container";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(FormContainer, "encapsulation", {
      get: function() {
        return "shadow";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(FormContainer, "events", {
      get: function() {
        return [ {
          name: "formSubmitted",
          method: "formSubmitted",
          bubbles: !0,
          cancelable: !0,
          composed: !0
        } ];
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(FormContainer, "style", {
      get: function() {
        return "/**style-placeholder:form-container:**/";
      },
      enumerable: !0,
      configurable: !0
    }), FormContainer;
  }(), o = /** @class */ function() {
    function FormInput() {
      this.change = {}, this.disabled = !1, this.label = "", this.unit = "", this.type = "text", 
      this.min = -1 / 0, this.max = 1 / 0, this.step = 1, this.autofocus = !1, this.error = "", 
      this.value = "";
    }
    return FormInput.prototype.handleChange = function(e) {
      this.value = e.target.value, this.error = "", this.change.emit(e);
    }, FormInput.prototype.render = function() {
      var e = this;
      return t("label", null, t("div", {
        class: "label"
      }, this.label ? this.label : t("slot", {
        name: "label"
      })), t("div", {
        class: this.disabled ? "input-container disabled" : "input-container"
      }, t("input", {
        class: "input",
        autoFocus: this.autofocus,
        disabled: this.disabled,
        type: this.type,
        value: this.value,
        max: this.max,
        min: this.min,
        step: this.step,
        onInput: function(t) {
          return e.handleChange(t);
        }
      }), this.unit ? t("div", {
        class: "unit"
      }, this.unit) : null), this.error ? t("div", {
        class: "error"
      }, this.error) : null);
    }, Object.defineProperty(FormInput, "is", {
      get: function() {
        return "form-input";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(FormInput, "encapsulation", {
      get: function() {
        return "shadow";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(FormInput, "properties", {
      get: function() {
        return {
          autofocus: {
            type: Boolean,
            attr: "autofocus"
          },
          disabled: {
            type: Boolean,
            attr: "disabled"
          },
          error: {
            type: String,
            attr: "error",
            mutable: !0
          },
          label: {
            type: String,
            attr: "label"
          },
          max: {
            type: Number,
            attr: "max"
          },
          min: {
            type: Number,
            attr: "min"
          },
          step: {
            type: Number,
            attr: "step"
          },
          type: {
            type: String,
            attr: "type"
          },
          unit: {
            type: String,
            attr: "unit"
          },
          value: {
            type: "Any",
            attr: "value",
            mutable: !0
          }
        };
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(FormInput, "events", {
      get: function() {
        return [ {
          name: "change",
          method: "change",
          bubbles: !0,
          cancelable: !0,
          composed: !0
        } ];
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(FormInput, "style", {
      get: function() {
        return "/**style-placeholder:form-input:**/";
      },
      enumerable: !0,
      configurable: !0
    }), FormInput;
  }();
  e.FormButton = n, e.FormContainer = r, e.FormInput = o, Object.defineProperty(e, "__esModule", {
    value: !0
  });
});