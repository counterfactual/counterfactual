import * as tslib_1 from "../polyfills/tslib.js";

import { h } from "../app.core.js";

import "./chunk-deed3e85.js";

import { a as AccountTunnel } from "./chunk-dfef6d51.js";

import { a as AppRegistryTunnel } from "./chunk-868ccbc3.js";

import { a as CounterfactualNode } from "./chunk-515d15f9.js";

import { a as WalletTunnel } from "./chunk-a343ce23.js";

var AccountDeposit = /** @class */ function() {
  function AccountDeposit() {
    this.ethWeb3WalletBalance = 0, this.user = {}, this.updateAccount = function(t) {}, 
    this.history = {}, this.signer = {}, this.deposit = function() {}, this.canUseApps = !1, 
    this.error = "", this.stage = "ready";
  }
  return AccountDeposit.prototype.componentDidUpdate = function() {
    this.user && this.user.id || this.history.push("/");
  }, AccountDeposit.prototype.onDepositFinished = function() {
    this.stage = "finished";
  }, Object.defineProperty(AccountDeposit.prototype, "node", {
    get: function() {
      return CounterfactualNode.getInstance();
    },
    enumerable: !0,
    configurable: !0
  }), AccountDeposit.prototype.formSubmitionHandler = function(t) {
    return tslib_1.__awaiter(this, void 0, void 0, function() {
      var e;
      return tslib_1.__generator(this, function(n) {
        switch (n.label) {
         case 0:
          this.amountDeposited = window.ethers.utils.parseEther(t.target.value), n.label = 1;

         case 1:
          return n.trys.push([ 1, 3, , 4 ]), this.stage = "depositing", [ 4 /*yield*/ , this.deposit(this.amountDeposited) ];

         case 2:
          return n.sent(), [ 3 /*break*/ , 4 ];

         case 3:
          return e = n.sent(), this.error = e.message, this.stage = "ready", [ 3 /*break*/ , 4 ];

         case 4:
          return [ 2 /*return*/ ];
        }
      });
    });
  }, AccountDeposit.prototype.render = function() {
    if ("finished" === this.stage) return h("stencil-router-redirect", {
      url: "/"
    });
    if (!this.ethWeb3WalletBalance) return h("widget-spinner", {
      type: "dots"
    });
    var t = "depositing" === this.stage;
    return h("widget-screen", {
      exitable: !1
    }, h("div", {
      slot: "header"
    }, "Fund your account"), h("p", {
      class: "details"
    }, "In order to use the Playground Dapps, you need to deposit funds into your account. Please enter how much ETH you want to deposit:"), h("account-eth-form", {
      onSubmit: this.formSubmitionHandler.bind(this),
      autofocus: !0,
      provideFaucetLink: !0,
      button: {
        ready: "Deposit",
        depositing: "Making deposit..."
      }[this.stage],
      available: window.ethers.utils.bigNumberify(this.ethWeb3WalletBalance),
      min: .1,
      max: 1,
      error: this.error,
      loading: t,
      disabled: t
    }));
  }, Object.defineProperty(AccountDeposit, "is", {
    get: function() {
      return "account-deposit";
    },
    enumerable: !0,
    configurable: !0
  }), Object.defineProperty(AccountDeposit, "encapsulation", {
    get: function() {
      return "shadow";
    },
    enumerable: !0,
    configurable: !0
  }), Object.defineProperty(AccountDeposit, "properties", {
    get: function() {
      return {
        amountDeposited: {
          state: !0
        },
        canUseApps: {
          type: "Any",
          attr: "can-use-apps",
          watchCallbacks: [ "onDepositFinished" ]
        },
        deposit: {
          type: "Any",
          attr: "deposit"
        },
        el: {
          elementRef: !0
        },
        error: {
          state: !0
        },
        ethWeb3WalletBalance: {
          type: Number,
          attr: "eth-web-3-wallet-balance"
        },
        history: {
          type: "Any",
          attr: "history"
        },
        signer: {
          type: "Any",
          attr: "signer"
        },
        stage: {
          state: !0
        },
        updateAccount: {
          type: "Any",
          attr: "update-account"
        },
        user: {
          type: "Any",
          attr: "user"
        }
      };
    },
    enumerable: !0,
    configurable: !0
  }), Object.defineProperty(AccountDeposit, "style", {
    get: function() {
      return "/**style-placeholder:account-deposit:**/";
    },
    enumerable: !0,
    configurable: !0
  }), AccountDeposit;
}();

AccountTunnel.injectProps(AccountDeposit, [ "updateAccount", "user", "deposit" ]), 
AppRegistryTunnel.injectProps(AccountDeposit, [ "canUseApps" ]), WalletTunnel.injectProps(AccountDeposit, [ "signer", "ethWeb3WalletBalance" ]);

export { AccountDeposit };