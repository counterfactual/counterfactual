const t = window.App.h;

import "./chunk-deed3e85.js";

import { a as e } from "./chunk-dfef6d51.js";

import { a as i } from "./chunk-a343ce23.js";

const n = "The hub is currently making a deposit in the channel. Currently, this demo does not support asyncronous deposits.";

class a {
  constructor() {
    this.user = {}, this.ethFreeBalanceWei = 0, this.ethMultisigBalance = 0, this.ethWeb3WalletBalance = 0, 
    this.ethPendingDepositTxHash = "", this.ethPendingDepositAmountWei = 0, this.ethPendingWithdrawalTxHash = "", 
    this.ethPendingWithdrawalAmountWei = 0, this.network = "", this.updateAccount = (t => {}), 
    this.deposit = (async () => ({})), this.withdraw = (async () => {}), this.getBalances = (async () => void 0), 
    this.getEtherscanAddressURL = (() => ""), this.getEtherscanTxURL = (() => ""), this.history = {}, 
    this.depositError = "", this.withdrawalError = "", this.isDepositPending = !1, this.isWithdrawalPending = !1;
  }
  componentDidUpdate() {
    this.user && this.user.id || this.history.push("/");
  }
  removeError() {
    this.updateAccount({
      error: null
    });
  }
  onEthPendingDepositTxHashChanged() {
    this.updateDepositPendingState();
  }
  onEthPendingDepositAmountWeiChanged() {
    this.updateDepositPendingState();
  }
  onEthPendingWithdrawalTxHashChanged() {
    this.updateWithdrawalPendingState();
  }
  onEthPendingWithdrawalAmountWeiChanged() {
    this.updateWithdrawalPendingState();
  }
  updateDepositPendingState() {
    this.isDepositPending = Boolean(this.ethPendingDepositTxHash) && Boolean(this.ethPendingDepositAmountWei);
  }
  updateWithdrawalPendingState() {
    this.isWithdrawalPending = Boolean(this.ethPendingWithdrawalTxHash) && Boolean(this.ethPendingWithdrawalAmountWei);
  }
  async onUserAcquired() {
    this.user && await this.getBalances();
  }
  async onDepositClicked(t) {
    try {
      await this.deposit(window.ethers.utils.parseEther(t.target.value).toHexString());
    } catch (t) {
      if (!t.toString().includes("Cannot deposit while another deposit")) throw t;
      window.alert(n);
    }
  }
  async onWithdrawClicked(t) {
    try {
      await this.withdraw(window.ethers.utils.parseEther(t.target.value).toHexString());
    } catch (t) {
      if (!t.toString().includes("Cannot withdraw while another deposit")) throw t;
      window.alert(n);
    }
  }
  getMultisigEtherscanLink() {
    return this.user.multisigAddress ? t("a", {
      target: "_blank",
      href: this.getEtherscanAddressURL(this.user.multisigAddress)
    }, "View State Channels Wallet on Etherscan") : t("a", {
      target: "_blank",
      href: this.getEtherscanTxURL(this.user.transactionHash)
    }, "View State Channels Wallet Deployment Transaction on Etherscan");
  }
  getPendingDepositEtherscanLink() {
    const e = window.ethers.constants.Zero, i = this.ethPendingDepositAmountWei || e;
    return this.isDepositPending ? t("a", {
      href: this.getEtherscanTxURL(this.ethPendingDepositTxHash),
      target: "_blank"
    }, "ðŸ’° Pending Deposit of", " ", window.ethers.utils.formatEther(i), " ETH") : null;
  }
  getPendingWithdrawalEtherscanLink() {
    const e = window.ethers.constants.Zero, i = this.ethPendingWithdrawalAmountWei || e;
    return this.isWithdrawalPending ? t("a", {
      href: this.getEtherscanTxURL(this.ethPendingWithdrawalTxHash),
      target: "_blank"
    }, "ðŸ’¸ Pending Withdrawal of", " ", window.ethers.utils.formatEther(i), "ETH") : null;
  }
  render() {
    const e = window.ethers.constants.Zero, i = this.ethFreeBalanceWei || e;
    return [ t("layout-header", null), t("div", {
      class: "form-containers"
    }, t("div", {
      class: "form-container"
    }, t("h1", null, "Deposit ETH"), t("account-eth-form", {
      onSubmit: this.onDepositClicked.bind(this),
      button: this.isDepositPending ? "Deposit in progress" : "Deposit",
      disabled: !!this.isDepositPending,
      loading: !!this.isDepositPending,
      provideFaucetLink: !0,
      error: this.depositError,
      available: window.ethers.utils.bigNumberify(this.ethWeb3WalletBalance),
      min: .1,
      max: 1
    })), t("div", {
      class: "form-container"
    }, t("h1", null, "Withdraw ETH"), t("account-eth-form", {
      onSubmit: this.onWithdrawClicked.bind(this),
      button: this.isWithdrawalPending ? "Withdrawal in progress" : "Withdraw",
      disabled: !!this.isWithdrawalPending,
      loading: !!this.isWithdrawalPending,
      error: this.withdrawalError,
      available: window.ethers.utils.bigNumberify(i),
      min: 0,
      max: Number(window.ethers.utils.formatEther(i))
    })), t("div", {
      class: "container"
    }, t("p", null, this.getMultisigEtherscanLink()), t("p", null, this.getPendingDepositEtherscanLink()), t("p", null, this.getPendingWithdrawalEtherscanLink()))) ];
  }
  static get is() {
    return "account-exchange";
  }
  static get encapsulation() {
    return "shadow";
  }
  static get properties() {
    return {
      deposit: {
        type: "Any",
        attr: "deposit"
      },
      depositError: {
        state: !0
      },
      el: {
        elementRef: !0
      },
      ethFreeBalanceWei: {
        type: Number,
        attr: "eth-free-balance-wei"
      },
      ethMultisigBalance: {
        type: Number,
        attr: "eth-multisig-balance"
      },
      ethPendingDepositAmountWei: {
        type: Number,
        attr: "eth-pending-deposit-amount-wei",
        watchCallbacks: [ "onEthPendingDepositAmountWeiChanged" ]
      },
      ethPendingDepositTxHash: {
        type: String,
        attr: "eth-pending-deposit-tx-hash",
        watchCallbacks: [ "onEthPendingDepositTxHashChanged" ]
      },
      ethPendingWithdrawalAmountWei: {
        type: Number,
        attr: "eth-pending-withdrawal-amount-wei",
        watchCallbacks: [ "onEthPendingWithdrawalAmountWeiChanged" ]
      },
      ethPendingWithdrawalTxHash: {
        type: String,
        attr: "eth-pending-withdrawal-tx-hash",
        watchCallbacks: [ "onEthPendingWithdrawalTxHashChanged" ]
      },
      ethWeb3WalletBalance: {
        type: Number,
        attr: "eth-web-3-wallet-balance"
      },
      getBalances: {
        type: "Any",
        attr: "get-balances"
      },
      getEtherscanAddressURL: {
        type: "Any",
        attr: "get-etherscan-address-u-r-l"
      },
      getEtherscanTxURL: {
        type: "Any",
        attr: "get-etherscan-tx-u-r-l"
      },
      history: {
        type: "Any",
        attr: "history"
      },
      isDepositPending: {
        state: !0
      },
      isWithdrawalPending: {
        state: !0
      },
      network: {
        type: String,
        attr: "network"
      },
      updateAccount: {
        type: "Any",
        attr: "update-account"
      },
      user: {
        type: "Any",
        attr: "user",
        watchCallbacks: [ "onUserAcquired" ]
      },
      withdraw: {
        type: "Any",
        attr: "withdraw"
      },
      withdrawalError: {
        state: !0
      }
    };
  }
  static get style() {
    return "/**style-placeholder:account-exchange:**/";
  }
}

e.injectProps(a, [ "ethFreeBalanceWei", "ethMultisigBalance", "ethPendingDepositTxHash", "ethPendingDepositAmountWei", "ethPendingWithdrawalTxHash", "ethPendingWithdrawalAmountWei", "updateAccount", "user", "deposit", "withdraw", "getBalances" ]), 
i.injectProps(a, [ "network", "ethWeb3WalletBalance", "getEtherscanAddressURL", "getEtherscanTxURL" ]);

export { a as AccountExchange };