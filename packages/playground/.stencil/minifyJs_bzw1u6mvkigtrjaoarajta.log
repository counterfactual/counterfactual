const e = window.App.h;

import "./chunk-deed3e85.js";

import { a as s } from "./chunk-dfef6d51.js";

import { a as t } from "./chunk-515d15f9.js";

import { a as r } from "./chunk-a343ce23.js";

import { a } from "./chunk-adf5a5b1.js";

class i {
  constructor() {
    this.connected = !1, this.user = {}, this.updateAccount = (e => {}), this.signer = {}, 
    this.history = {}, this.metamaskUnlocked = !1, this.waitForMultisig = (async () => {}), 
    this.changeset = {
      username: "",
      email: "",
      ethAddress: this.user.ethAddress,
      nodeAddress: t.getInstance().publicIdentifier
    }, this.errors = {
      username: "",
      email: "",
      ethAddress: "",
      nodeAddress: ""
    }, this.stage = "ready";
  }
  componentDidUpdate() {
    this.metamaskUnlocked || this.history.push("/");
  }
  async login(e) {
    e.preventDefault();
    const s = await this.signer.signMessage((t = this.user.ethAddress, [ "PLAYGROUND ACCOUNT LOGIN", `Ethereum address: ${t}` ].join("\n")));
    var t;
    const r = await a.login({
      ethAddress: this.user.ethAddress
    }, s);
    window.localStorage.setItem("playground:user:token", r.token), this.updateAccount({
      user: r
    }), this.history.push("/");
  }
  change(e, s) {
    this.changeset[e] = s.target.value;
  }
  async formSubmissionHandler() {
    this.clearErrorMessage();
    const e = function(e) {
      return [ "PLAYGROUND ACCOUNT REGISTRATION", `Username: ${e.username}`, `E-mail: ${e.email}`, `Ethereum address: ${e.ethAddress}`, `Node address: ${e.nodeAddress}` ].join("\n");
    }(this.changeset);
    this.stage = "awaitingForWallet";
    try {
      const s = await this.signer.signMessage(e);
      await this.register(s);
    } catch (e) {
      this.handleMetamaskErrors(e), this.stage = "ready";
    }
  }
  handleMetamaskErrors(e) {
    e.message.match(/User denied message signature/) && this.setErrorMessage("user_denied_signature");
  }
  onUserUpdated() {
    this.user.multisigAddress && "deployingMultisig" === this.stage && (this.stage = "finished");
  }
  async register(e) {
    try {
      this.stage = "creatingAccount";
      const s = await a.createAccount(this.changeset, e);
      this.updateAccount({
        user: s
      }), window.localStorage.setItem("playground:user:token", s.token), ga("set", "userId", s.id), 
      this.stage = "deployingMultisig", this.waitForMultisig();
    } catch (e) {
      this.setErrorMessage(e.code), this.stage = "ready";
    }
  }
  clearErrorMessage() {
    this.errors = {
      username: "",
      email: "",
      ethAddress: "",
      nodeAddress: ""
    };
  }
  setErrorMessage(e) {
    let s = {};
    switch (this.clearErrorMessage(), e) {
     case "username_required":
      s = {
        username: "This field is required"
      };
      break;

     case "username_already_exists":
      s = {
        username: "This username is not available, try another one."
      };
      break;

     case "email_required":
      s = {
        email: "This field is required"
      };
      break;

     case "signature_required":
      s = {
        ethAddress: "You must sign the operation with Metamask in order to continue"
      };
      break;

     case "invalid_signature":
      s = {
        ethAddress: "Something went wrong with your signature. Please try again."
      };
      break;

     case "address_already_registered":
      s = {
        ethAddress: "Cannot use same ethereum address twice."
      };
      break;

     case "user_save_failed":
      s = {
        ethAddress: "Something went wrong while saving your data. Please try again later."
      };
      break;

     case "user_denied_signature":
      s = {
        ethAddress: "You must approve the message signature at Metamask in order to proceed."
      };
    }
    this.errors = Object.assign({}, this.errors, s);
  }
  render() {
    if ("finished" === this.stage) return e("stencil-router-redirect", {
      url: "/deposit"
    });
    this.user.ethAddress && (this.changeset.ethAddress = this.user.ethAddress);
    const s = "ready" !== this.stage;
    let t = e("div", {
      slot: "post"
    }, "Already have an account?", " ", e("a", {
      href: "#",
      onClick: async e => await this.login(e)
    }, "Login here"));
    return "deployingMultisig" === this.stage && (t = e("div", {
      slot: "post"
    }, e("b", null, "This can take around 15-90 seconds."), e("br", null), "Please be patient! :)")), 
    e("widget-screen", {
      exitable: !s
    }, e("div", {
      slot: "header"
    }, "Create a Playground Account"), e("form-container", {
      onFormSubmitted: async e => await this.formSubmissionHandler()
    }, e("form-input", {
      disabled: s,
      label: "Username",
      value: this.changeset.username,
      error: this.errors.username,
      autofocus: !0,
      onChange: e => this.change("username", e)
    }), e("form-input", {
      disabled: s,
      label: "Email (optional)",
      value: this.changeset.email,
      error: this.errors.email,
      onChange: e => this.change("email", e)
    }), e("div", {
      class: "smallprint"
    }, e("b", null, "Account will be linked to your Ethereum address: "), this.changeset.ethAddress), e("div", {
      class: "error"
    }, this.errors.ethAddress), e("form-button", {
      class: "button",
      disabled: s,
      spinner: s,
      onButtonPressed: async e => await this.formSubmissionHandler()
    }, {
      ready: "Register",
      awaitingForWallet: "Check Wallet...",
      creatingAccount: "Creating your account...",
      deployingMultisig: "Deploying contract..."
    }[this.stage])), t);
  }
  static get is() {
    return "account-register";
  }
  static get encapsulation() {
    return "shadow";
  }
  static get properties() {
    return {
      connected: {
        type: Boolean,
        attr: "connected"
      },
      el: {
        elementRef: !0
      },
      errors: {
        state: !0
      },
      history: {
        type: "Any",
        attr: "history"
      },
      metamaskUnlocked: {
        type: Boolean,
        attr: "metamask-unlocked"
      },
      signer: {
        type: "Any",
        attr: "signer"
      },
      stage: {
        state: !0
      },
      updateAccount: {
        type: "Any",
        attr: "update-account"
      },
      user: {
        type: "Any",
        attr: "user",
        watchCallbacks: [ "onUserUpdated" ]
      },
      waitForMultisig: {
        type: "Any",
        attr: "wait-for-multisig"
      }
    };
  }
  static get style() {
    return "/**style-placeholder:account-register:**/";
  }
}

s.injectProps(i, [ "updateAccount", "user", "waitForMultisig" ]), r.injectProps(i, [ "connected", "signer", "metamaskUnlocked" ]);

export { i as AccountRegister };