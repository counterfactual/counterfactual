import * as tslib_1 from "../polyfills/tslib.js";

import { h } from "../app.core.js";

import "./chunk-deed3e85.js";

import { a as AccountTunnel } from "./chunk-dfef6d51.js";

import { a as WalletTunnel } from "./chunk-a343ce23.js";

var HUB_IS_DEPOSITING_ALERT = "The hub is currently making a deposit in the channel. Currently, this demo does not support asyncronous deposits.", AccountExchange = /** @class */ function() {
  function AccountExchange() {
    var t = this;
    this.user = {}, this.ethFreeBalanceWei = 0, this.ethMultisigBalance = 0, this.ethWeb3WalletBalance = 0, 
    this.ethPendingDepositTxHash = "", this.ethPendingDepositAmountWei = 0, this.ethPendingWithdrawalTxHash = "", 
    this.ethPendingWithdrawalAmountWei = 0, this.network = "", this.updateAccount = function(t) {}, 
    this.deposit = function() {
      return tslib_1.__awaiter(t, void 0, void 0, function() {
        return tslib_1.__generator(this, function(t) {
          return [ 2 /*return*/ , {} ];
        });
      });
    }, this.withdraw = function() {
      return tslib_1.__awaiter(t, void 0, void 0, function() {
        return tslib_1.__generator(this, function(t) {
          return [ 2 /*return*/ ];
        });
      });
    }, this.getBalances = function() {
      return tslib_1.__awaiter(t, void 0, void 0, function() {
        return tslib_1.__generator(this, function(t) {
          return [ 2 /*return*/ , void 0 ];
        });
      });
    }, this.getEtherscanAddressURL = function() {
      return "";
    }, this.getEtherscanTxURL = function() {
      return "";
    }, this.history = {}, this.depositError = "", this.withdrawalError = "", this.isDepositPending = !1, 
    this.isWithdrawalPending = !1;
  }
  return AccountExchange.prototype.componentDidUpdate = function() {
    this.user && this.user.id || this.history.push("/");
  }, AccountExchange.prototype.removeError = function() {
    this.updateAccount({
      error: null
    });
  }, AccountExchange.prototype.onEthPendingDepositTxHashChanged = function() {
    this.updateDepositPendingState();
  }, AccountExchange.prototype.onEthPendingDepositAmountWeiChanged = function() {
    this.updateDepositPendingState();
  }, AccountExchange.prototype.onEthPendingWithdrawalTxHashChanged = function() {
    this.updateWithdrawalPendingState();
  }, AccountExchange.prototype.onEthPendingWithdrawalAmountWeiChanged = function() {
    this.updateWithdrawalPendingState();
  }, AccountExchange.prototype.updateDepositPendingState = function() {
    this.isDepositPending = Boolean(this.ethPendingDepositTxHash) && Boolean(this.ethPendingDepositAmountWei);
  }, AccountExchange.prototype.updateWithdrawalPendingState = function() {
    this.isWithdrawalPending = Boolean(this.ethPendingWithdrawalTxHash) && Boolean(this.ethPendingWithdrawalAmountWei);
  }, AccountExchange.prototype.onUserAcquired = function() {
    return tslib_1.__awaiter(this, void 0, void 0, function() {
      return tslib_1.__generator(this, function(t) {
        switch (t.label) {
         case 0:
          return this.user ? [ 4 /*yield*/ , this.getBalances() ] : [ 3 /*break*/ , 2 ];

         case 1:
          t.sent(), t.label = 2;

         case 2:
          return [ 2 /*return*/ ];
        }
      });
    });
  }, AccountExchange.prototype.onDepositClicked = function(t) {
    return tslib_1.__awaiter(this, void 0, void 0, function() {
      var e;
      return tslib_1.__generator(this, function(n) {
        switch (n.label) {
         case 0:
          return n.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , this.deposit(window.ethers.utils.parseEther(t.target.value).toHexString()) ];

         case 1:
          return n.sent(), [ 3 /*break*/ , 3 ];

         case 2:
          if (!(e = n.sent()).toString().includes("Cannot deposit while another deposit")) throw e;
          return window.alert(HUB_IS_DEPOSITING_ALERT), [ 3 /*break*/ , 3 ];

         case 3:
          return [ 2 /*return*/ ];
        }
      });
    });
  }, AccountExchange.prototype.onWithdrawClicked = function(t) {
    return tslib_1.__awaiter(this, void 0, void 0, function() {
      var e;
      return tslib_1.__generator(this, function(n) {
        switch (n.label) {
         case 0:
          return n.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , this.withdraw(window.ethers.utils.parseEther(t.target.value).toHexString()) ];

         case 1:
          return n.sent(), [ 3 /*break*/ , 3 ];

         case 2:
          if (!(e = n.sent()).toString().includes("Cannot withdraw while another deposit")) throw e;
          return window.alert(HUB_IS_DEPOSITING_ALERT), [ 3 /*break*/ , 3 ];

         case 3:
          return [ 2 /*return*/ ];
        }
      });
    });
  }, AccountExchange.prototype.getMultisigEtherscanLink = function() {
    return this.user.multisigAddress ? h("a", {
      target: "_blank",
      href: this.getEtherscanAddressURL(this.user.multisigAddress)
    }, "View State Channels Wallet on Etherscan") : h("a", {
      target: "_blank",
      href: this.getEtherscanTxURL(this.user.transactionHash)
    }, "View State Channels Wallet Deployment Transaction on Etherscan");
  }, AccountExchange.prototype.getPendingDepositEtherscanLink = function() {
    var t = window.ethers.constants.Zero, e = this.ethPendingDepositAmountWei || t;
    return this.isDepositPending ? h("a", {
      href: this.getEtherscanTxURL(this.ethPendingDepositTxHash),
      target: "_blank"
    }, "ðŸ’° Pending Deposit of", " ", window.ethers.utils.formatEther(e), " ETH") : null;
  }, AccountExchange.prototype.getPendingWithdrawalEtherscanLink = function() {
    var t = window.ethers.constants.Zero, e = this.ethPendingWithdrawalAmountWei || t;
    return this.isWithdrawalPending ? h("a", {
      href: this.getEtherscanTxURL(this.ethPendingWithdrawalTxHash),
      target: "_blank"
    }, "ðŸ’¸ Pending Withdrawal of", " ", window.ethers.utils.formatEther(e), "ETH") : null;
  }, AccountExchange.prototype.render = function() {
    var t = window.ethers.constants.Zero, e = this.ethFreeBalanceWei || t;
    return [ h("layout-header", null), h("div", {
      class: "form-containers"
    }, h("div", {
      class: "form-container"
    }, h("h1", null, "Deposit ETH"), h("account-eth-form", {
      onSubmit: this.onDepositClicked.bind(this),
      button: this.isDepositPending ? "Deposit in progress" : "Deposit",
      disabled: !!this.isDepositPending,
      loading: !!this.isDepositPending,
      provideFaucetLink: !0,
      error: this.depositError,
      available: window.ethers.utils.bigNumberify(this.ethWeb3WalletBalance),
      min: .1,
      max: 1
    })), h("div", {
      class: "form-container"
    }, h("h1", null, "Withdraw ETH"), h("account-eth-form", {
      onSubmit: this.onWithdrawClicked.bind(this),
      button: this.isWithdrawalPending ? "Withdrawal in progress" : "Withdraw",
      disabled: !!this.isWithdrawalPending,
      loading: !!this.isWithdrawalPending,
      error: this.withdrawalError,
      available: window.ethers.utils.bigNumberify(e),
      min: 0,
      max: Number(window.ethers.utils.formatEther(e))
    })), h("div", {
      class: "container"
    }, h("p", null, this.getMultisigEtherscanLink()), h("p", null, this.getPendingDepositEtherscanLink()), h("p", null, this.getPendingWithdrawalEtherscanLink()))) ];
  }, Object.defineProperty(AccountExchange, "is", {
    get: function() {
      return "account-exchange";
    },
    enumerable: !0,
    configurable: !0
  }), Object.defineProperty(AccountExchange, "encapsulation", {
    get: function() {
      return "shadow";
    },
    enumerable: !0,
    configurable: !0
  }), Object.defineProperty(AccountExchange, "properties", {
    get: function() {
      return {
        deposit: {
          type: "Any",
          attr: "deposit"
        },
        depositError: {
          state: !0
        },
        el: {
          elementRef: !0
        },
        ethFreeBalanceWei: {
          type: Number,
          attr: "eth-free-balance-wei"
        },
        ethMultisigBalance: {
          type: Number,
          attr: "eth-multisig-balance"
        },
        ethPendingDepositAmountWei: {
          type: Number,
          attr: "eth-pending-deposit-amount-wei",
          watchCallbacks: [ "onEthPendingDepositAmountWeiChanged" ]
        },
        ethPendingDepositTxHash: {
          type: String,
          attr: "eth-pending-deposit-tx-hash",
          watchCallbacks: [ "onEthPendingDepositTxHashChanged" ]
        },
        ethPendingWithdrawalAmountWei: {
          type: Number,
          attr: "eth-pending-withdrawal-amount-wei",
          watchCallbacks: [ "onEthPendingWithdrawalAmountWeiChanged" ]
        },
        ethPendingWithdrawalTxHash: {
          type: String,
          attr: "eth-pending-withdrawal-tx-hash",
          watchCallbacks: [ "onEthPendingWithdrawalTxHashChanged" ]
        },
        ethWeb3WalletBalance: {
          type: Number,
          attr: "eth-web-3-wallet-balance"
        },
        getBalances: {
          type: "Any",
          attr: "get-balances"
        },
        getEtherscanAddressURL: {
          type: "Any",
          attr: "get-etherscan-address-u-r-l"
        },
        getEtherscanTxURL: {
          type: "Any",
          attr: "get-etherscan-tx-u-r-l"
        },
        history: {
          type: "Any",
          attr: "history"
        },
        isDepositPending: {
          state: !0
        },
        isWithdrawalPending: {
          state: !0
        },
        network: {
          type: String,
          attr: "network"
        },
        updateAccount: {
          type: "Any",
          attr: "update-account"
        },
        user: {
          type: "Any",
          attr: "user",
          watchCallbacks: [ "onUserAcquired" ]
        },
        withdraw: {
          type: "Any",
          attr: "withdraw"
        },
        withdrawalError: {
          state: !0
        }
      };
    },
    enumerable: !0,
    configurable: !0
  }), Object.defineProperty(AccountExchange, "style", {
    get: function() {
      return "/**style-placeholder:account-exchange:**/";
    },
    enumerable: !0,
    configurable: !0
  }), AccountExchange;
}();

AccountTunnel.injectProps(AccountExchange, [ "ethFreeBalanceWei", "ethMultisigBalance", "ethPendingDepositTxHash", "ethPendingDepositAmountWei", "ethPendingWithdrawalTxHash", "ethPendingWithdrawalAmountWei", "updateAccount", "user", "deposit", "withdraw", "getBalances" ]), 
WalletTunnel.injectProps(AccountExchange, [ "network", "ethWeb3WalletBalance", "getEtherscanAddressURL", "getEtherscanTxURL" ]);

export { AccountExchange };