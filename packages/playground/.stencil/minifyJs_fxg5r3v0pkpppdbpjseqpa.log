const t = window.App.h;

class e {
  constructor() {
    this.el = {}, this.buttonPressed = {}, this.disabled = !1, this.spinner = !1;
  }
  handleClick(t) {
    t.preventDefault(), this.buttonPressed.emit(t);
  }
  render() {
    return t("button", {
      disabled: this.disabled,
      onClick: this.handleClick.bind(this),
      class: this.el.className || "button"
    }, this.spinner ? t("widget-spinner", {
      visible: !0,
      type: "circle",
      color: "white"
    }) : {}, t("slot", null));
  }
  static get is() {
    return "form-button";
  }
  static get encapsulation() {
    return "shadow";
  }
  static get properties() {
    return {
      disabled: {
        type: Boolean,
        attr: "disabled"
      },
      el: {
        elementRef: !0
      },
      spinner: {
        type: Boolean,
        attr: "spinner"
      }
    };
  }
  static get events() {
    return [ {
      name: "buttonPressed",
      method: "buttonPressed",
      bubbles: !0,
      cancelable: !0,
      composed: !0
    } ];
  }
  static get style() {
    return "/**style-placeholder:form-button:**/";
  }
}

class s {
  constructor() {
    this.formSubmitted = {};
  }
  handleSubmit(t) {
    t.preventDefault(), this.formSubmitted.emit(t);
  }
  render() {
    return t("form", {
      onSubmit: t => this.handleSubmit(t)
    }, t("slot", null));
  }
  static get is() {
    return "form-container";
  }
  static get encapsulation() {
    return "shadow";
  }
  static get events() {
    return [ {
      name: "formSubmitted",
      method: "formSubmitted",
      bubbles: !0,
      cancelable: !0,
      composed: !0
    } ];
  }
  static get style() {
    return "/**style-placeholder:form-container:**/";
  }
}

class i {
  constructor() {
    this.change = {}, this.disabled = !1, this.label = "", this.unit = "", this.type = "text", 
    this.min = -1 / 0, this.max = 1 / 0, this.step = 1, this.autofocus = !1, this.error = "", 
    this.value = "";
  }
  handleChange(t) {
    this.value = t.target.value, this.error = "", this.change.emit(t);
  }
  render() {
    return t("label", null, t("div", {
      class: "label"
    }, this.label ? this.label : t("slot", {
      name: "label"
    })), t("div", {
      class: this.disabled ? "input-container disabled" : "input-container"
    }, t("input", {
      class: "input",
      autoFocus: this.autofocus,
      disabled: this.disabled,
      type: this.type,
      value: this.value,
      max: this.max,
      min: this.min,
      step: this.step,
      onInput: t => this.handleChange(t)
    }), this.unit ? t("div", {
      class: "unit"
    }, this.unit) : null), this.error ? t("div", {
      class: "error"
    }, this.error) : null);
  }
  static get is() {
    return "form-input";
  }
  static get encapsulation() {
    return "shadow";
  }
  static get properties() {
    return {
      autofocus: {
        type: Boolean,
        attr: "autofocus"
      },
      disabled: {
        type: Boolean,
        attr: "disabled"
      },
      error: {
        type: String,
        attr: "error",
        mutable: !0
      },
      label: {
        type: String,
        attr: "label"
      },
      max: {
        type: Number,
        attr: "max"
      },
      min: {
        type: Number,
        attr: "min"
      },
      step: {
        type: Number,
        attr: "step"
      },
      type: {
        type: String,
        attr: "type"
      },
      unit: {
        type: String,
        attr: "unit"
      },
      value: {
        type: "Any",
        attr: "value",
        mutable: !0
      }
    };
  }
  static get events() {
    return [ {
      name: "change",
      method: "change",
      bubbles: !0,
      cancelable: !0,
      composed: !0
    } ];
  }
  static get style() {
    return "/**style-placeholder:form-input:**/";
  }
}

export { e as FormButton, s as FormContainer, i as FormInput };