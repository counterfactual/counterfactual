{"moduleFile":{"sourceFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/components/node-listener/node-listener.tsx","localImports":["/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/account","/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/app-registry","/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/counterfactual","/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/wallet"],"externalImports":["@counterfactual/types","@stencil/core","@stencil/router","ethers/providers","ethers/utils"],"potentialCmpRefs":[{"tag":"dialog-propose-install"},{"tag":"dialog-reject-install"},{"tag":"dialog-insufficient-funds"},{"tag":"widget-dialog"}],"cmpMeta":{"tagNameMeta":"node-listener","stylesMeta":{},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"NodeListener","tags":[],"documentation":"","type":"typeof NodeListener"},"encapsulationMeta":1,"componentClass":"NodeListener","membersMeta":{"el":{"memberType":64},"currentMessage":{"memberType":16},"currentModalType":{"memberType":16},"currentErrorType":{"memberType":16},"apps":{"memberType":1,"attribName":"apps","attribType":{"text":"AppDefinition[]","required":false,"optional":false,"typeReferences":{"AppDefinition":{"referenceLocation":"import","importReferenceLocation":"../../types"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"apps","tags":[],"documentation":"","type":"AppDefinition[]","default":"[]"}},"web3Detected":{"memberType":1,"attribName":"web-3-detected","attribType":{"text":"boolean","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":4,"jsdoc":{"name":"web3Detected","tags":[],"documentation":"","type":"boolean","default":"false"}},"history":{"memberType":1,"attribName":"history","attribType":{"text":"RouterHistory","required":false,"optional":false,"typeReferences":{"RouterHistory":{"referenceLocation":"import","importReferenceLocation":"@stencil/router"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"history","tags":[],"documentation":"","type":"RouterHistory","default":"{} as RouterHistory"}},"provider":{"memberType":1,"attribName":"provider","attribType":{"text":"Web3Provider","required":false,"optional":false,"typeReferences":{"Web3Provider":{"referenceLocation":"import","importReferenceLocation":"ethers/providers"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"provider","tags":[],"documentation":"","type":"Web3Provider","default":"{} as Web3Provider"}},"ethMultisigBalance":{"memberType":1,"attribName":"eth-multisig-balance","attribType":{"text":"BigNumber","required":false,"optional":false,"typeReferences":{"BigNumber":{"referenceLocation":"import","importReferenceLocation":"ethers/utils"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"ethMultisigBalance","tags":[],"documentation":"","type":"BigNumber","default":"window[\"ethers\"].constants.Zero"}}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":true,"hasSvg":false,"jsFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/components/node-listener/node-listener.js"},"jsText":"import AccountTunnel from \"../../data/account\";\r\nimport AppRegistryTunnel from \"../../data/app-registry\";\r\nimport CounterfactualNode from \"../../data/counterfactual\";\r\nimport WalletTunnel from \"../../data/wallet\";\r\nconst KOVAN_NETWORK_ID = \"42\";\r\nexport class NodeListener {\r\n    constructor() {\r\n        this.el = {};\r\n        this.apps = [];\r\n        this.web3Detected = false;\r\n        this.history = {};\r\n        this.provider = {};\r\n        this.ethMultisigBalance = window[\"ethers\"].constants.Zero;\r\n        this.nodeMessageResolver = {\r\n            proposeInstallVirtualEvent: this.onProposeInstallVirtual.bind(this),\r\n            rejectInstallEvent: this.onRejectInstall.bind(this),\r\n            rejectInstallVirtualEvent: this.onRejectInstall.bind(this)\r\n        };\r\n    }\r\n    get cfProvider() {\r\n        return CounterfactualNode.getCfProvider();\r\n    }\r\n    async componentWillLoad() {\r\n        if (this.web3Detected) {\r\n            this.bindNodeEvents();\r\n        }\r\n    }\r\n    bindNodeEvents() {\r\n        Object.keys(this.nodeMessageResolver).forEach(eventName => {\r\n            this.cfProvider.off(eventName);\r\n            this.cfProvider.on(eventName, this.nodeMessageResolver[eventName].bind(this));\r\n        });\r\n    }\r\n    onProposeInstallVirtual(data) {\r\n        this.currentMessage = data;\r\n        this.showModal();\r\n    }\r\n    onRejectInstall(data) {\r\n        this.currentMessage = data;\r\n        this.showModal();\r\n    }\r\n    async acceptProposeInstall(message) {\r\n        try {\r\n            const proposeInstallParams = message.data\r\n                .params;\r\n            const currentEthBalance = this.ethMultisigBalance;\r\n            const minimumEthBalance = window[\"ethers\"].utils.bigNumberify(proposeInstallParams.initiatorDeposit);\r\n            if (currentEthBalance.lt(minimumEthBalance)) {\r\n                this.currentModalType = \"error\";\r\n                this.currentErrorType = \"INSUFFICIENT_FUNDS\";\r\n                this.currentMessage = { minimumEthBalance };\r\n                return;\r\n            }\r\n            const { appInstanceId, intermediaries } = this.currentMessage.data;\r\n            const [intermediaryIdentifier] = intermediaries;\r\n            const installedApp = await this.cfProvider.installVirtual(appInstanceId, intermediaryIdentifier);\r\n            const app = this.apps.find(app => {\r\n                return (app.id[KOVAN_NETWORK_ID] === installedApp.appInstance.appDefinition);\r\n            });\r\n            if (!app) {\r\n                throw Error(\"You've received an installation proposal from a different Ethereum network\");\r\n            }\r\n            window.localStorage.setItem(\"playground:installingDapp\", JSON.stringify({\r\n                installedApp,\r\n                name: app.name,\r\n                dappContainerUrl: `/dapp/${app.slug}`,\r\n                dappUrl: app.url\r\n            }));\r\n            this.history.push(`/dapp/${app.slug}`);\r\n            this.hideModal();\r\n        }\r\n        catch (error) {\r\n            this.currentModalType = \"error\";\r\n            this.currentErrorType = error.message;\r\n            console.error(error);\r\n        }\r\n    }\r\n    async rejectProposeInstall() {\r\n        await this.cfProvider.rejectInstall(this.currentMessage.data.appInstanceId);\r\n        this.hideModal();\r\n    }\r\n    showModal() {\r\n        this.currentModalType = this.currentMessage.type;\r\n    }\r\n    hideModal() {\r\n        this.currentModalType = \"none\";\r\n    }\r\n    render() {\r\n        let modal = {};\r\n        if (this.currentModalType === \"proposeInstallVirtualEvent\") {\r\n            modal = (h(\"dialog-propose-install\", { message: this.currentMessage, onAccept: this.acceptProposeInstall.bind(this), onReject: this.rejectProposeInstall.bind(this) }));\r\n        }\r\n        if (this.currentModalType === \"rejectInstallVirtualEvent\" ||\r\n            this.currentModalType === \"rejectInstallEvent\") {\r\n            modal = (h(\"dialog-reject-install\", { message: this.currentMessage, onOKClicked: this.hideModal.bind(this) }));\r\n        }\r\n        if (this.currentModalType === \"error\") {\r\n            if (this.currentErrorType === \"INSUFFICIENT_FUNDS\") {\r\n                modal = (h(\"dialog-insufficient-funds\", { message: this.currentMessage, onDeposit: this.hideModal.bind(this), onReject: this.rejectProposeInstall.bind(this) }));\r\n            }\r\n            else {\r\n                modal = (h(\"widget-dialog\", { dialogTitle: \"Something went wrong\", content: `${this.currentErrorType}. See the console for more info.`, primaryButtonText: \"OK\", onPrimaryButtonClicked: () => this.hideModal() }));\r\n            }\r\n        }\r\n        return [h(\"slot\", null), modal];\r\n    }\r\n    static get is() { return \"node-listener\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get properties() { return {\r\n        \"apps\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"apps\"\r\n        },\r\n        \"currentErrorType\": {\r\n            \"state\": true\r\n        },\r\n        \"currentMessage\": {\r\n            \"state\": true\r\n        },\r\n        \"currentModalType\": {\r\n            \"state\": true\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"ethMultisigBalance\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"eth-multisig-balance\"\r\n        },\r\n        \"history\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"history\"\r\n        },\r\n        \"provider\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"provider\"\r\n        },\r\n        \"web3Detected\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"web-3-detected\"\r\n        }\r\n    }; }\r\n}\r\nAppRegistryTunnel.injectProps(NodeListener, [\"apps\"]);\r\nAccountTunnel.injectProps(NodeListener, [\"ethMultisigBalance\"]);\r\nWalletTunnel.injectProps(NodeListener, [\"web3Detected\", \"provider\"]);\r\n"}