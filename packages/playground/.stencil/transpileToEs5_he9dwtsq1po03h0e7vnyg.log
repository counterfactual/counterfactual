var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
App.loadBundle('/**:bundle-id:**/', ['exports', './chunk-346f9d40.js', './chunk-faed910a.js', './chunk-84817f4c.js'], function (exports, __chunk_1, __chunk_2, __chunk_6) {
    var h = window.App.h;
    var AccountEdit = /** @class */ (function () {
        function AccountEdit() {
            this.user = {};
            this.updateAccount = function (e) { };
            this.history = {};
            this.logout = function () { };
            this.userLoaded = false;
            this.changeset = {
                username: "",
                email: "",
                ethAddress: "",
                nodeAddress: "",
                id: ""
            };
        }
        AccountEdit.prototype.updateChangeset = function () {
            if (this.userLoaded) {
                return;
            }
            this.changeset.id = this.user.id;
            this.changeset.ethAddress = this.user.ethAddress;
            this.changeset.email = this.user.email;
            this.changeset.username = this.user.username;
            this.changeset.nodeAddress = this.user.nodeAddress;
            this.userLoaded = true;
        };
        AccountEdit.prototype.change = function (key, event) {
            this.changeset[key] = event.target.value;
        };
        AccountEdit.prototype.formSubmissionHandler = function () {
            return __awaiter(this, void 0, void 0, function () {
                var updatedUser;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, __chunk_6.PlaygroundAPIClient.updateAccount(this.changeset)];
                        case 1:
                            updatedUser = _a.sent();
                            this.updateAccount({ user: updatedUser });
                            window.localStorage.setItem("playground:user:token", updatedUser.token);
                            this.history.push("/");
                            return [2 /*return*/];
                    }
                });
            });
        };
        AccountEdit.prototype.logoutClickedHandler = function () {
            this.logout();
            this.history.push("/");
        };
        AccountEdit.prototype.render = function () {
            var _this = this;
            return (h("widget-screen", null, h("div", { slot: "header" }, "Account Settings"), h("form-container", { onFormSubmitted: function (e) { return _this.formSubmissionHandler(); } }, h("form-input", { label: "Username", disabled: true, value: this.changeset.username }), h("form-input", { label: "Email", value: this.changeset.email, onChange: function (e) { return _this.change("email", e); } }), h("div", { class: "smallprint" }, h("b", null, "Your account is linked to your Ethereum address: "), this.changeset.ethAddress), h("form-button", { class: "button", onButtonPressed: function (e) { return _this.formSubmissionHandler(); } }, "Save changes"), h("form-button", { class: "button button--secondary", onButtonPressed: function (e) { return _this.logoutClickedHandler(); } }, "Log out"))));
        };
        Object.defineProperty(AccountEdit, "is", {
            get: function () { return "account-edit"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccountEdit, "encapsulation", {
            get: function () { return "shadow"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccountEdit, "properties", {
            get: function () {
                return {
                    "el": {
                        "elementRef": true
                    },
                    "history": {
                        "type": "Any",
                        "attr": "history"
                    },
                    "logout": {
                        "type": "Any",
                        "attr": "logout"
                    },
                    "updateAccount": {
                        "type": "Any",
                        "attr": "update-account"
                    },
                    "user": {
                        "type": "Any",
                        "attr": "user",
                        "watchCallbacks": ["updateChangeset"]
                    },
                    "userLoaded": {
                        "state": true
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccountEdit, "style", {
            get: function () { return "/**style-placeholder:account-edit:**/"; },
            enumerable: true,
            configurable: true
        });
        return AccountEdit;
    }());
    __chunk_2.AccountTunnel.injectProps(AccountEdit, ["updateAccount", "user", "logout"]);
    exports.AccountEdit = AccountEdit;
    Object.defineProperty(exports, '__esModule', { value: true });
});
