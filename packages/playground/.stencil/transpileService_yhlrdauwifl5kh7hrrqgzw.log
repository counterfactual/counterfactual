{"moduleFile":{"sourceFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/playground-api-client.ts","localImports":[],"externalImports":[],"potentialCmpRefs":[],"hasSlot":false,"hasSvg":false,"jsFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/playground-api-client.js"},"jsText":"const BASE_URL = `ENV:API_HOST`;\r\nconst API_TIMEOUT = 30000;\r\nfunction timeout(delay = API_TIMEOUT) {\r\n    const handler = setTimeout(() => {\r\n        throw new Error(\"Request timed out\");\r\n    }, delay);\r\n    return {\r\n        cancel() {\r\n            clearTimeout(handler);\r\n        }\r\n    };\r\n}\r\nasync function request(method, endpoint, data, token, authType = \"Signature\") {\r\n    return await fetch(`${BASE_URL}/api/${endpoint}`, Object.assign({ method }, ([\"POST\", \"PUT\"].includes(method)\r\n        ? {\r\n            body: JSON.stringify({\r\n                data\r\n            })\r\n        }\r\n        : {}), { headers: Object.assign({ \"Content-Type\": \"application/json; charset=utf-8\" }, (token ? { Authorization: `${authType} ${token}` } : {})) }));\r\n}\r\nasync function put(endpoint, data, token) {\r\n    const requestTimeout = timeout();\r\n    const httpResponse = await request(\"PUT\", `${endpoint}/${data.id}`, data, token);\r\n    requestTimeout.cancel();\r\n    const response = (await httpResponse.json());\r\n    if (response.errors) {\r\n        const error = response.errors[0];\r\n        throw error;\r\n    }\r\n    return response;\r\n}\r\nasync function post(endpoint, data, token, authType = \"Signature\") {\r\n    const requestTimeout = timeout();\r\n    const httpResponse = await request(\"POST\", endpoint, data, token, authType);\r\n    requestTimeout.cancel();\r\n    const response = (await httpResponse.json());\r\n    if (response.errors) {\r\n        const error = response.errors[0];\r\n        throw error;\r\n    }\r\n    return response;\r\n}\r\nasync function remove(endpoint, data, token, authType = \"Signature\") {\r\n    const requestTimeout = timeout();\r\n    const httpResponse = await fetch(`${BASE_URL}/api/${endpoint}/${data.attributes.id}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json; charset=utf-8\",\r\n            Authorization: `${authType} ${token}`\r\n        }\r\n    });\r\n    requestTimeout.cancel();\r\n    const response = (await httpResponse.json());\r\n    if (response.errors) {\r\n        const error = response.errors[0];\r\n        throw error;\r\n    }\r\n    return response;\r\n}\r\nasync function get(endpoint, token) {\r\n    const requestTimeout = timeout();\r\n    const httpResponse = await request(\"GET\", endpoint, {}, token, \"Bearer\");\r\n    requestTimeout.cancel();\r\n    const response = (await httpResponse.json());\r\n    if (response.errors) {\r\n        const error = response.errors[0];\r\n        throw error;\r\n    }\r\n    return response;\r\n}\r\nfunction fromAPIResource(resource) {\r\n    return Object.assign({ id: resource.id }, resource.attributes);\r\n}\r\nfunction toAPIResource(model) {\r\n    return Object.assign({}, (model[\"id\"] ? { id: model[\"id\"] } : {}), { attributes: Object.assign({}, Object.keys(model)\r\n            .map(key => {\r\n            return { [key]: model[key] };\r\n        })\r\n            .reduce((previous, current) => {\r\n            return Object.assign({}, previous, current);\r\n        }, {})) });\r\n}\r\nexport default class PlaygroundAPIClient {\r\n    static async getHeartbeat() {\r\n        try {\r\n            const json = (await get(\"heartbeats\"));\r\n            return json.data[0].attributes;\r\n        }\r\n        catch (_a) {\r\n            return {\r\n                schemaVersion: \"\",\r\n                maintenanceMode: true\r\n            };\r\n        }\r\n    }\r\n    static async createAccount(user, signature) {\r\n        try {\r\n            const data = toAPIResource(user);\r\n            const json = (await post(\"users\", data, signature));\r\n            const resource = json.data;\r\n            const jsonMultisig = (await post(\"multisig-deploys\", {\r\n                type: \"multisigDeploy\",\r\n                attributes: { ethAddress: user.ethAddress }\r\n            }));\r\n            const resourceMultisig = jsonMultisig.data;\r\n            resource.attributes.transactionHash = resourceMultisig.id;\r\n            return fromAPIResource(resource);\r\n        }\r\n        catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    static async updateAccount(user) {\r\n        try {\r\n            const data = toAPIResource(user);\r\n            const json = (await put(\"users\", data, window.localStorage.getItem(\"playground:user:token\")));\r\n            const resource = json.data;\r\n            return fromAPIResource(resource);\r\n        }\r\n        catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    static async deleteAccount(user) {\r\n        try {\r\n            const data = toAPIResource(user);\r\n            await remove(\"users\", data, window.localStorage.getItem(\"playground:user:token\"));\r\n        }\r\n        catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    static async login(user, signature) {\r\n        try {\r\n            const json = (await post(\"session-requests\", {\r\n                type: \"session\",\r\n                id: \"\",\r\n                attributes: {\r\n                    ethAddress: user.ethAddress\r\n                }\r\n            }, signature));\r\n            const resource = json.data;\r\n            return fromAPIResource(resource);\r\n        }\r\n        catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    static async getUser(token) {\r\n        if (!token) {\r\n            throw new Error(\"getUser(): token is required\");\r\n        }\r\n        try {\r\n            const json = (await get(\"users/me\", token));\r\n            const resource = json.data[0];\r\n            return fromAPIResource(resource);\r\n        }\r\n        catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    static async getUserByNodeAddress(ethAddress) {\r\n        try {\r\n            const json = (await get(`users?filter[node_address]=${ethAddress}`));\r\n            const resource = json.data[0];\r\n            return fromAPIResource(resource);\r\n        }\r\n        catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    static async getApps() {\r\n        try {\r\n            const json = (await get(\"apps\"));\r\n            const resources = json.data;\r\n            return resources.map(resource => fromAPIResource(resource));\r\n        }\r\n        catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    static async matchmake(token, matchmakeWith) {\r\n        try {\r\n            return await post(\"matchmaking-requests\", {\r\n                type: \"matchmakingRequest\",\r\n                attributes: matchmakeWith ? { matchmakeWith } : {}\r\n            }, token, \"Bearer\");\r\n        }\r\n        catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n}\r\n"}