{"moduleFile":{"sourceFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/counterfactual.ts","localImports":[],"externalImports":["@counterfactual/types","rpc-server","@counterfactual/types"],"potentialCmpRefs":[],"hasSlot":false,"hasSvg":false,"jsFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/counterfactual.js"},"jsText":"import { Node as NodeTypes } from \"@counterfactual/types\";\r\nexport default class CounterfactualNode {\r\n    static getInstance() {\r\n        return CounterfactualNode.node;\r\n    }\r\n    static getCfProvider() {\r\n        return CounterfactualNode.cfProvider;\r\n    }\r\n    static async create(settings) {\r\n        if (CounterfactualNode.node) {\r\n            return CounterfactualNode.node;\r\n        }\r\n        CounterfactualNode.node = await Node.create(settings.messagingService, settings.storeService, settings.nodeConfig, new window[\"ethers\"].providers.Web3Provider(window[\"web3\"].currentProvider), settings.network);\r\n        await this.setupNodeProvider();\r\n        return CounterfactualNode.getInstance();\r\n    }\r\n    static async setupNodeProvider() {\r\n        this.node.on(NodeTypes.MethodName.PROPOSE_INSTALL_VIRTUAL, this.postToPort.bind(this));\r\n        this.node.on(NodeTypes.MethodName.INSTALL_VIRTUAL, this.postToPort.bind(this));\r\n        this.node.on(NodeTypes.MethodName.REJECT_INSTALL, this.postToPort.bind(this));\r\n        this.node.on(NodeTypes.MethodName.DEPOSIT, this.postToPort.bind(this));\r\n        this.node.on(NodeTypes.MethodName.WITHDRAW, this.postToPort.bind(this));\r\n        this.node.on(NodeTypes.MethodName.GET_FREE_BALANCE_STATE, this.postToPort.bind(this));\r\n        this.node.on(NodeTypes.EventName.CREATE_CHANNEL, this.postToPort.bind(this));\r\n        this.node.on(NodeTypes.RpcMethodName.PROPOSE_INSTALL_VIRTUAL, this.postToJsonRpcPort.bind(this));\r\n        this.node.on(NodeTypes.RpcMethodName.INSTALL_VIRTUAL, this.postToJsonRpcPort.bind(this));\r\n        this.node.on(NodeTypes.RpcMethodName.REJECT_INSTALL, this.postToJsonRpcPort.bind(this));\r\n        this.node.on(NodeTypes.RpcMethodName.DEPOSIT, this.postToJsonRpcPort.bind(this));\r\n        this.node.on(NodeTypes.EventName.DEPOSIT_CONFIRMED, this.postToJsonRpcPort.bind(this));\r\n        this.node.on(NodeTypes.RpcMethodName.WITHDRAW, this.postToJsonRpcPort.bind(this));\r\n        this.node.on(NodeTypes.RpcMethodName.GET_FREE_BALANCE_STATE, this.postToJsonRpcPort.bind(this));\r\n        this.node.on(NodeTypes.RpcMethodName.CREATE_CHANNEL, this.postToJsonRpcPort.bind(this));\r\n        window.addEventListener(\"message\", event => {\r\n            if (event.data === \"cf-node-provider:init\") {\r\n                const { port2 } = this.configureMessagePorts();\r\n                window.postMessage(\"cf-node-provider:port\", \"*\", [port2]);\r\n            }\r\n        });\r\n        this.nodeProvider = new cfWallet.NodeProvider();\r\n        await this.nodeProvider.connect();\r\n        this.cfProvider = this.createCfProvider();\r\n    }\r\n    static configureMessagePorts() {\r\n        const channel = new MessageChannel();\r\n        this.port = channel.port1;\r\n        this.port.addEventListener(\"message\", (event) => {\r\n            const jsonrpcData = event.data;\r\n            if (jsonrpcData.methodName && jsonrpcData.parameters) {\r\n                this.relayJsonRpcMessage(jsonrpcData);\r\n            }\r\n            else {\r\n                this.relayMessage(event);\r\n            }\r\n        });\r\n        this.port.start();\r\n        return channel;\r\n    }\r\n    static relayMessage(event) {\r\n        this.node.emit(event.data.methodName, event.data);\r\n    }\r\n    static relayJsonRpcMessage(event) {\r\n        this.node.rpcRouter.dispatch(event);\r\n    }\r\n    static postToPort(message) {\r\n        this.port.postMessage(message);\r\n    }\r\n    static postToJsonRpcPort(message) {\r\n        this.port.postMessage(message);\r\n    }\r\n    static createCfProvider() {\r\n        return new cfWallet.Provider(this.nodeProvider);\r\n    }\r\n}\r\n"}