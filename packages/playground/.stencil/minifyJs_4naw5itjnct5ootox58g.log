App.loadBundle("/**:bundle-id:**/", [ "exports", "./chunk-346f9d40.js", "./chunk-faed910a.js", "./chunk-7df1cf36.js", "./chunk-008b1f1a.js" ], function(e, t, n, r, i) {
  var a = window.App.h, o = /** @class */ function() {
    function HeaderAccountInfo() {
      this.src = "", this.header = "", this.content = "", this.spinner = !1, this.tooltip = "";
    }
    return HeaderAccountInfo.prototype.render = function() {
      return a("widget-tooltip", {
        message: this.tooltip
      }, a("div", {
        class: "info"
      }, a("img", {
        class: "info-img",
        src: this.src
      }), a("div", {
        class: "info-text"
      }, a("div", {
        class: "header"
      }, this.header), a("div", {
        class: "content"
      }, this.content, a("widget-spinner", {
        visible: this.spinner
      })))));
    }, Object.defineProperty(HeaderAccountInfo, "is", {
      get: function() {
        return "header-account-info";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(HeaderAccountInfo, "encapsulation", {
      get: function() {
        return "shadow";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(HeaderAccountInfo, "properties", {
      get: function() {
        return {
          content: {
            type: String,
            attr: "content"
          },
          header: {
            type: String,
            attr: "header"
          },
          spinner: {
            type: Boolean,
            attr: "spinner"
          },
          src: {
            type: String,
            attr: "src"
          },
          tooltip: {
            type: String,
            attr: "tooltip"
          }
        };
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(HeaderAccountInfo, "style", {
      get: function() {
        return "/**style-placeholder:header-account-info:**/";
      },
      enumerable: !0,
      configurable: !0
    }), HeaderAccountInfo;
  }(), s = /** @class */ function() {
    function HeaderBalance() {
      this.ethFreeBalanceWei = 0, this.user = {};
    }
    return Object.defineProperty(HeaderBalance.prototype, "ethBalance", {
      get: function() {
        return this.ethFreeBalanceWei ? window.ethers.utils.formatEther(this.ethFreeBalanceWei) + " ETH" : "0.00 ETH";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(HeaderBalance.prototype, "hasethPendingDepositAmountWei", {
      get: function() {
        return !isNaN(this.ethPendingDepositAmountWei);
      },
      enumerable: !0,
      configurable: !0
    }), HeaderBalance.prototype.render = function() {
      if (this.user.id) {
        var e = "";
        return this.hasethPendingDepositAmountWei && (e = "We're waiting for the network to confirm your latest deposit."), 
        this.user.multisigAddress || (e = "We're configuring your state channel with the Playground. This can take 15-90 seconds, depending on network speed."), 
        a("stencil-route-link", {
          url: "/exchange"
        }, a("header-account-info", {
          src: "/assets/icon/crypto.svg",
          header: "Balance",
          content: this.ethBalance,
          spinner: this.hasethPendingDepositAmountWei || !this.user.multisigAddress,
          tooltip: e
        }));
      }
    }, Object.defineProperty(HeaderBalance, "is", {
      get: function() {
        return "header-balance";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(HeaderBalance, "encapsulation", {
      get: function() {
        return "shadow";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(HeaderBalance, "properties", {
      get: function() {
        return {
          el: {
            elementRef: !0
          },
          ethFreeBalanceWei: {
            type: Number,
            attr: "eth-free-balance-wei"
          },
          ethPendingDepositAmountWei: {
            type: Number,
            attr: "eth-pending-deposit-amount-wei"
          },
          user: {
            type: "Any",
            attr: "user",
            mutable: !0
          }
        };
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(HeaderBalance, "style", {
      get: function() {
        return "/**style-placeholder:header-balance:**/";
      },
      enumerable: !0,
      configurable: !0
    }), HeaderBalance;
  }();
  n.AccountTunnel.injectProps(s, [ "ethFreeBalanceWei", "user", "ethPendingDepositAmountWei" ]);
  var c = /** @class */ function() {
    function RouteLink() {
      this.unsubscribe = function() {}, this.activeClass = "link-active", this.exact = !1, 
      this.strict = !0, this.custom = "a", this.match = null;
    }
    return RouteLink.prototype.componentWillLoad = function() {
      this.computeMatch();
    }, RouteLink.prototype.computeMatch = function() {
      this.location && (this.match = r.matchPath(this.location.pathname, {
        path: this.urlMatch || this.url,
        exact: this.exact,
        strict: this.strict
      }));
    }, RouteLink.prototype.handleClick = function(e) {
      var t, n;
      if (!r.isModifiedEvent(e) && this.history && this.url && this.root) return e.preventDefault(), 
      this.history.push((n = this.root, "/" == (t = this.url).charAt(0) && "/" == n.charAt(n.length - 1) ? n.slice(0, n.length - 1) + t : n + t));
    }, RouteLink.prototype.render = function() {
      var e, t = {
        class: (e = {}, e[this.activeClass] = null !== this.match, e),
        onClick: this.handleClick.bind(this)
      };
      return this.anchorClass && (t.class[this.anchorClass] = !0), "a" === this.custom && (t = Object.assign({}, t, {
        href: this.url,
        title: this.anchorTitle,
        role: this.anchorRole,
        tabindex: this.anchorTabIndex,
        "aria-haspopup": this.ariaHaspopup,
        id: this.anchorId,
        "aria-posinset": this.ariaPosinset,
        "aria-setsize": this.ariaSetsize,
        "aria-label": this.ariaLabel
      })), a(this.custom, Object.assign({}, t), a("slot", null));
    }, Object.defineProperty(RouteLink, "is", {
      get: function() {
        return "stencil-route-link";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(RouteLink, "properties", {
      get: function() {
        return {
          activeClass: {
            type: String,
            attr: "active-class"
          },
          anchorClass: {
            type: String,
            attr: "anchor-class"
          },
          anchorId: {
            type: String,
            attr: "anchor-id"
          },
          anchorRole: {
            type: String,
            attr: "anchor-role"
          },
          anchorTabIndex: {
            type: String,
            attr: "anchor-tab-index"
          },
          anchorTitle: {
            type: String,
            attr: "anchor-title"
          },
          ariaHaspopup: {
            type: String,
            attr: "aria-haspopup"
          },
          ariaLabel: {
            type: String,
            attr: "aria-label"
          },
          ariaPosinset: {
            type: String,
            attr: "aria-posinset"
          },
          ariaSetsize: {
            type: Number,
            attr: "aria-setsize"
          },
          custom: {
            type: String,
            attr: "custom"
          },
          el: {
            elementRef: !0
          },
          exact: {
            type: Boolean,
            attr: "exact"
          },
          history: {
            type: "Any",
            attr: "history"
          },
          location: {
            type: "Any",
            attr: "location",
            watchCallbacks: [ "computeMatch" ]
          },
          match: {
            state: !0
          },
          root: {
            type: String,
            attr: "root"
          },
          strict: {
            type: Boolean,
            attr: "strict"
          },
          url: {
            type: String,
            attr: "url"
          },
          urlMatch: {
            type: String,
            attr: "url-match"
          }
        };
      },
      enumerable: !0,
      configurable: !0
    }), RouteLink;
  }();
  i.ActiveRouter.injectProps(c, [ "history", "location", "root" ]), e.HeaderAccountInfo = o, 
  e.HeaderBalance = s, e.StencilRouteLink = c, Object.defineProperty(e, "__esModule", {
    value: !0
  });
});