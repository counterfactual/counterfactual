var __awaiter = this && this.__awaiter || function(e, t, n, r) {
  return new (n || (n = Promise))(function(o, i) {
    function fulfilled(e) {
      try {
        step(r.next(e));
      } catch (e) {
        i(e);
      }
    }
    function rejected(e) {
      try {
        step(r.throw(e));
      } catch (e) {
        i(e);
      }
    }
    function step(e) {
      e.done ? o(e.value) : new n(function(t) {
        t(e.value);
      }).then(fulfilled, rejected);
    }
    step((r = r.apply(e, t || [])).next());
  });
}, __generator = this && this.__generator || function(e, t) {
  var n, r, o, i, s = {
    label: 0,
    sent: function() {
      if (1 & o[0]) throw o[1];
      return o[1];
    },
    trys: [],
    ops: []
  };
  return i = {
    next: verb(0),
    throw: verb(1),
    return: verb(2)
  }, "function" == typeof Symbol && (i[Symbol.iterator] = function() {
    return this;
  }), i;
  function verb(i) {
    return function(a) {
      return function(i) {
        if (n) throw new TypeError("Generator is already executing.");
        for (;s; ) try {
          if (n = 1, r && (o = 2 & i[0] ? r.return : i[0] ? r.throw || ((o = r.return) && o.call(r), 
          0) : r.next) && !(o = o.call(r, i[1])).done) return o;
          switch (r = 0, o && (i = [ 2 & i[0], o.value ]), i[0]) {
           case 0:
           case 1:
            o = i;
            break;

           case 4:
            return s.label++, {
              value: i[1],
              done: !1
            };

           case 5:
            s.label++, r = i[1], i = [ 0 ];
            continue;

           case 7:
            i = s.ops.pop(), s.trys.pop();
            continue;

           default:
            if (!(o = (o = s.trys).length > 0 && o[o.length - 1]) && (6 === i[0] || 2 === i[0])) {
              s = 0;
              continue;
            }
            if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {
              s.label = i[1];
              break;
            }
            if (6 === i[0] && s.label < o[1]) {
              s.label = o[1], o = i;
              break;
            }
            if (o && s.label < o[2]) {
              s.label = o[2], s.ops.push(i);
              break;
            }
            o[2] && s.ops.pop(), s.trys.pop();
            continue;
          }
          i = t.call(e, s);
        } catch (e) {
          i = [ 6, e ], r = 0;
        } finally {
          n = o = 0;
        }
        if (5 & i[0]) throw i[1];
        return {
          value: i[0] ? i[1] : void 0,
          done: !0
        };
      }([ i, a ]);
    };
  }
};

App.loadBundle("/**:bundle-id:**/", [ "exports", "./chunk-346f9d40.js", "./chunk-faed910a.js", "./chunk-00addb69.js", "./chunk-f52e57f9.js", "./chunk-cc018d56.js" ], function(e, t, n, r, o, i) {
  var s = window.App.h, a = /** @class */ function() {
    function AccountDeposit() {
      this.ethWeb3WalletBalance = 0, this.user = {}, this.updateAccount = function(e) {}, 
      this.history = {}, this.signer = {}, this.deposit = function() {}, this.canUseApps = !1, 
      this.error = "", this.stage = "ready";
    }
    return AccountDeposit.prototype.componentDidUpdate = function() {
      this.user && this.user.id || this.history.push("/");
    }, AccountDeposit.prototype.onDepositFinished = function() {
      this.stage = "finished";
    }, Object.defineProperty(AccountDeposit.prototype, "node", {
      get: function() {
        return o.CounterfactualNode.getInstance();
      },
      enumerable: !0,
      configurable: !0
    }), AccountDeposit.prototype.formSubmitionHandler = function(e) {
      return __awaiter(this, void 0, void 0, function() {
        var t;
        return __generator(this, function(n) {
          switch (n.label) {
           case 0:
            this.amountDeposited = window.ethers.utils.parseEther(e.target.value), n.label = 1;

           case 1:
            return n.trys.push([ 1, 3, , 4 ]), this.stage = "depositing", [ 4 /*yield*/ , this.deposit(this.amountDeposited) ];

           case 2:
            return n.sent(), [ 3 /*break*/ , 4 ];

           case 3:
            return t = n.sent(), this.error = t.message, this.stage = "ready", [ 3 /*break*/ , 4 ];

           case 4:
            return [ 2 /*return*/ ];
          }
        });
      });
    }, AccountDeposit.prototype.render = function() {
      if ("finished" === this.stage) return s("stencil-router-redirect", {
        url: "/"
      });
      if (!this.ethWeb3WalletBalance) return s("widget-spinner", {
        type: "dots"
      });
      var e = "depositing" === this.stage;
      return s("widget-screen", {
        exitable: !1
      }, s("div", {
        slot: "header"
      }, "Fund your account"), s("p", {
        class: "details"
      }, "In order to use the Playground Dapps, you need to deposit funds into your account. Please enter how much ETH you want to deposit:"), s("account-eth-form", {
        onSubmit: this.formSubmitionHandler.bind(this),
        autofocus: !0,
        provideFaucetLink: !0,
        button: {
          ready: "Deposit",
          depositing: "Making deposit..."
        }[this.stage],
        available: window.ethers.utils.bigNumberify(this.ethWeb3WalletBalance),
        min: .1,
        max: 1,
        error: this.error,
        loading: e,
        disabled: e
      }));
    }, Object.defineProperty(AccountDeposit, "is", {
      get: function() {
        return "account-deposit";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(AccountDeposit, "encapsulation", {
      get: function() {
        return "shadow";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(AccountDeposit, "properties", {
      get: function() {
        return {
          amountDeposited: {
            state: !0
          },
          canUseApps: {
            type: "Any",
            attr: "can-use-apps",
            watchCallbacks: [ "onDepositFinished" ]
          },
          deposit: {
            type: "Any",
            attr: "deposit"
          },
          el: {
            elementRef: !0
          },
          error: {
            state: !0
          },
          ethWeb3WalletBalance: {
            type: Number,
            attr: "eth-web-3-wallet-balance"
          },
          history: {
            type: "Any",
            attr: "history"
          },
          signer: {
            type: "Any",
            attr: "signer"
          },
          stage: {
            state: !0
          },
          updateAccount: {
            type: "Any",
            attr: "update-account"
          },
          user: {
            type: "Any",
            attr: "user"
          }
        };
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(AccountDeposit, "style", {
      get: function() {
        return "/**style-placeholder:account-deposit:**/";
      },
      enumerable: !0,
      configurable: !0
    }), AccountDeposit;
  }();
  n.AccountTunnel.injectProps(a, [ "updateAccount", "user", "deposit" ]), r.AppRegistryTunnel.injectProps(a, [ "canUseApps" ]), 
  i.WalletTunnel.injectProps(a, [ "signer", "ethWeb3WalletBalance" ]), e.AccountDeposit = a, 
  Object.defineProperty(e, "__esModule", {
    value: !0
  });
});