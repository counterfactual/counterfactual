!function(e, t, r, n, o, i, c, s, a, d, u, p, l, h) {
  for (
  // create global namespace if it doesn't already exist
  u = e.App = e.App || {}, (
  // auto hide components until they been fully hydrated
  // reusing the "x" and "i" variables from the args for funzies
  p = t.createElement("style")).innerHTML = a + "{visibility:hidden}.hydrated{visibility:inherit}", 
  p.setAttribute("data-styles", ""), l = t.head.querySelector("meta[charset]"), t.head.insertBefore(p, l ? l.nextSibling : t.head.firstChild), 
  function(e, t, r) {
    (e["s-apps"] = e["s-apps"] || []).push("App"), r.componentOnReady || (r.componentOnReady = function() {
      /*tslint:disable*/
      var t = this;
      function executor(r) {
        if (t.nodeName.indexOf("-") > 0) {
          // loop through all the app namespaces
          for (
          // window hasn't loaded yet and there's a
          // good chance this is a custom element
          var n = e["s-apps"], o = 0, i = 0; i < n.length; i++) 
          // see if this app has "componentOnReady" setup
          if (e[n[i]].componentOnReady) {
            // this app's core has loaded call its "componentOnReady"
            if (e[n[i]].componentOnReady(t, r)) 
            // this component does belong to this app and would
            // have fired off the resolve fn
            // let's stop here, we're good
            return;
            o++;
          }
          if (o < n.length) 
          // not all apps are ready yet
          // add it to the queue to be figured out when they are
          return void (e["s-cr"] = e["s-cr"] || []).push([ t, r ]);
        }
        // not a recognized app component
                r(null);
      }
      // callback wasn't provided, let's return a promise
            return e.Promise ? new e.Promise(executor) : {
        then: executor
      };
      // promise may not have been polyfilled yet
        });
  }(e, 0, d), o = o || u.resourcesUrl, p = (
  // figure out the script element for this current script
  l = t.querySelectorAll("script")).length - 1; p >= 0 && !(h = l[p]).src && !h.hasAttribute("data-resources-url"); p--) ;
  // get the resource path attribute on this script element
    l = h.getAttribute("data-resources-url"), !o && l && (
  // the script element has a data-resources-url attribute, always use that
  o = l), !o && h.src && (o = (
  // we don't have an exact resourcesUrl, so let's
  // figure it out relative to this script's src and app's filesystem namespace
  l = h.src.split("/").slice(0, -1)).join("/") + (l.length ? "/" : "") + "app/"), 
  // request the core this browser needs
  // test for native support of custom elements and fetch
  // if either of those are not supported, then use the core w/ polyfills
  // also check if the page was build with ssr or not
  p = t.createElement("script"), function(e, t, r, n) {
    // fyi, dev mode has verbose if/return statements
    // but it minifies to a nice 'lil one-liner ;)
    return !(t.search.indexOf("core=esm") > 0) && (!(!(t.search.indexOf("core=es5") > 0 || "file:" === t.protocol) && e.customElements && e.customElements.define && e.fetch && e.CSS && e.CSS.supports && e.CSS.supports("color", "var(--c)") && "noModule" in r) || function(e) {
      try {
        return new Function('import("")'), !1;
      } catch (e) {}
      return !0;
    }());
  }(e, e.location, p) ? 
  // requires the es5/polyfilled core
  p.src = o + "app.h5qfiohp.js" : (
  // let's do this!
  p.src = o + "app.8zrk45rp.js", p.setAttribute("type", "module"), p.setAttribute("crossorigin", !0)), 
  p.setAttribute("data-resources-url", o), p.setAttribute("data-namespace", "app"), 
  t.head.appendChild(p);
}(window, document, 0, 0, 0, 0, 0, 0, "account-deposit,account-edit,account-eth-form,account-exchange,account-register,app-home,app-root,apps-list,apps-list-item,context-consumer,dapp-container,dialog-insufficient-funds,dialog-propose-install,dialog-reject-install,form-button,form-container,form-input,header-account,header-account-info,header-balance,header-content,header-drawer,layout-header,node-listener,stencil-route,stencil-route-link,stencil-route-switch,stencil-router,stencil-router-redirect,webthree-connector,widget-card,widget-connection,widget-dev-flags,widget-dialog,widget-error-message,widget-header,widget-logo,widget-screen,widget-spinner,widget-tooltip", HTMLElement.prototype);