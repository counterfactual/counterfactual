{"moduleFile":{"sourceFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/components/webthree-connector/webthree-connector.tsx","localImports":[],"externalImports":["@stencil/core","ethers/providers"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"webthree-connector","stylesMeta":{},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"Web3Connector","tags":[],"documentation":"","type":"typeof Web3Connector"},"encapsulationMeta":1,"componentClass":"Web3Connector","membersMeta":{"accountState":{"memberType":1,"attribName":"account-state","attribType":{"text":"AccountState","required":false,"optional":false,"typeReferences":{"AccountState":{"referenceLocation":"import","importReferenceLocation":"../../data/account"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"accountState","tags":[],"documentation":"","type":"{ user: UserSession; error?: ErrorMessage; hasCorruptStateChannelState?: boolean; precommitedDepositAmountWei?: BigNumber; ethMultisigBalance: BigNumber; ethFreeBalanceWei?: BigNumber; ethCounterpartyFreeBalanceWei?: BigNumber; ethPendingDepositAmountWei?: BigNumber; ethPendingWithdrawalAmountWei?: BigNumber; ethPendingDepositTxHash?: string; ethPendingWithdrawalTxHash?: string; enoughCounterpartyBalance: boolean; enoughLocalBalance: boolean; updateAccount?(data: Partial<AccountState>): Promise<void>; login?(): Promise<UserSession>; logout?(): void; deleteAccount?(): Promise<void>; getBalances?(): Promise<{ ethMultisigBalance: BigNumber; ethFreeBalanceWei: BigNumber; }>; deposit?(valueInWei: BigNumber): Promise<MethodResponse>; withdraw?(value: any): Promise<MethodResponse>; waitForMultisig?(): void; autoLogin?(): Promise<void>; }","default":"{} as AccountState"}},"walletState":{"memberType":1,"attribName":"wallet-state","attribType":{"text":"WalletState","required":false,"optional":false,"typeReferences":{"WalletState":{"referenceLocation":"import","importReferenceLocation":"../../data/wallet"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"walletState","tags":[],"documentation":"","type":"WalletState","default":"{}"}}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/components/webthree-connector/webthree-connector.js"},"jsText":"const KOVAN_NETWORK_ID = \"42\";\r\nconst permittedNetworkIds = [KOVAN_NETWORK_ID];\r\nexport class Web3Connector {\r\n    constructor() {\r\n        this.accountState = {};\r\n        this.walletState = {};\r\n    }\r\n    getProvider() {\r\n        return new window[\"ethers\"].providers.Web3Provider(window[\"web3\"].currentProvider);\r\n    }\r\n    getCurrentAddress() {\r\n        return window[\"web3\"].eth.accounts[0];\r\n    }\r\n    getCurrentNetwork() {\r\n        return window[\"web3\"].version.network;\r\n    }\r\n    async getETHBalance() {\r\n        const provider = this.getProvider();\r\n        if (provider && this.isUnlocked()) {\r\n            return await provider.getSigner().getBalance();\r\n        }\r\n        return window[\"ethers\"].constants.Zero;\r\n    }\r\n    isWeb3Detected() {\r\n        return window[\"web3\"] !== undefined;\r\n    }\r\n    isMetamask() {\r\n        return (window[\"web3\"].isMetamask || window[\"web3\"].currentProvider.isMetamask);\r\n    }\r\n    isUnlocked() {\r\n        return window[\"web3\"].eth.accounts[0] !== undefined;\r\n    }\r\n    isOnPermittedNetwork() {\r\n        return permittedNetworkIds.includes(this.getCurrentNetwork());\r\n    }\r\n    async getCurrentWalletState() {\r\n        const walletState = {\r\n            network: \"\",\r\n            connected: false,\r\n            metamaskUnlocked: false,\r\n            web3Detected: this.walletState.web3Detected,\r\n            web3Enabled: this.walletState.web3Enabled,\r\n            networkPermitted: false,\r\n            hasDetectedNetwork: true\r\n        };\r\n        walletState.metamaskUnlocked = this.isUnlocked();\r\n        walletState.networkPermitted = this.isOnPermittedNetwork();\r\n        walletState.network = this.getCurrentNetwork();\r\n        return walletState;\r\n    }\r\n    async componentDidLoad() {\r\n        if (!this.isWeb3Detected()) {\r\n            return this.walletState.updateWalletConnection({\r\n                web3Detected: false,\r\n                hasDetectedNetwork: true\r\n            });\r\n        }\r\n        this.accountState.updateAccount({\r\n            user: Object.assign({}, this.accountState.user, { ethAddress: this.getCurrentAddress() })\r\n        });\r\n        this.walletState.updateWalletConnection(Object.assign({}, (await this.getCurrentWalletState()), { provider: this.getProvider(), signer: this.getProvider().getSigner(), web3Enabled: true, web3Detected: true }));\r\n        const interval = window.setInterval(async () => {\r\n            let ethAddress = this.accountState.user.ethAddress;\r\n            const newAddress = this.getCurrentAddress();\r\n            await this.accountState.updateAccount({\r\n                user: Object.assign({}, this.accountState.user, { ethAddress: newAddress })\r\n            });\r\n            await this.walletState.updateWalletConnection({\r\n                ethWeb3WalletBalance: await this.getETHBalance()\r\n            });\r\n            if (newAddress !== ethAddress) {\r\n                this.walletState.updateWalletConnection(await this.getCurrentWalletState());\r\n                ethAddress = newAddress;\r\n                if (ethAddress !== undefined && newAddress === undefined) {\r\n                    clearInterval(interval);\r\n                }\r\n            }\r\n        }, 1000);\r\n    }\r\n    static get is() { return \"webthree-connector\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get properties() { return {\r\n        \"accountState\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"account-state\"\r\n        },\r\n        \"walletState\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"wallet-state\"\r\n        }\r\n    }; }\r\n}\r\n"}