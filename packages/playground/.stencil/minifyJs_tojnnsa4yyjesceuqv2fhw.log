var __awaiter = this && this.__awaiter || function(e, t, r, n) {
  return new (r || (r = Promise))(function(s, i) {
    function fulfilled(e) {
      try {
        step(n.next(e));
      } catch (e) {
        i(e);
      }
    }
    function rejected(e) {
      try {
        step(n.throw(e));
      } catch (e) {
        i(e);
      }
    }
    function step(e) {
      e.done ? s(e.value) : new r(function(t) {
        t(e.value);
      }).then(fulfilled, rejected);
    }
    step((n = n.apply(e, t || [])).next());
  });
}, __generator = this && this.__generator || function(e, t) {
  var r, n, s, i, a = {
    label: 0,
    sent: function() {
      if (1 & s[0]) throw s[1];
      return s[1];
    },
    trys: [],
    ops: []
  };
  return i = {
    next: verb(0),
    throw: verb(1),
    return: verb(2)
  }, "function" == typeof Symbol && (i[Symbol.iterator] = function() {
    return this;
  }), i;
  function verb(i) {
    return function(o) {
      return function(i) {
        if (r) throw new TypeError("Generator is already executing.");
        for (;a; ) try {
          if (r = 1, n && (s = 2 & i[0] ? n.return : i[0] ? n.throw || ((s = n.return) && s.call(n), 
          0) : n.next) && !(s = s.call(n, i[1])).done) return s;
          switch (n = 0, s && (i = [ 2 & i[0], s.value ]), i[0]) {
           case 0:
           case 1:
            s = i;
            break;

           case 4:
            return a.label++, {
              value: i[1],
              done: !1
            };

           case 5:
            a.label++, n = i[1], i = [ 0 ];
            continue;

           case 7:
            i = a.ops.pop(), a.trys.pop();
            continue;

           default:
            if (!(s = (s = a.trys).length > 0 && s[s.length - 1]) && (6 === i[0] || 2 === i[0])) {
              a = 0;
              continue;
            }
            if (3 === i[0] && (!s || i[1] > s[0] && i[1] < s[3])) {
              a.label = i[1];
              break;
            }
            if (6 === i[0] && a.label < s[1]) {
              a.label = s[1], s = i;
              break;
            }
            if (s && a.label < s[2]) {
              a.label = s[2], a.ops.push(i);
              break;
            }
            s[2] && a.ops.pop(), a.trys.pop();
            continue;
          }
          i = t.call(e, a);
        } catch (e) {
          i = [ 6, e ], n = 0;
        } finally {
          r = s = 0;
        }
        if (5 & i[0]) throw i[1];
        return {
          value: i[0] ? i[1] : void 0,
          done: !0
        };
      }([ i, o ]);
    };
  }
};

App.loadBundle("/**:bundle-id:**/", [ "exports" ], function(e) {
  window;
  var t = "http://localhost:9000", r = 3e4;
  function timeout(e) {
    void 0 === e && (e = r);
    var t = setTimeout(function() {
      throw new Error("Request timed out");
    }, e);
    return {
      cancel: function() {
        clearTimeout(t);
      }
    };
  }
  function request(e, r, n, s, i) {
    return void 0 === i && (i = "Signature"), __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(a) {
        switch (a.label) {
         case 0:
          return [ 4 /*yield*/ , fetch(t + "/api/" + r, Object.assign({
            method: e
          }, [ "POST", "PUT" ].includes(e) ? {
            body: JSON.stringify({
              data: n
            })
          } : {}, {
            headers: Object.assign({
              "Content-Type": "application/json; charset=utf-8"
            }, s ? {
              Authorization: i + " " + s
            } : {})
          })) ];

         case 1:
          return [ 2 /*return*/ , a.sent() ];
        }
      });
    });
  }
  function put(e, t, r) {
    return __awaiter(this, void 0, void 0, function() {
      var n, s, i;
      return __generator(this, function(a) {
        switch (a.label) {
         case 0:
          return n = timeout(), [ 4 /*yield*/ , request("PUT", e + "/" + t.id, t, r) ];

         case 1:
          return s = a.sent(), n.cancel(), [ 4 /*yield*/ , s.json() ];

         case 2:
          if ((i = a.sent()).errors) throw i.errors[0];
          return [ 2 /*return*/ , i ];
        }
      });
    });
  }
  function post(e, t, r, n) {
    return void 0 === n && (n = "Signature"), __awaiter(this, void 0, void 0, function() {
      var s, i, a;
      return __generator(this, function(o) {
        switch (o.label) {
         case 0:
          return s = timeout(), [ 4 /*yield*/ , request("POST", e, t, r, n) ];

         case 1:
          return i = o.sent(), s.cancel(), [ 4 /*yield*/ , i.json() ];

         case 2:
          if ((a = o.sent()).errors) throw a.errors[0];
          return [ 2 /*return*/ , a ];
        }
      });
    });
  }
  function remove(e, r, n, s) {
    return void 0 === s && (s = "Signature"), __awaiter(this, void 0, void 0, function() {
      var i, a, o;
      return __generator(this, function(u) {
        switch (u.label) {
         case 0:
          return i = timeout(), [ 4 /*yield*/ , fetch(t + "/api/" + e + "/" + r.attributes.id, {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json; charset=utf-8",
              Authorization: s + " " + n
            }
          }) ];

         case 1:
          return a = u.sent(), i.cancel(), [ 4 /*yield*/ , a.json() ];

         case 2:
          if ((o = u.sent()).errors) throw o.errors[0];
          return [ 2 /*return*/ , o ];
        }
      });
    });
  }
  function get(e, t) {
    return __awaiter(this, void 0, void 0, function() {
      var r, n, s;
      return __generator(this, function(i) {
        switch (i.label) {
         case 0:
          return r = timeout(), [ 4 /*yield*/ , request("GET", e, {}, t, "Bearer") ];

         case 1:
          return n = i.sent(), r.cancel(), [ 4 /*yield*/ , n.json() ];

         case 2:
          if ((s = i.sent()).errors) throw s.errors[0];
          return [ 2 /*return*/ , s ];
        }
      });
    });
  }
  function fromAPIResource(e) {
    return Object.assign({
      id: e.id
    }, e.attributes);
  }
  function toAPIResource(e) {
    return Object.assign({}, e.id ? {
      id: e.id
    } : {}, {
      attributes: Object.assign({}, Object.keys(e).map(function(t) {
        var r;
        return (r = {})[t] = e[t], r;
      }).reduce(function(e, t) {
        return Object.assign({}, e, t);
      }, {}))
    });
  }
  var n = /** @class */ function() {
    function PlaygroundAPIClient() {}
    return PlaygroundAPIClient.getHeartbeat = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(e) {
          switch (e.label) {
           case 0:
            return e.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , get("heartbeats") ];

           case 1:
            return [ 2 /*return*/ , e.sent().data[0].attributes ];

           case 2:
            return e.sent(), [ 2 /*return*/ , {
              schemaVersion: "",
              maintenanceMode: !0
            } ];

           case 3:
            return [ 2 /*return*/ ];
          }
        });
      });
    }, PlaygroundAPIClient.createAccount = function(e, t) {
      return __awaiter(this, void 0, void 0, function() {
        var r, n, s, i;
        return __generator(this, function(a) {
          switch (a.label) {
           case 0:
            return a.trys.push([ 0, 3, , 4 ]), [ 4 /*yield*/ , post("users", toAPIResource(e), t) ];

           case 1:
            return r = a.sent(), n = r.data, [ 4 /*yield*/ , post("multisig-deploys", {
              type: "multisigDeploy",
              attributes: {
                ethAddress: e.ethAddress
              }
            }) ];

           case 2:
            return s = a.sent(), n.attributes.transactionHash = s.data.id, [ 2 /*return*/ , fromAPIResource(n) ];

           case 3:
            return i = a.sent(), [ 2 /*return*/ , Promise.reject(i) ];

           case 4:
            return [ 2 /*return*/ ];
          }
        });
      });
    }, PlaygroundAPIClient.updateAccount = function(e) {
      return __awaiter(this, void 0, void 0, function() {
        var t;
        return __generator(this, function(r) {
          switch (r.label) {
           case 0:
            return r.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , put("users", toAPIResource(e), window.localStorage.getItem("playground:user:token")) ];

           case 1:
            return [ 2 /*return*/ , fromAPIResource(r.sent().data) ];

           case 2:
            return t = r.sent(), [ 2 /*return*/ , Promise.reject(t) ];

           case 3:
            return [ 2 /*return*/ ];
          }
        });
      });
    }, PlaygroundAPIClient.deleteAccount = function(e) {
      return __awaiter(this, void 0, void 0, function() {
        var t;
        return __generator(this, function(r) {
          switch (r.label) {
           case 0:
            return r.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , remove("users", toAPIResource(e), window.localStorage.getItem("playground:user:token")) ];

           case 1:
            return r.sent(), [ 3 /*break*/ , 3 ];

           case 2:
            return t = r.sent(), [ 2 /*return*/ , Promise.reject(t) ];

           case 3:
            return [ 2 /*return*/ ];
          }
        });
      });
    }, PlaygroundAPIClient.login = function(e, t) {
      return __awaiter(this, void 0, void 0, function() {
        var r;
        return __generator(this, function(n) {
          switch (n.label) {
           case 0:
            return n.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , post("session-requests", {
              type: "session",
              id: "",
              attributes: {
                ethAddress: e.ethAddress
              }
            }, t) ];

           case 1:
            return [ 2 /*return*/ , fromAPIResource(n.sent().data) ];

           case 2:
            return r = n.sent(), [ 2 /*return*/ , Promise.reject(r) ];

           case 3:
            return [ 2 /*return*/ ];
          }
        });
      });
    }, PlaygroundAPIClient.getUser = function(e) {
      return __awaiter(this, void 0, void 0, function() {
        var t;
        return __generator(this, function(r) {
          switch (r.label) {
           case 0:
            if (!e) throw new Error("getUser(): token is required");
            r.label = 1;

           case 1:
            return r.trys.push([ 1, 3, , 4 ]), [ 4 /*yield*/ , get("users/me", e) ];

           case 2:
            return [ 2 /*return*/ , fromAPIResource(r.sent().data[0]) ];

           case 3:
            return t = r.sent(), [ 2 /*return*/ , Promise.reject(t) ];

           case 4:
            return [ 2 /*return*/ ];
          }
        });
      });
    }, PlaygroundAPIClient.getUserByNodeAddress = function(e) {
      return __awaiter(this, void 0, void 0, function() {
        var t;
        return __generator(this, function(r) {
          switch (r.label) {
           case 0:
            return r.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , get("users?filter[node_address]=" + e) ];

           case 1:
            return [ 2 /*return*/ , fromAPIResource(r.sent().data[0]) ];

           case 2:
            return t = r.sent(), [ 2 /*return*/ , Promise.reject(t) ];

           case 3:
            return [ 2 /*return*/ ];
          }
        });
      });
    }, PlaygroundAPIClient.getApps = function() {
      return __awaiter(this, void 0, void 0, function() {
        var e;
        return __generator(this, function(t) {
          switch (t.label) {
           case 0:
            return t.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , get("apps") ];

           case 1:
            return [ 2 /*return*/ , t.sent().data.map(function(e) {
              return fromAPIResource(e);
            }) ];

           case 2:
            return e = t.sent(), [ 2 /*return*/ , Promise.reject(e) ];

           case 3:
            return [ 2 /*return*/ ];
          }
        });
      });
    }, PlaygroundAPIClient.matchmake = function(e, t) {
      return __awaiter(this, void 0, void 0, function() {
        var r;
        return __generator(this, function(n) {
          switch (n.label) {
           case 0:
            return n.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , post("matchmaking-requests", {
              type: "matchmakingRequest",
              attributes: t ? {
                matchmakeWith: t
              } : {}
            }, e, "Bearer") ];

           case 1:
            return [ 2 /*return*/ , n.sent() ];

           case 2:
            return r = n.sent(), [ 2 /*return*/ , Promise.reject(r) ];

           case 3:
            return [ 2 /*return*/ ];
          }
        });
      });
    }, PlaygroundAPIClient;
  }();
  e.PlaygroundAPIClient = n;
});