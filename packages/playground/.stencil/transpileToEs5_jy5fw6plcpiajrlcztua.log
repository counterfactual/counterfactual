var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
App.loadBundle('/**:bundle-id:**/', ['exports', './chunk-346f9d40.js', './chunk-faed910a.js', './chunk-cc018d56.js'], function (exports, __chunk_1, __chunk_2, __chunk_5) {
    var h = window.App.h;
    var HUB_IS_DEPOSITING_ALERT = "The hub is currently making a deposit in the channel. Currently, this demo does not support asyncronous deposits.";
    var AccountExchange = /** @class */ (function () {
        function AccountExchange() {
            var _this = this;
            this.user = {};
            this.ethFreeBalanceWei = 0;
            this.ethMultisigBalance = 0;
            this.ethWeb3WalletBalance = 0;
            this.ethPendingDepositTxHash = "";
            this.ethPendingDepositAmountWei = 0;
            this.ethPendingWithdrawalTxHash = "";
            this.ethPendingWithdrawalAmountWei = 0;
            this.network = "";
            this.updateAccount = function (e) { };
            this.deposit = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/, ({})];
            }); }); };
            this.withdraw = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/];
            }); }); };
            this.getBalances = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/, undefined];
            }); }); };
            this.getEtherscanAddressURL = function () { return ""; };
            this.getEtherscanTxURL = function () { return ""; };
            this.history = {};
            this.depositError = "";
            this.withdrawalError = "";
            this.isDepositPending = false;
            this.isWithdrawalPending = false;
        }
        AccountExchange.prototype.componentDidUpdate = function () {
            if (!this.user || !this.user.id) {
                this.history.push("/");
                return;
            }
        };
        AccountExchange.prototype.removeError = function () {
            this.updateAccount({
                error: null
            });
        };
        AccountExchange.prototype.onEthPendingDepositTxHashChanged = function () {
            this.updateDepositPendingState();
        };
        AccountExchange.prototype.onEthPendingDepositAmountWeiChanged = function () {
            this.updateDepositPendingState();
        };
        AccountExchange.prototype.onEthPendingWithdrawalTxHashChanged = function () {
            this.updateWithdrawalPendingState();
        };
        AccountExchange.prototype.onEthPendingWithdrawalAmountWeiChanged = function () {
            this.updateWithdrawalPendingState();
        };
        AccountExchange.prototype.updateDepositPendingState = function () {
            this.isDepositPending =
                Boolean(this.ethPendingDepositTxHash) &&
                    Boolean(this.ethPendingDepositAmountWei);
        };
        AccountExchange.prototype.updateWithdrawalPendingState = function () {
            this.isWithdrawalPending =
                Boolean(this.ethPendingWithdrawalTxHash) &&
                    Boolean(this.ethPendingWithdrawalAmountWei);
        };
        AccountExchange.prototype.onUserAcquired = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.user) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.getBalances()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        AccountExchange.prototype.onDepositClicked = function (e) {
            return __awaiter(this, void 0, void 0, function () {
                var e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.deposit(window["ethers"].utils.parseEther(e.target.value).toHexString())];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _a.sent();
                            if (e_1.toString().includes("Cannot deposit while another deposit")) {
                                window.alert(HUB_IS_DEPOSITING_ALERT);
                            }
                            else {
                                throw e_1;
                            }
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        AccountExchange.prototype.onWithdrawClicked = function (e) {
            return __awaiter(this, void 0, void 0, function () {
                var e_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.withdraw(window["ethers"].utils.parseEther(e.target.value).toHexString())];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            e_2 = _a.sent();
                            if (e_2.toString().includes("Cannot withdraw while another deposit")) {
                                window.alert(HUB_IS_DEPOSITING_ALERT);
                            }
                            else {
                                throw e_2;
                            }
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        AccountExchange.prototype.getMultisigEtherscanLink = function () {
            return this.user.multisigAddress ? (h("a", { target: "_blank", href: this.getEtherscanAddressURL(this.user.multisigAddress) }, "View State Channels Wallet on Etherscan")) : (h("a", { target: "_blank", href: this.getEtherscanTxURL(this.user.transactionHash) }, "View State Channels Wallet Deployment Transaction on Etherscan"));
        };
        AccountExchange.prototype.getPendingDepositEtherscanLink = function () {
            var Zero = window["ethers"].constants.Zero;
            var ethPendingDepositAmountWei = this.ethPendingDepositAmountWei || Zero;
            return this.isDepositPending ? (h("a", { href: this.getEtherscanTxURL(this.ethPendingDepositTxHash), target: "_blank" }, "\uD83D\uDCB0 Pending Deposit of", " ", window["ethers"].utils.formatEther(ethPendingDepositAmountWei), " ETH")) : null;
        };
        AccountExchange.prototype.getPendingWithdrawalEtherscanLink = function () {
            var Zero = window["ethers"].constants.Zero;
            var ethPendingWithdrawalAmountWei = this.ethPendingWithdrawalAmountWei || Zero;
            return this.isWithdrawalPending ? (h("a", { href: this.getEtherscanTxURL(this.ethPendingWithdrawalTxHash), target: "_blank" }, "\uD83D\uDCB8 Pending Withdrawal of", " ", window["ethers"].utils.formatEther(ethPendingWithdrawalAmountWei), "ETH")) : null;
        };
        AccountExchange.prototype.render = function () {
            var Zero = window["ethers"].constants.Zero;
            var ethFreeBalanceWei = this.ethFreeBalanceWei || Zero;
            return [
                h("layout-header", null),
                h("div", { class: "form-containers" }, h("div", { class: "form-container" }, h("h1", null, "Deposit ETH"), h("account-eth-form", { onSubmit: this.onDepositClicked.bind(this), button: this.isDepositPending ? "Deposit in progress" : "Deposit", disabled: this.isDepositPending ? true : false, loading: this.isDepositPending ? true : false, provideFaucetLink: true, error: this.depositError, available: window["ethers"].utils.bigNumberify(this.ethWeb3WalletBalance), min: 0.1, max: 1 })), h("div", { class: "form-container" }, h("h1", null, "Withdraw ETH"), h("account-eth-form", { onSubmit: this.onWithdrawClicked.bind(this), button: this.isWithdrawalPending ? "Withdrawal in progress" : "Withdraw", disabled: this.isWithdrawalPending ? true : false, loading: this.isWithdrawalPending ? true : false, error: this.withdrawalError, available: window["ethers"].utils.bigNumberify(ethFreeBalanceWei), min: 0, max: Number(window["ethers"].utils.formatEther(ethFreeBalanceWei)) })), h("div", { class: "container" }, h("p", null, this.getMultisigEtherscanLink()), h("p", null, this.getPendingDepositEtherscanLink()), h("p", null, this.getPendingWithdrawalEtherscanLink())))
            ];
        };
        Object.defineProperty(AccountExchange, "is", {
            get: function () { return "account-exchange"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccountExchange, "encapsulation", {
            get: function () { return "shadow"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccountExchange, "properties", {
            get: function () {
                return {
                    "deposit": {
                        "type": "Any",
                        "attr": "deposit"
                    },
                    "depositError": {
                        "state": true
                    },
                    "el": {
                        "elementRef": true
                    },
                    "ethFreeBalanceWei": {
                        "type": Number,
                        "attr": "eth-free-balance-wei"
                    },
                    "ethMultisigBalance": {
                        "type": Number,
                        "attr": "eth-multisig-balance"
                    },
                    "ethPendingDepositAmountWei": {
                        "type": Number,
                        "attr": "eth-pending-deposit-amount-wei",
                        "watchCallbacks": ["onEthPendingDepositAmountWeiChanged"]
                    },
                    "ethPendingDepositTxHash": {
                        "type": String,
                        "attr": "eth-pending-deposit-tx-hash",
                        "watchCallbacks": ["onEthPendingDepositTxHashChanged"]
                    },
                    "ethPendingWithdrawalAmountWei": {
                        "type": Number,
                        "attr": "eth-pending-withdrawal-amount-wei",
                        "watchCallbacks": ["onEthPendingWithdrawalAmountWeiChanged"]
                    },
                    "ethPendingWithdrawalTxHash": {
                        "type": String,
                        "attr": "eth-pending-withdrawal-tx-hash",
                        "watchCallbacks": ["onEthPendingWithdrawalTxHashChanged"]
                    },
                    "ethWeb3WalletBalance": {
                        "type": Number,
                        "attr": "eth-web-3-wallet-balance"
                    },
                    "getBalances": {
                        "type": "Any",
                        "attr": "get-balances"
                    },
                    "getEtherscanAddressURL": {
                        "type": "Any",
                        "attr": "get-etherscan-address-u-r-l"
                    },
                    "getEtherscanTxURL": {
                        "type": "Any",
                        "attr": "get-etherscan-tx-u-r-l"
                    },
                    "history": {
                        "type": "Any",
                        "attr": "history"
                    },
                    "isDepositPending": {
                        "state": true
                    },
                    "isWithdrawalPending": {
                        "state": true
                    },
                    "network": {
                        "type": String,
                        "attr": "network"
                    },
                    "updateAccount": {
                        "type": "Any",
                        "attr": "update-account"
                    },
                    "user": {
                        "type": "Any",
                        "attr": "user",
                        "watchCallbacks": ["onUserAcquired"]
                    },
                    "withdraw": {
                        "type": "Any",
                        "attr": "withdraw"
                    },
                    "withdrawalError": {
                        "state": true
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccountExchange, "style", {
            get: function () { return "/**style-placeholder:account-exchange:**/"; },
            enumerable: true,
            configurable: true
        });
        return AccountExchange;
    }());
    __chunk_2.AccountTunnel.injectProps(AccountExchange, [
        "ethFreeBalanceWei",
        "ethMultisigBalance",
        "ethPendingDepositTxHash",
        "ethPendingDepositAmountWei",
        "ethPendingWithdrawalTxHash",
        "ethPendingWithdrawalAmountWei",
        "updateAccount",
        "user",
        "deposit",
        "withdraw",
        "getBalances"
    ]);
    __chunk_5.WalletTunnel.injectProps(AccountExchange, [
        "network",
        "ethWeb3WalletBalance",
        "getEtherscanAddressURL",
        "getEtherscanTxURL"
    ]);
    exports.AccountExchange = AccountExchange;
    Object.defineProperty(exports, '__esModule', { value: true });
});
