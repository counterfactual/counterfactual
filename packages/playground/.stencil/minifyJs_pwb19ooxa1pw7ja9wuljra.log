const t = window.App.h;

import "./chunk-deed3e85.js";

import { a as e } from "./chunk-9cf92136.js";

class i {
  constructor() {
    this.submit = {}, this.header = "", this.button = "", this.disabled = !1, this.provideFaucetLink = !1, 
    this.min = .01, this.max = 1, this.available = 0, this.value = "", this.error = "", 
    this.loading = !1, this.autofocus = !1;
  }
  update(t) {
    this.error = "", this.value = t.target.value;
  }
  openFaucet() {
    window.open("https://faucet.kovan.network/", "_blank");
  }
  handleSubmit(t) {
    t.preventDefault();
    const e = Number(this.value);
    !e || e < this.min || e > this.max ? this.error = `Enter an amount larger than ${this.min} and smaller than ${this.max}.` : this.submit.emit(t);
  }
  render() {
    let e;
    try {
      e = parseFloat(window.ethers.utils.formatEther(this.available)).toFixed(4);
    } catch (t) {
      e = "0";
    }
    return t("div", null, t("form-container", null, t("form-input", {
      type: "number",
      unit: "ETH",
      value: this.value,
      error: this.error,
      disabled: this.disabled,
      min: this.min,
      max: Math.min(parseInt(e, 10), this.max),
      step: .001,
      onChange: t => this.update(t),
      autofocus: this.autofocus
    }, t("div", {
      class: "balance-label",
      slot: "label"
    }, t("div", null, "Available Balance"), t("div", null, e, " ETH"))), t("form-button", {
      class: "button",
      spinner: this.loading,
      disabled: this.disabled,
      onButtonPressed: this.handleSubmit.bind(this)
    }, this.button), this.provideFaucetLink ? t("form-button", {
      class: "button button--secondary",
      onButtonPressed: this.openFaucet.bind(this)
    }, "Get Free ETH (test faucet)") : void 0));
  }
  static get is() {
    return "account-eth-form";
  }
  static get encapsulation() {
    return "shadow";
  }
  static get properties() {
    return {
      autofocus: {
        type: Boolean,
        attr: "autofocus"
      },
      available: {
        type: Number,
        attr: "available"
      },
      button: {
        type: String,
        attr: "button"
      },
      disabled: {
        type: Boolean,
        attr: "disabled"
      },
      error: {
        type: String,
        attr: "error",
        mutable: !0
      },
      header: {
        type: String,
        attr: "header"
      },
      loading: {
        type: Boolean,
        attr: "loading"
      },
      max: {
        type: Number,
        attr: "max"
      },
      min: {
        type: Number,
        attr: "min"
      },
      provideFaucetLink: {
        type: Boolean,
        attr: "provide-faucet-link"
      },
      value: {
        type: "Any",
        attr: "value",
        mutable: !0
      }
    };
  }
  static get events() {
    return [ {
      name: "submit",
      method: "submit",
      bubbles: !0,
      cancelable: !0,
      composed: !0
    } ];
  }
  static get style() {
    return "/**style-placeholder:account-eth-form:**/";
  }
}

class s {
  render() {
    return t("div", {
      class: "card"
    }, t("slot", null));
  }
  static get is() {
    return "widget-card";
  }
  static get encapsulation() {
    return "shadow";
  }
  static get style() {
    return "/**style-placeholder:widget-card:**/";
  }
}

class a {
  constructor() {
    this.el = {}, this.visible = !1, this.dialogTitle = "", this.icon = "", this.content = {}, 
    this.contentClass = "", this.dialogClass = "", this.primaryButtonText = "", this.secondaryButtonText = "", 
    this.primaryButtonClicked = {}, this.secondaryButtonClicked = {};
  }
  primaryButtonClickedHandler() {
    this.primaryButtonClicked.emit();
  }
  secondaryButtonClickedHandler() {
    this.secondaryButtonClicked.emit();
  }
  render() {
    return t("div", {
      class: this.visible ? "dialog-wrapper dialog--open" : "dialog-wrapper"
    }, t("dialog", {
      open: this.visible,
      class: this.dialogClass
    }, t("header", null, t("widget-logo", {
      caption: this.dialogTitle
    })), t("main", {
      class: this.contentClass
    }, this.icon ? t("img", {
      src: this.icon
    }) : {}, this.content), t("footer", null, this.secondaryButtonText ? t("button", {
      class: "btn--secondary",
      onClick: () => this.secondaryButtonClickedHandler()
    }, this.secondaryButtonText) : {}, this.primaryButtonText ? t("button", {
      onClick: () => this.primaryButtonClickedHandler()
    }, this.primaryButtonText) : {})));
  }
  static get is() {
    return "widget-dialog";
  }
  static get encapsulation() {
    return "shadow";
  }
  static get properties() {
    return {
      content: {
        type: "Any",
        attr: "content"
      },
      contentClass: {
        type: String,
        attr: "content-class"
      },
      dialogClass: {
        type: String,
        attr: "dialog-class"
      },
      dialogTitle: {
        type: String,
        attr: "dialog-title"
      },
      el: {
        elementRef: !0
      },
      icon: {
        type: String,
        attr: "icon"
      },
      primaryButtonText: {
        type: String,
        attr: "primary-button-text"
      },
      secondaryButtonText: {
        type: String,
        attr: "secondary-button-text"
      },
      visible: {
        type: Boolean,
        attr: "visible",
        mutable: !0
      }
    };
  }
  static get events() {
    return [ {
      name: "primaryButtonClicked",
      method: "primaryButtonClicked",
      bubbles: !0,
      cancelable: !0,
      composed: !0
    }, {
      name: "secondaryButtonClicked",
      method: "secondaryButtonClicked",
      bubbles: !0,
      cancelable: !0,
      composed: !0
    } ];
  }
  static get style() {
    return "/**style-placeholder:widget-dialog:**/";
  }
}

class r {
  render() {
    return t("h2", {
      class: "header"
    }, t("slot", null));
  }
  static get is() {
    return "widget-header";
  }
  static get encapsulation() {
    return "shadow";
  }
  static get style() {
    return "/**style-placeholder:widget-header:**/";
  }
}

class n {
  constructor() {
    this.exitable = !0;
  }
  render() {
    return t("div", {
      class: "widget-screen"
    }, t("div", {
      class: "constraint"
    }, t("div", {
      class: "pre"
    }, t("widget-connection", null), this.exitable ? t("stencil-route-link", {
      url: "/"
    }, t("button", {
      class: "close"
    }, t("img", {
      src: "/assets/icon/close.svg"
    }))) : null), t("widget-card", null, t("div", {
      class: "logo"
    }, t("widget-logo", null)), t("widget-header", null, t("slot", {
      name: "header"
    })), t("slot", null)), t("div", {
      class: "post"
    }, t("slot", {
      name: "post"
    }))));
  }
  static get is() {
    return "widget-screen";
  }
  static get encapsulation() {
    return "shadow";
  }
  static get properties() {
    return {
      exitable: {
        type: Boolean,
        attr: "exitable"
      }
    };
  }
  static get style() {
    return "/**style-placeholder:widget-screen:**/";
  }
}

class o {
  componentWillLoad() {
    if (this.history && this.root && this.url) return this.history.replace((e = this.root, 
    "/" == (t = this.url).charAt(0) && "/" == e.charAt(e.length - 1) ? e.slice(0, e.length - 1) + t : e + t));
    var t, e;
  }
  static get is() {
    return "stencil-router-redirect";
  }
  static get properties() {
    return {
      el: {
        elementRef: !0
      },
      history: {
        type: "Any",
        attr: "history"
      },
      root: {
        type: String,
        attr: "root"
      },
      url: {
        type: String,
        attr: "url"
      }
    };
  }
}

e.injectProps(o, [ "history", "root" ]);

export { i as AccountEthForm, s as WidgetCard, a as WidgetDialog, r as WidgetHeader, n as WidgetScreen, o as StencilRouterRedirect };