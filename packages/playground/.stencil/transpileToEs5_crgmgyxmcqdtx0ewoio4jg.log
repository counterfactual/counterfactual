App.loadBundle('/**:bundle-id:**/', ['exports', './chunk-346f9d40.js', './chunk-faed910a.js', './chunk-7df1cf36.js', './chunk-008b1f1a.js'], function (exports, __chunk_1, __chunk_2, __chunk_7, __chunk_8) {
    var h = window.App.h;
    var HeaderAccountInfo = /** @class */ (function () {
        function HeaderAccountInfo() {
            this.src = "";
            this.header = "";
            this.content = "";
            this.spinner = false;
            this.tooltip = "";
        }
        HeaderAccountInfo.prototype.render = function () {
            return (h("widget-tooltip", { message: this.tooltip }, h("div", { class: "info" }, h("img", { class: "info-img", src: this.src }), h("div", { class: "info-text" }, h("div", { class: "header" }, this.header), h("div", { class: "content" }, this.content, h("widget-spinner", { visible: this.spinner }))))));
        };
        Object.defineProperty(HeaderAccountInfo, "is", {
            get: function () { return "header-account-info"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeaderAccountInfo, "encapsulation", {
            get: function () { return "shadow"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeaderAccountInfo, "properties", {
            get: function () {
                return {
                    "content": {
                        "type": String,
                        "attr": "content"
                    },
                    "header": {
                        "type": String,
                        "attr": "header"
                    },
                    "spinner": {
                        "type": Boolean,
                        "attr": "spinner"
                    },
                    "src": {
                        "type": String,
                        "attr": "src"
                    },
                    "tooltip": {
                        "type": String,
                        "attr": "tooltip"
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeaderAccountInfo, "style", {
            get: function () { return "/**style-placeholder:header-account-info:**/"; },
            enumerable: true,
            configurable: true
        });
        return HeaderAccountInfo;
    }());
    var HeaderBalance = /** @class */ (function () {
        function HeaderBalance() {
            this.ethFreeBalanceWei = 0;
            this.user = {};
        }
        Object.defineProperty(HeaderBalance.prototype, "ethBalance", {
            get: function () {
                if (!this.ethFreeBalanceWei) {
                    return "0.00 ETH";
                }
                return window["ethers"].utils.formatEther(this.ethFreeBalanceWei) + " ETH";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeaderBalance.prototype, "hasethPendingDepositAmountWei", {
            get: function () {
                return !isNaN(this.ethPendingDepositAmountWei);
            },
            enumerable: true,
            configurable: true
        });
        HeaderBalance.prototype.render = function () {
            if (!this.user.id)
                return;
            var tooltip = "";
            if (this.hasethPendingDepositAmountWei) {
                tooltip = "We're waiting for the network to confirm your latest deposit.";
            }
            if (!this.user.multisigAddress) {
                tooltip =
                    "We're configuring your state channel with the Playground. This can take 15-90 seconds, depending on network speed.";
            }
            return (h("stencil-route-link", { url: "/exchange" }, h("header-account-info", { src: "/assets/icon/crypto.svg", header: "Balance", content: this.ethBalance, spinner: this.hasethPendingDepositAmountWei || !this.user.multisigAddress, tooltip: tooltip })));
        };
        Object.defineProperty(HeaderBalance, "is", {
            get: function () { return "header-balance"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeaderBalance, "encapsulation", {
            get: function () { return "shadow"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeaderBalance, "properties", {
            get: function () {
                return {
                    "el": {
                        "elementRef": true
                    },
                    "ethFreeBalanceWei": {
                        "type": Number,
                        "attr": "eth-free-balance-wei"
                    },
                    "ethPendingDepositAmountWei": {
                        "type": Number,
                        "attr": "eth-pending-deposit-amount-wei"
                    },
                    "user": {
                        "type": "Any",
                        "attr": "user",
                        "mutable": true
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeaderBalance, "style", {
            get: function () { return "/**style-placeholder:header-balance:**/"; },
            enumerable: true,
            configurable: true
        });
        return HeaderBalance;
    }());
    __chunk_2.AccountTunnel.injectProps(HeaderBalance, [
        "ethFreeBalanceWei",
        "user",
        "ethPendingDepositAmountWei"
    ]);
    function getUrl(url, root) {
        if (url.charAt(0) == "/" && root.charAt(root.length - 1) == "/") {
            return root.slice(0, root.length - 1) + url;
        }
        return root + url;
    }
    var RouteLink = /** @class */ (function () {
        function RouteLink() {
            this.unsubscribe = function () { return; };
            this.activeClass = "link-active";
            this.exact = false;
            this.strict = true;
            this.custom = "a";
            this.match = null;
        }
        RouteLink.prototype.componentWillLoad = function () {
            this.computeMatch();
        };
        RouteLink.prototype.computeMatch = function () {
            if (this.location) {
                this.match = __chunk_7.matchPath(this.location.pathname, {
                    path: this.urlMatch || this.url,
                    exact: this.exact,
                    strict: this.strict
                });
            }
        };
        RouteLink.prototype.handleClick = function (e) {
            if (__chunk_7.isModifiedEvent(e) || !this.history || !this.url || !this.root) {
                return;
            }
            e.preventDefault();
            return this.history.push(getUrl(this.url, this.root));
        };
        RouteLink.prototype.render = function () {
            var _a;
            var anchorAttributes = {
                class: (_a = {},
                    _a[this.activeClass] = this.match !== null,
                    _a),
                onClick: this.handleClick.bind(this)
            };
            if (this.anchorClass) {
                anchorAttributes.class[this.anchorClass] = true;
            }
            if (this.custom === "a") {
                anchorAttributes = Object.assign({}, anchorAttributes, { href: this.url, title: this.anchorTitle, role: this.anchorRole, tabindex: this.anchorTabIndex, "aria-haspopup": this.ariaHaspopup, id: this.anchorId, "aria-posinset": this.ariaPosinset, "aria-setsize": this.ariaSetsize, "aria-label": this.ariaLabel });
            }
            return (h(this.custom, Object.assign({}, anchorAttributes), h("slot", null)));
        };
        Object.defineProperty(RouteLink, "is", {
            get: function () { return "stencil-route-link"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouteLink, "properties", {
            get: function () {
                return {
                    "activeClass": {
                        "type": String,
                        "attr": "active-class"
                    },
                    "anchorClass": {
                        "type": String,
                        "attr": "anchor-class"
                    },
                    "anchorId": {
                        "type": String,
                        "attr": "anchor-id"
                    },
                    "anchorRole": {
                        "type": String,
                        "attr": "anchor-role"
                    },
                    "anchorTabIndex": {
                        "type": String,
                        "attr": "anchor-tab-index"
                    },
                    "anchorTitle": {
                        "type": String,
                        "attr": "anchor-title"
                    },
                    "ariaHaspopup": {
                        "type": String,
                        "attr": "aria-haspopup"
                    },
                    "ariaLabel": {
                        "type": String,
                        "attr": "aria-label"
                    },
                    "ariaPosinset": {
                        "type": String,
                        "attr": "aria-posinset"
                    },
                    "ariaSetsize": {
                        "type": Number,
                        "attr": "aria-setsize"
                    },
                    "custom": {
                        "type": String,
                        "attr": "custom"
                    },
                    "el": {
                        "elementRef": true
                    },
                    "exact": {
                        "type": Boolean,
                        "attr": "exact"
                    },
                    "history": {
                        "type": "Any",
                        "attr": "history"
                    },
                    "location": {
                        "type": "Any",
                        "attr": "location",
                        "watchCallbacks": ["computeMatch"]
                    },
                    "match": {
                        "state": true
                    },
                    "root": {
                        "type": String,
                        "attr": "root"
                    },
                    "strict": {
                        "type": Boolean,
                        "attr": "strict"
                    },
                    "url": {
                        "type": String,
                        "attr": "url"
                    },
                    "urlMatch": {
                        "type": String,
                        "attr": "url-match"
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        return RouteLink;
    }());
    __chunk_8.ActiveRouter.injectProps(RouteLink, [
        "history",
        "location",
        "root"
    ]);
    exports.HeaderAccountInfo = HeaderAccountInfo;
    exports.HeaderBalance = HeaderBalance;
    exports.StencilRouteLink = RouteLink;
    Object.defineProperty(exports, '__esModule', { value: true });
});
