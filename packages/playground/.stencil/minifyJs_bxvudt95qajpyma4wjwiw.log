var __awaiter = this && this.__awaiter || function(e, t, n, r) {
  return new (n || (n = Promise))(function(o, a) {
    function fulfilled(e) {
      try {
        step(r.next(e));
      } catch (e) {
        a(e);
      }
    }
    function rejected(e) {
      try {
        step(r.throw(e));
      } catch (e) {
        a(e);
      }
    }
    function step(e) {
      e.done ? o(e.value) : new n(function(t) {
        t(e.value);
      }).then(fulfilled, rejected);
    }
    step((r = r.apply(e, t || [])).next());
  });
}, __generator = this && this.__generator || function(e, t) {
  var n, r, o, a, i = {
    label: 0,
    sent: function() {
      if (1 & o[0]) throw o[1];
      return o[1];
    },
    trys: [],
    ops: []
  };
  return a = {
    next: verb(0),
    throw: verb(1),
    return: verb(2)
  }, "function" == typeof Symbol && (a[Symbol.iterator] = function() {
    return this;
  }), a;
  function verb(a) {
    return function(s) {
      return function(a) {
        if (n) throw new TypeError("Generator is already executing.");
        for (;i; ) try {
          if (n = 1, r && (o = 2 & a[0] ? r.return : a[0] ? r.throw || ((o = r.return) && o.call(r), 
          0) : r.next) && !(o = o.call(r, a[1])).done) return o;
          switch (r = 0, o && (a = [ 2 & a[0], o.value ]), a[0]) {
           case 0:
           case 1:
            o = a;
            break;

           case 4:
            return i.label++, {
              value: a[1],
              done: !1
            };

           case 5:
            i.label++, r = a[1], a = [ 0 ];
            continue;

           case 7:
            a = i.ops.pop(), i.trys.pop();
            continue;

           default:
            if (!(o = (o = i.trys).length > 0 && o[o.length - 1]) && (6 === a[0] || 2 === a[0])) {
              i = 0;
              continue;
            }
            if (3 === a[0] && (!o || a[1] > o[0] && a[1] < o[3])) {
              i.label = a[1];
              break;
            }
            if (6 === a[0] && i.label < o[1]) {
              i.label = o[1], o = a;
              break;
            }
            if (o && i.label < o[2]) {
              i.label = o[2], i.ops.push(a);
              break;
            }
            o[2] && i.ops.pop(), i.trys.pop();
            continue;
          }
          a = t.call(e, i);
        } catch (e) {
          a = [ 6, e ], r = 0;
        } finally {
          n = o = 0;
        }
        if (5 & a[0]) throw a[1];
        return {
          value: a[0] ? a[1] : void 0,
          done: !0
        };
      }([ a, s ]);
    };
  }
};

App.loadBundle("/**:bundle-id:**/", [ "exports", "./chunk-346f9d40.js", "./chunk-faed910a.js", "./chunk-cc018d56.js" ], function(e, t, n, r) {
  var o = window.App.h, a = /** @class */ function() {
    function HeaderAccount() {
      var e = this;
      this.network = "", this.error = {
        primary: "",
        secondary: ""
      }, this.web3Detected = !1, this.hasDetectedNetwork = !1, this.metamaskUnlocked = !1, 
      this.networkPermitted = !1, this.user = {}, this.authenticated = !1, this.updateAccount = function(e) {}, 
      this.login = function() {
        return __awaiter(e, void 0, void 0, function() {
          return __generator(this, function(e) {
            return [ 2 /*return*/ , {} ];
          });
        });
      }, this.autoLogin = function() {
        return __awaiter(e, void 0, void 0, function() {
          return __generator(this, function(e) {
            return [ 2 /*return*/ ];
          });
        });
      }, this.hasCorruptStateChannelState = !1, this.authenticationChanged = {}, this.waitMultisigInterval = 0, 
      this.metamaskConfirmationUIOpen = !1;
    }
    return HeaderAccount.prototype.authenticationChangedHandler = function() {
      this.authenticationChanged.emit({
        authenticated: this.authenticated
      });
    }, HeaderAccount.prototype.userChangedHandler = function() {
      this.authenticated = !(!this.user || !this.user.id);
    }, HeaderAccount.prototype.onLoginClicked = function() {
      return __awaiter(this, void 0, void 0, function() {
        var e;
        return __generator(this, function(t) {
          switch (t.label) {
           case 0:
            this.removeError(), this.metamaskConfirmationUIOpen = !0, t.label = 1;

           case 1:
            return t.trys.push([ 1, 3, 4, 5 ]), e = this, [ 4 /*yield*/ , this.login() ];

           case 2:
            return e.user = t.sent(), [ 3 /*break*/ , 5 ];

           case 3:
            return t.sent(), this.displayLoginError(), [ 3 /*break*/ , 5 ];

           case 4:
            return this.metamaskConfirmationUIOpen = !1, [ 7 /*endfinally*/ ];

           case 5:
            return [ 2 /*return*/ ];
          }
        });
      });
    }, HeaderAccount.prototype.onConnectMetamask = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(e) {
          switch (e.label) {
           case 0:
            this.metamaskConfirmationUIOpen = !0, e.label = 1;

           case 1:
            return e.trys.push([ 1, 3, 4, 5 ]), [ 4 /*yield*/ , window.ethereum.enable() ];

           case 2:
            return e.sent(), [ 3 /*break*/ , 5 ];

           case 3:
            return e.sent(), console.error("Was not able to call `window.ethereum.enable()`"), 
            window.alert("Your browser does not support enabling your wallet programatically. Please unlock your Web3 wallet and try again."), 
            [ 3 /*break*/ , 5 ];

           case 4:
            return this.metamaskConfirmationUIOpen = !1, [ 7 /*endfinally*/ ];

           case 5:
            return [ 2 /*return*/ ];
          }
        });
      });
    }, HeaderAccount.prototype.componentWillLoad = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(e) {
          switch (e.label) {
           case 0:
            return HeaderAccount.busy ? [ 2 /*return*/ ] : [ 4 /*yield*/ , this.autoLogin() ];

           case 1:
            return e.sent(), HeaderAccount.busy = !0, [ 2 /*return*/ ];
          }
        });
      });
    }, HeaderAccount.prototype.componentDidUnload = function() {
      HeaderAccount.busy = !1;
    }, HeaderAccount.prototype.displayLoginError = function() {
      this.updateAccount({
        error: {
          primary: "Login Failed",
          secondary: "You may not have a Playground account yet. Try registering."
        }
      }), setTimeout(this.removeError.bind(this), 5e3);
    }, HeaderAccount.prototype.removeError = function() {
      this.updateAccount({
        error: null
      });
    }, HeaderAccount.prototype.render = function() {
      if (this.hasDetectedNetwork) return this.web3Detected ? this.networkPermitted ? this.metamaskUnlocked ? this.hasCorruptStateChannelState ? o("div", {
        class: "account-container"
      }, o("widget-error-message", null), o("div", {
        class: "message-container"
      }, "Corrupt State")) : o("div", {
        class: "account-container"
      }, this.authenticated ? o("div", {
        class: "info-container"
      }, o("header-balance", null), o("stencil-route-link", {
        url: "/account"
      }, o("header-account-info", {
        src: "/assets/icon/account.svg",
        header: "Account",
        content: this.user.username
      }))) : o("div", {
        class: "btn-container"
      }, this.error ? o("button", {
        onClick: this.onLoginClicked.bind(this),
        class: "btn btn-error"
      }, o("widget-tooltip", {
        message: this.error.secondary
      }, o("div", {
        class: "widget-error-message"
      }, o("img", {
        class: "icon",
        src: "/assets/icon/error.svg"
      }), this.error.primary))) : o("button", {
        onClick: this.onLoginClicked.bind(this),
        class: "btn",
        disabled: this.metamaskConfirmationUIOpen
      }, o("svg", {
        class: "icon login",
        viewBox: "0 0 32 32"
      }, o("g", null, o("path", {
        d: "M27,3V29a1,1,0,0,1-1,1H6a1,1,0,0,1-1-1V27H7v1H25V4H7V7H5V3A1,1,0,0,1,6,2H26A1,1,0,0,1,27,3ZM12.29,20.29l1.42,1.42,5-5a1,1,0,0,0,0-1.42l-5-5-1.42,1.42L15.59,15H5v2H15.59Z",
        id: "login_account_enter_door"
      }))), this.metamaskConfirmationUIOpen ? "Check Wallet..." : "Login"), o("stencil-route-link", {
        url: "/register"
      }, o("button", {
        class: "btn btn-alternate"
      }, o("svg", {
        class: "icon register",
        viewBox: "0 0 48 48"
      }, o("g", null, o("path", {
        d: "M24,26c6.6,0,12-5.4,12-12S30.6,2,24,2c-6.6,0-12,5.4-12,12S17.4,26,24,26z M24,4c5.5,0,10,4.5,10,10s-4.5,10-10,10   c-5.5,0-10-4.5-10-10S18.5,4,24,4z"
      }), o("path", {
        d: "M33,28H15C7.8,28,2,33.8,2,41v5h2v-5c0-6.1,4.9-11,11-11h18V28z"
      }), o("polygon", {
        points: "46,38 40,38 40,32 38,32 38,38 32,38 32,40 38,40 38,46 40,46 40,40 46,40  "
      }))), "Register")))) : o("div", {
        class: "account-container"
      }, o("widget-error-message", null), o("div", {
        class: "btn-container"
      }, o("button", {
        disabled: this.metamaskConfirmationUIOpen,
        onClick: this.onConnectMetamask.bind(this),
        class: "btn btn--connect-to-wallet"
      }, o("svg", {
        class: "icon wallet",
        "enable-background": "new 0 0 50 50",
        viewBox: "0 0 50 50"
      }, o("rect", {
        fill: "none",
        height: "50",
        width: "50"
      }), o("path", {
        d: "  M40,14c0,0-25.397,0-30,0c-3.076,0-5,3-5,5v21.384C5,42.934,7.066,45,9.616,45h30.768C42.933,45,45,42.934,45,40.384V18.846  C45,16.299,42.549,14,40,14z",
        fill: "none",
        stroke: "#000000",
        "stroke-linecap": "round",
        "stroke-linejoin": "round",
        "stroke-miterlimit": "10",
        "stroke-width": "2"
      }), o("path", {
        d: "M37,11V7.658  c0-3.331-0.719-4.292-4.852-3.202c-3.036,0.801-20.801,5.726-20.801,5.726c-5.471,2.062-6.306,3.817-6.306,7.816L5,20.453",
        fill: "none",
        stroke: "#000000",
        "stroke-linejoin": "round",
        "stroke-miterlimit": "10",
        "stroke-width": "2"
      }), o("path", {
        d: "M38.502,32C37.121,32,36,30.882,36,29.501S37.121,27,38.502,27C39.879,27,41,28.12,41,29.501S39.879,32,38.502,32z"
      })), this.metamaskConfirmationUIOpen ? "Check Wallet..." : "Connect to Wallet"))) : o("div", {
        class: "account-container"
      }, o("widget-error-message", null), o("div", {
        class: "message-container"
      }, "Wrong Network")) : o("div", {
        class: "account-container"
      }, o("widget-error-message", null), o("div", {
        class: "message-container"
      }, "No Ethereum Connection"));
    }, Object.defineProperty(HeaderAccount, "is", {
      get: function() {
        return "header-account";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(HeaderAccount, "encapsulation", {
      get: function() {
        return "shadow";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(HeaderAccount, "properties", {
      get: function() {
        return {
          authenticated: {
            type: Boolean,
            attr: "authenticated",
            mutable: !0,
            watchCallbacks: [ "authenticationChangedHandler" ]
          },
          autoLogin: {
            type: "Any",
            attr: "auto-login"
          },
          el: {
            elementRef: !0
          },
          error: {
            type: "Any",
            attr: "error"
          },
          hasCorruptStateChannelState: {
            type: Boolean,
            attr: "has-corrupt-state-channel-state"
          },
          hasDetectedNetwork: {
            type: Boolean,
            attr: "has-detected-network"
          },
          login: {
            type: "Any",
            attr: "login"
          },
          metamaskConfirmationUIOpen: {
            state: !0
          },
          metamaskUnlocked: {
            type: Boolean,
            attr: "metamask-unlocked"
          },
          network: {
            type: String,
            attr: "network"
          },
          networkPermitted: {
            type: Boolean,
            attr: "network-permitted"
          },
          updateAccount: {
            type: "Any",
            attr: "update-account"
          },
          user: {
            type: "Any",
            attr: "user",
            mutable: !0,
            watchCallbacks: [ "userChangedHandler" ]
          },
          waitMultisigInterval: {
            state: !0
          },
          web3Detected: {
            type: Boolean,
            attr: "web-3-detected"
          }
        };
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(HeaderAccount, "events", {
      get: function() {
        return [ {
          name: "authenticationChanged",
          method: "authenticationChanged",
          bubbles: !0,
          cancelable: !0,
          composed: !0
        } ];
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(HeaderAccount, "style", {
      get: function() {
        return "/**style-placeholder:header-account:**/";
      },
      enumerable: !0,
      configurable: !0
    }), HeaderAccount;
  }();
  a.busy = !1, n.AccountTunnel.injectProps(a, [ "user", "error", "updateAccount", "login", "autoLogin", "hasCorruptStateChannelState" ]), 
  r.WalletTunnel.injectProps(a, [ "network", "web3Detected", "networkPermitted", "metamaskUnlocked", "hasDetectedNetwork" ]);
  var i = /** @class */ function() {
    function WidgetErrorMessage() {
      this.error = {};
    }
    return WidgetErrorMessage.prototype.render = function() {
      return this.error ? o("widget-tooltip", {
        message: this.error.secondary
      }, o("div", {
        class: "widget-error-message"
      }, this.error.primary)) : void 0;
    }, Object.defineProperty(WidgetErrorMessage, "is", {
      get: function() {
        return "widget-error-message";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(WidgetErrorMessage, "encapsulation", {
      get: function() {
        return "shadow";
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(WidgetErrorMessage, "properties", {
      get: function() {
        return {
          el: {
            elementRef: !0
          },
          error: {
            type: "Any",
            attr: "error"
          }
        };
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(WidgetErrorMessage, "style", {
      get: function() {
        return "/**style-placeholder:widget-error-message:**/";
      },
      enumerable: !0,
      configurable: !0
    }), WidgetErrorMessage;
  }();
  n.AccountTunnel.injectProps(i, [ "error" ]), e.HeaderAccount = a, e.WidgetErrorMessage = i, 
  Object.defineProperty(e, "__esModule", {
    value: !0
  });
});