var t, e, o;

window, function(t) {
  t[t.TWO_PARTY_FIXED_OUTCOME = 0] = "TWO_PARTY_FIXED_OUTCOME", t[t.COIN_TRANSFER = 1] = "COIN_TRANSFER";
}(t || (t = {})), function(t) {
  t[t.SEND_TO_ADDR_ONE = 0] = "SEND_TO_ADDR_ONE", t[t.SEND_TO_ADDR_TWO = 1] = "SEND_TO_ADDR_TWO", 
  t[t.SPLIT_AND_SEND_TO_BOTH_ADDRS = 2] = "SPLIT_AND_SEND_TO_BOTH_ADDRS";
}(e || (e = {})), function(t) {
  let e, o, n, s;
  !function(t) {
    t.ERROR = "error";
  }(e = t.ErrorType || (t.ErrorType = {})), function(t) {
    t.ACCEPT_STATE = "acceptState", t.CREATE_CHANNEL = "createChannel", t.DEPOSIT = "deposit", 
    t.GET_APP_INSTANCE_DETAILS = "getAppInstanceDetails", t.GET_APP_INSTANCES = "getAppInstances", 
    t.GET_CHANNEL_ADDRESSES = "getChannelAddresses", t.GET_STATE_DEPOSIT_HOLDER_ADDRESS = "getStateDepositHolderAddress", 
    t.GET_FREE_BALANCE_STATE = "getFreeBalanceState", t.GET_PROPOSED_APP_INSTANCE = "getProposedAppInstance", 
    t.GET_PROPOSED_APP_INSTANCES = "getProposedAppInstances", t.GET_STATE = "getState", 
    t.GET_STATE_CHANNEL = "getStateChannel", t.INSTALL = "install", t.INSTALL_VIRTUAL = "installVirtual", 
    t.PROPOSE_INSTALL = "proposeInstall", t.PROPOSE_INSTALL_VIRTUAL = "proposeInstallVirtual", 
    t.PROPOSE_STATE = "proposeState", t.REJECT_INSTALL = "rejectInstall", t.REJECT_STATE = "rejectState", 
    t.UPDATE_STATE = "updateState", t.TAKE_ACTION = "takeAction", t.UNINSTALL = "uninstall", 
    t.UNINSTALL_VIRTUAL = "uninstallVirtual", t.WITHDRAW = "withdraw";
  }(o = t.MethodName || (t.MethodName = {})), function(t) {
    t.CREATE_CHANNEL = "chan_create", t.DEPOSIT = "chan_deposit", t.GET_APP_INSTANCE_DETAILS = "chan_getAppInstance", 
    t.GET_APP_INSTANCES = "chan_getAppInstances", t.GET_STATE_DEPOSIT_HOLDER_ADDRESS = "chan_getStateDepositHolderAddress", 
    t.GET_FREE_BALANCE_STATE = "chan_getFreeBalanceState", t.GET_PROPOSED_APP_INSTANCES = "chan_getProposedAppInstances", 
    t.GET_STATE = "chan_getState", t.INSTALL = "chan_install", t.INSTALL_VIRTUAL = "chan_installVirtual", 
    t.PROPOSE_INSTALL = "chan_proposeInstall", t.PROPOSE_INSTALL_VIRTUAL = "chan_proposeInstallVirtual", 
    t.PROPOSE_STATE = "chan_proposeState", t.REJECT_INSTALL = "chan_rejectInstall", 
    t.REJECT_STATE = "chan_rejectState", t.UPDATE_STATE = "chan_updateState", t.TAKE_ACTION = "chan_takeAction", 
    t.UNINSTALL = "chan_uninstall", t.UNINSTALL_VIRTUAL = "chan_uninstallVirtual", t.WITHDRAW = "chan_withdraw";
  }(n = t.RpcMethodName || (t.RpcMethodName = {})), function(t) {
    t.COUNTER_DEPOSIT_CONFIRMED = "counterDepositConfirmed", t.CREATE_CHANNEL = "createChannelEvent", 
    t.DEPOSIT_CONFIRMED = "depositConfirmedEvent", t.DEPOSIT_FAILED = "depositFailed", 
    t.DEPOSIT_STARTED = "depositStartedEvent", t.INSTALL = "installEvent", t.INSTALL_VIRTUAL = "installVirtualEvent", 
    t.PROPOSE_STATE = "proposeStateEvent", t.REJECT_INSTALL = "rejectInstallEvent", 
    t.REJECT_STATE = "rejectStateEvent", t.UNINSTALL = "uninstallEvent", t.UNINSTALL_VIRTUAL = "uninstallVirtualEvent", 
    t.UPDATE_STATE = "updateStateEvent", t.WITHDRAWAL_CONFIRMED = "withdrawalConfirmedEvent", 
    t.WITHDRAWAL_FAILED = "withdrawalFailed", t.WITHDRAWAL_STARTED = "withdrawalStartedEvent", 
    t.PROPOSE_INSTALL = "proposeInstallEvent", t.PROPOSE_INSTALL_VIRTUAL = "proposeInstallVirtualEvent", 
    t.PROTOCOL_MESSAGE_EVENT = "protocolMessageEvent", t.WITHDRAW_EVENT = "withdrawEvent", 
    t.REJECT_INSTALL_VIRTUAL = "rejectInstallVirtualEvent";
  }(s = t.EventName || (t.EventName = {}));
}(o || (o = {}));

class n {
  static getInstance() {
    return n.node;
  }
  static getCfProvider() {
    return n.cfProvider;
  }
  static async create(t) {
    return n.node ? n.node : (n.node = await Node.create(t.messagingService, t.storeService, t.nodeConfig, new window.ethers.providers.Web3Provider(window.web3.currentProvider), t.network), 
    await this.setupNodeProvider(), n.getInstance());
  }
  static async setupNodeProvider() {
    this.node.on(o.MethodName.PROPOSE_INSTALL_VIRTUAL, this.postToPort.bind(this)), 
    this.node.on(o.MethodName.INSTALL_VIRTUAL, this.postToPort.bind(this)), this.node.on(o.MethodName.REJECT_INSTALL, this.postToPort.bind(this)), 
    this.node.on(o.MethodName.DEPOSIT, this.postToPort.bind(this)), this.node.on(o.MethodName.WITHDRAW, this.postToPort.bind(this)), 
    this.node.on(o.MethodName.GET_FREE_BALANCE_STATE, this.postToPort.bind(this)), this.node.on(o.EventName.CREATE_CHANNEL, this.postToPort.bind(this)), 
    this.node.on(o.RpcMethodName.PROPOSE_INSTALL_VIRTUAL, this.postToJsonRpcPort.bind(this)), 
    this.node.on(o.RpcMethodName.INSTALL_VIRTUAL, this.postToJsonRpcPort.bind(this)), 
    this.node.on(o.RpcMethodName.REJECT_INSTALL, this.postToJsonRpcPort.bind(this)), 
    this.node.on(o.RpcMethodName.DEPOSIT, this.postToJsonRpcPort.bind(this)), this.node.on(o.EventName.DEPOSIT_CONFIRMED, this.postToJsonRpcPort.bind(this)), 
    this.node.on(o.RpcMethodName.WITHDRAW, this.postToJsonRpcPort.bind(this)), this.node.on(o.RpcMethodName.GET_FREE_BALANCE_STATE, this.postToJsonRpcPort.bind(this)), 
    this.node.on(o.RpcMethodName.CREATE_CHANNEL, this.postToJsonRpcPort.bind(this)), 
    window.addEventListener("message", t => {
      if ("cf-node-provider:init" === t.data) {
        const {port2: t} = this.configureMessagePorts();
        window.postMessage("cf-node-provider:port", "*", [ t ]);
      }
    }), this.nodeProvider = new cfWallet.NodeProvider(), await this.nodeProvider.connect(), 
    this.cfProvider = this.createCfProvider();
  }
  static configureMessagePorts() {
    const t = new MessageChannel();
    return this.port = t.port1, this.port.addEventListener("message", t => {
      const e = t.data;
      e.methodName && e.parameters ? this.relayJsonRpcMessage(e) : this.relayMessage(t);
    }), this.port.start(), t;
  }
  static relayMessage(t) {
    this.node.emit(t.data.methodName, t.data);
  }
  static relayJsonRpcMessage(t) {
    this.node.rpcRouter.dispatch(t);
  }
  static postToPort(t) {
    this.port.postMessage(t);
  }
  static postToJsonRpcPort(t) {
    this.port.postMessage(t);
  }
  static createCfProvider() {
    return new cfWallet.Provider(this.nodeProvider);
  }
}

export { n as a, o as b };