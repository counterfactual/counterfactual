import * as tslib_1 from "tslib";
import { h } from '../app.core.js';
import './chunk-deed3e85.js';
import { a as AccountTunnel } from './chunk-dfef6d51.js';
import { a as AppRegistryTunnel } from './chunk-868ccbc3.js';
import { a as CounterfactualNode } from './chunk-515d15f9.js';
import { a as PlaygroundAPIClient } from './chunk-adf5a5b1.js';
var DappContainer = /** @class */ (function () {
    function DappContainer() {
        var _this = this;
        this.match = {};
        this.history = {};
        this.url = "";
        this.apps = [];
        this.user = {};
        this.ethMultisigBalance = window["ethers"].constants.Zero;
        this.getBalances = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, undefined];
        }); }); };
        this.frameWindow = null;
        this.port = null;
        this.eventEmitter = new EventEmitter();
        this.messageQueue = [];
        this.iframe = {};
        this.node = CounterfactualNode.getInstance();
        this.$onMessage = function () { };
    }
    DappContainer.prototype.render = function () {
        return (h("node-listener", { history: this.history }, h("layout-header", null)));
    };
    DappContainer.prototype.getDapp = function () {
        var dappSlug = this.match.params.dappName;
        var dapp = this.apps.find(function (app) { return app.slug === dappSlug; });
        return dapp;
    };
    DappContainer.prototype.getDappUrl = function () {
        var dapp = this.getDapp();
        var dappState = new URLSearchParams(window.location.search).get("dappState") || "";
        if (!dapp) {
            return "";
        }
        return "" + dapp.url + dappState;
    };
    DappContainer.prototype.componentDidLoad = function () {
        this.url = this.getDappUrl();
        this.node.on("proposeInstallVirtual", this.postOrQueueMessage.bind(this));
        this.node.on("installVirtualEvent", this.postOrQueueMessage.bind(this));
        this.node.on("getAppInstanceDetails", this.postOrQueueMessage.bind(this));
        this.node.on("getState", this.postOrQueueMessage.bind(this));
        this.node.on("takeAction", this.postOrQueueMessage.bind(this));
        this.node.on("updateStateEvent", this.postOrQueueMessage.bind(this));
        this.node.on("uninstallEvent", this.postOrQueueMessage.bind(this));
        this.node.on("protocolMessageEvent", this.getBalances.bind(this));
        var element = this.element.shadowRoot;
        var iframe = document.createElement("iframe");
        iframe.src = this.url;
        element.appendChild(iframe);
        this.frameWindow = iframe.contentWindow;
        this.$onMessage = this.configureMessageChannel.bind(this);
        window.addEventListener("message", this.$onMessage);
        window.addEventListener("message", this.handlePlaygroundMessage.bind(this));
        this.iframe = iframe;
    };
    DappContainer.prototype.componentDidUnload = function () {
        if (this.frameWindow) {
            this.frameWindow = null;
        }
        this.eventEmitter.off("message");
        if (this.port) {
            this.port.close();
            this.port = null;
        }
        this.iframe.remove();
    };
    DappContainer.prototype.handlePlaygroundMessage = function (event) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, data, searchParams, newURL;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.frameWindow || typeof event.data !== "string") {
                            return [2 /*return*/];
                        }
                        if (!(event.data === "playground:request:user")) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.sendResponseForRequestUser(this.frameWindow)];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        if (!(event.data === "playground:request:matchmake")) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.sendResponseForMatchmakeRequest(this.frameWindow)];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        if (!(event.data === "playground:request:appInstance")) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.sendResponseForAppInstance(this.frameWindow)];
                    case 5:
                        _b.sent();
                        _b.label = 6;
                    case 6:
                        if (!(event.data === "playground:request:getBalances")) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.sendResponseForGetBalances(this.frameWindow)];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8:
                        if (event.data.startsWith("playground:send:dappRoute")) {
                            _a = event.data.split("|"), data = _a[1];
                            searchParams = new URLSearchParams(window.location.search);
                            searchParams.set("dappState", data);
                            newURL = window.location.pathname + "?" + searchParams.toString();
                            history.pushState(null, "", newURL);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(DappContainer.prototype, "token", {
        get: function () {
            return window.localStorage.getItem("playground:user:token");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DappContainer.prototype, "matchmakeWith", {
        get: function () {
            return window.localStorage.getItem("playground:matchmakeWith");
        },
        enumerable: true,
        configurable: true
    });
    DappContainer.prototype.sendResponseForRequestUser = function (frameWindow) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                frameWindow.postMessage("playground:response:user|" + JSON.stringify({
                    user: Object.assign({}, this.user, { token: this.token }),
                    balance: this.ethMultisigBalance
                        ? window["ethers"].utils.formatEther(this.ethMultisigBalance)
                        : "0"
                }), "*");
                return [2 /*return*/];
            });
        });
    };
    DappContainer.prototype.getBotName = function () {
        var bots = {
            "high-roller": "HighRollerBot",
            "tic-tac-toe": "TicTacToeBot"
        };
        return bots[this.getDapp().slug];
    };
    DappContainer.prototype.sendResponseForMatchmakeRequest = function (frameWindow) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var json, response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, PlaygroundAPIClient.matchmake(this.token, this.matchmakeWith || this.getBotName())];
                    case 1:
                        json = _a.sent();
                        response = JSON.stringify(json);
                        window.localStorage.setItem("playground:lastMatchmake", response);
                        frameWindow.postMessage("playground:response:matchmake|" + response, "*");
                        return [2 /*return*/];
                }
            });
        });
    };
    DappContainer.prototype.postOrQueueMessage = function (message) {
        if (this.port) {
            this.port.postMessage(message);
        }
        else {
            this.queueMessage(message);
        }
    };
    DappContainer.prototype.configureMessageChannel = function (event) {
        if (!this.frameWindow) {
            return;
        }
        if (event.data === "cf-node-provider:init") {
            var port2 = this.configureMessagePorts().port2;
            this.frameWindow.postMessage("cf-node-provider:port", "*", [port2]);
        }
        if (event.data === "cf-node-provider:ready") {
            this.flushMessageQueue();
            window.removeEventListener("message", this.$onMessage);
        }
    };
    DappContainer.prototype.configureMessagePorts = function () {
        var channel = new MessageChannel();
        this.port = channel.port1;
        this.port.addEventListener("message", this.relayMessage.bind(this));
        this.port.start();
        return channel;
    };
    DappContainer.prototype.relayMessage = function (event) {
        this.node.rpcRouter.dispatch(Object.assign({}, event.data));
    };
    DappContainer.prototype.queueMessage = function (message) {
        this.messageQueue.push(message);
    };
    DappContainer.prototype.flushMessageQueue = function () {
        if (!this.port) {
            return;
        }
        var message;
        while ((message = this.messageQueue.shift())) {
            this.port.postMessage(message);
        }
    };
    DappContainer.prototype.sendResponseForAppInstance = function (frameWindow) {
        var dappInstallationRequest = window.localStorage.getItem("playground:installingDapp");
        if (!frameWindow || !dappInstallationRequest) {
            return;
        }
        var installedApp = JSON.parse(dappInstallationRequest).installedApp;
        frameWindow.postMessage("playground:response:appInstance|" + (installedApp ? JSON.stringify(installedApp) : ""), "*");
        if (installedApp) {
            console.log("Playground sent appInstance", JSON.stringify(installedApp));
        }
        window.localStorage.removeItem("playground:installingDapp");
    };
    DappContainer.prototype.sendResponseForGetBalances = function (frameWindow) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var balances;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBalances()];
                    case 1:
                        balances = _a.sent();
                        frameWindow.postMessage("playground:response:getBalances|" + JSON.stringify(balances), "*");
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(DappContainer, "is", {
        get: function () { return "dapp-container"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DappContainer, "encapsulation", {
        get: function () { return "shadow"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DappContainer, "properties", {
        get: function () {
            return {
                "apps": {
                    "type": "Any",
                    "attr": "apps"
                },
                "element": {
                    "elementRef": true
                },
                "ethMultisigBalance": {
                    "type": "Any",
                    "attr": "eth-multisig-balance"
                },
                "getBalances": {
                    "type": "Any",
                    "attr": "get-balances"
                },
                "history": {
                    "type": "Any",
                    "attr": "history"
                },
                "match": {
                    "type": "Any",
                    "attr": "match"
                },
                "url": {
                    "type": String,
                    "attr": "url",
                    "mutable": true
                },
                "user": {
                    "type": "Any",
                    "attr": "user"
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DappContainer, "style", {
        get: function () { return "/**style-placeholder:dapp-container:**/"; },
        enumerable: true,
        configurable: true
    });
    return DappContainer;
}());
AppRegistryTunnel.injectProps(DappContainer, ["apps"]);
AccountTunnel.injectProps(DappContainer, [
    "ethMultisigBalance",
    "getBalances",
    "user"
]);
export { DappContainer };
