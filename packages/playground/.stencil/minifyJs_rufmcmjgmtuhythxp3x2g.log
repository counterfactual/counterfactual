const t = window.App.h;

import "./chunk-deed3e85.js";

import { a as e } from "./chunk-dfef6d51.js";

import { a } from "./chunk-a343ce23.js";

class n {
  constructor() {
    this.network = "", this.error = {
      primary: "",
      secondary: ""
    }, this.web3Detected = !1, this.hasDetectedNetwork = !1, this.metamaskUnlocked = !1, 
    this.networkPermitted = !1, this.user = {}, this.authenticated = !1, this.updateAccount = (t => {}), 
    this.login = (async () => ({})), this.autoLogin = (async () => {}), this.hasCorruptStateChannelState = !1, 
    this.authenticationChanged = {}, this.waitMultisigInterval = 0, this.metamaskConfirmationUIOpen = !1;
  }
  authenticationChangedHandler() {
    this.authenticationChanged.emit({
      authenticated: this.authenticated
    });
  }
  userChangedHandler() {
    this.authenticated = !(!this.user || !this.user.id);
  }
  async onLoginClicked() {
    this.removeError(), this.metamaskConfirmationUIOpen = !0;
    try {
      this.user = await this.login();
    } catch (t) {
      this.displayLoginError();
    } finally {
      this.metamaskConfirmationUIOpen = !1;
    }
  }
  async onConnectMetamask() {
    this.metamaskConfirmationUIOpen = !0;
    try {
      await window.ethereum.enable();
    } catch (t) {
      console.error("Was not able to call `window.ethereum.enable()`"), window.alert("Your browser does not support enabling your wallet programatically. Please unlock your Web3 wallet and try again.");
    } finally {
      this.metamaskConfirmationUIOpen = !1;
    }
  }
  async componentWillLoad() {
    n.busy || (await this.autoLogin(), n.busy = !0);
  }
  componentDidUnload() {
    n.busy = !1;
  }
  displayLoginError() {
    this.updateAccount({
      error: {
        primary: "Login Failed",
        secondary: "You may not have a Playground account yet. Try registering."
      }
    }), setTimeout(this.removeError.bind(this), 5e3);
  }
  removeError() {
    this.updateAccount({
      error: null
    });
  }
  render() {
    if (this.hasDetectedNetwork) return this.web3Detected ? this.networkPermitted ? this.metamaskUnlocked ? this.hasCorruptStateChannelState ? t("div", {
      class: "account-container"
    }, t("widget-error-message", null), t("div", {
      class: "message-container"
    }, "Corrupt State")) : t("div", {
      class: "account-container"
    }, this.authenticated ? t("div", {
      class: "info-container"
    }, t("header-balance", null), t("stencil-route-link", {
      url: "/account"
    }, t("header-account-info", {
      src: "/assets/icon/account.svg",
      header: "Account",
      content: this.user.username
    }))) : t("div", {
      class: "btn-container"
    }, this.error ? t("button", {
      onClick: this.onLoginClicked.bind(this),
      class: "btn btn-error"
    }, t("widget-tooltip", {
      message: this.error.secondary
    }, t("div", {
      class: "widget-error-message"
    }, t("img", {
      class: "icon",
      src: "/assets/icon/error.svg"
    }), this.error.primary))) : t("button", {
      onClick: this.onLoginClicked.bind(this),
      class: "btn",
      disabled: this.metamaskConfirmationUIOpen
    }, t("svg", {
      class: "icon login",
      viewBox: "0 0 32 32"
    }, t("g", null, t("path", {
      d: "M27,3V29a1,1,0,0,1-1,1H6a1,1,0,0,1-1-1V27H7v1H25V4H7V7H5V3A1,1,0,0,1,6,2H26A1,1,0,0,1,27,3ZM12.29,20.29l1.42,1.42,5-5a1,1,0,0,0,0-1.42l-5-5-1.42,1.42L15.59,15H5v2H15.59Z",
      id: "login_account_enter_door"
    }))), this.metamaskConfirmationUIOpen ? "Check Wallet..." : "Login"), t("stencil-route-link", {
      url: "/register"
    }, t("button", {
      class: "btn btn-alternate"
    }, t("svg", {
      class: "icon register",
      viewBox: "0 0 48 48"
    }, t("g", null, t("path", {
      d: "M24,26c6.6,0,12-5.4,12-12S30.6,2,24,2c-6.6,0-12,5.4-12,12S17.4,26,24,26z M24,4c5.5,0,10,4.5,10,10s-4.5,10-10,10   c-5.5,0-10-4.5-10-10S18.5,4,24,4z"
    }), t("path", {
      d: "M33,28H15C7.8,28,2,33.8,2,41v5h2v-5c0-6.1,4.9-11,11-11h18V28z"
    }), t("polygon", {
      points: "46,38 40,38 40,32 38,32 38,38 32,38 32,40 38,40 38,46 40,46 40,40 46,40  "
    }))), "Register")))) : t("div", {
      class: "account-container"
    }, t("widget-error-message", null), t("div", {
      class: "btn-container"
    }, t("button", {
      disabled: this.metamaskConfirmationUIOpen,
      onClick: this.onConnectMetamask.bind(this),
      class: "btn btn--connect-to-wallet"
    }, t("svg", {
      class: "icon wallet",
      "enable-background": "new 0 0 50 50",
      viewBox: "0 0 50 50"
    }, t("rect", {
      fill: "none",
      height: "50",
      width: "50"
    }), t("path", {
      d: "  M40,14c0,0-25.397,0-30,0c-3.076,0-5,3-5,5v21.384C5,42.934,7.066,45,9.616,45h30.768C42.933,45,45,42.934,45,40.384V18.846  C45,16.299,42.549,14,40,14z",
      fill: "none",
      stroke: "#000000",
      "stroke-linecap": "round",
      "stroke-linejoin": "round",
      "stroke-miterlimit": "10",
      "stroke-width": "2"
    }), t("path", {
      d: "M37,11V7.658  c0-3.331-0.719-4.292-4.852-3.202c-3.036,0.801-20.801,5.726-20.801,5.726c-5.471,2.062-6.306,3.817-6.306,7.816L5,20.453",
      fill: "none",
      stroke: "#000000",
      "stroke-linejoin": "round",
      "stroke-miterlimit": "10",
      "stroke-width": "2"
    }), t("path", {
      d: "M38.502,32C37.121,32,36,30.882,36,29.501S37.121,27,38.502,27C39.879,27,41,28.12,41,29.501S39.879,32,38.502,32z"
    })), this.metamaskConfirmationUIOpen ? "Check Wallet..." : "Connect to Wallet"))) : t("div", {
      class: "account-container"
    }, t("widget-error-message", null), t("div", {
      class: "message-container"
    }, "Wrong Network")) : t("div", {
      class: "account-container"
    }, t("widget-error-message", null), t("div", {
      class: "message-container"
    }, "No Ethereum Connection"));
  }
  static get is() {
    return "header-account";
  }
  static get encapsulation() {
    return "shadow";
  }
  static get properties() {
    return {
      authenticated: {
        type: Boolean,
        attr: "authenticated",
        mutable: !0,
        watchCallbacks: [ "authenticationChangedHandler" ]
      },
      autoLogin: {
        type: "Any",
        attr: "auto-login"
      },
      el: {
        elementRef: !0
      },
      error: {
        type: "Any",
        attr: "error"
      },
      hasCorruptStateChannelState: {
        type: Boolean,
        attr: "has-corrupt-state-channel-state"
      },
      hasDetectedNetwork: {
        type: Boolean,
        attr: "has-detected-network"
      },
      login: {
        type: "Any",
        attr: "login"
      },
      metamaskConfirmationUIOpen: {
        state: !0
      },
      metamaskUnlocked: {
        type: Boolean,
        attr: "metamask-unlocked"
      },
      network: {
        type: String,
        attr: "network"
      },
      networkPermitted: {
        type: Boolean,
        attr: "network-permitted"
      },
      updateAccount: {
        type: "Any",
        attr: "update-account"
      },
      user: {
        type: "Any",
        attr: "user",
        mutable: !0,
        watchCallbacks: [ "userChangedHandler" ]
      },
      waitMultisigInterval: {
        state: !0
      },
      web3Detected: {
        type: Boolean,
        attr: "web-3-detected"
      }
    };
  }
  static get events() {
    return [ {
      name: "authenticationChanged",
      method: "authenticationChanged",
      bubbles: !0,
      cancelable: !0,
      composed: !0
    } ];
  }
  static get style() {
    return "/**style-placeholder:header-account:**/";
  }
}

n.busy = !1, e.injectProps(n, [ "user", "error", "updateAccount", "login", "autoLogin", "hasCorruptStateChannelState" ]), 
a.injectProps(n, [ "network", "web3Detected", "networkPermitted", "metamaskUnlocked", "hasDetectedNetwork" ]);

class r {
  constructor() {
    this.error = {};
  }
  render() {
    return this.error ? t("widget-tooltip", {
      message: this.error.secondary
    }, t("div", {
      class: "widget-error-message"
    }, this.error.primary)) : void 0;
  }
  static get is() {
    return "widget-error-message";
  }
  static get encapsulation() {
    return "shadow";
  }
  static get properties() {
    return {
      el: {
        elementRef: !0
      },
      error: {
        type: "Any",
        attr: "error"
      }
    };
  }
  static get style() {
    return "/**style-placeholder:widget-error-message:**/";
  }
}

e.injectProps(r, [ "error" ]);

export { n as HeaderAccount, r as WidgetErrorMessage };