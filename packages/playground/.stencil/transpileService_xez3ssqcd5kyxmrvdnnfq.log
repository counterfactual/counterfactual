{"moduleFile":{"sourceFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/components/account/account-register/account-register.tsx","localImports":["/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/account","/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/counterfactual","/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/playground-api-client","/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/wallet"],"externalImports":["@stencil/core","@stencil/router","ethers"],"potentialCmpRefs":[{"tag":"stencil-router-redirect"},{"tag":"widget-screen"},{"tag":"form-container"},{"tag":"form-input"},{"tag":"form-button"}],"cmpMeta":{"tagNameMeta":"account-register","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/components/account/account-register/account-register.scss","cmpRelativePath":"account-register.scss","originalComponentPath":"account-register.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"AccountRegister","tags":[],"documentation":"","type":"typeof AccountRegister"},"encapsulationMeta":1,"componentClass":"AccountRegister","membersMeta":{"el":{"memberType":64},"errors":{"memberType":16},"stage":{"memberType":16},"connected":{"memberType":1,"attribName":"connected","attribType":{"text":"boolean","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":4,"jsdoc":{"name":"connected","tags":[],"documentation":"","type":"boolean","default":"false"}},"user":{"memberType":1,"attribName":"user","attribType":{"text":"UserSession","required":false,"optional":false,"typeReferences":{"UserSession":{"referenceLocation":"import","importReferenceLocation":"../../../types"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"user","tags":[],"documentation":"","type":"{ id: string; username: string; ethAddress: string; nodeAddress: string; email: string; multisigAddress: string; transactionHash: string; token?: string; }","default":"{} as UserSession"},"watchCallbacks":["onUserUpdated"]},"updateAccount":{"memberType":1,"attribName":"update-account","attribType":{"text":"(e) => void","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"updateAccount","tags":[],"documentation":"","type":"(e: any) => void","default":"e => {}"}},"signer":{"memberType":1,"attribName":"signer","attribType":{"text":"Signer","required":false,"optional":false,"typeReferences":{"Signer":{"referenceLocation":"import","importReferenceLocation":"ethers"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"signer","tags":[],"documentation":"","type":"Signer","default":"{} as Signer"}},"history":{"memberType":1,"attribName":"history","attribType":{"text":"RouterHistory","required":false,"optional":false,"typeReferences":{"RouterHistory":{"referenceLocation":"import","importReferenceLocation":"@stencil/router"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"history","tags":[],"documentation":"","type":"RouterHistory","default":"{} as RouterHistory"}},"metamaskUnlocked":{"memberType":1,"attribName":"metamask-unlocked","attribType":{"text":"boolean","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":4,"jsdoc":{"name":"metamaskUnlocked","tags":[],"documentation":"","type":"boolean","default":"false"}},"waitForMultisig":{"memberType":1,"attribName":"wait-for-multisig","attribType":{"text":"() => Promise<void>","required":false,"optional":false,"typeReferences":{"Promise":{"referenceLocation":"global"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"waitForMultisig","tags":[],"documentation":"","type":"() => Promise<void>","default":"async () => {}"}}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/components/account/account-register/account-register.js"},"jsText":"import AccountTunnel from \"../../../data/account\";\r\nimport CounterfactualNode from \"../../../data/counterfactual\";\r\nimport PlaygroundAPIClient from \"../../../data/playground-api-client\";\r\nimport WalletTunnel from \"../../../data/wallet\";\r\nfunction buildRegistrationSignaturePayload(data) {\r\n    return [\r\n        \"PLAYGROUND ACCOUNT REGISTRATION\",\r\n        `Username: ${data.username}`,\r\n        `E-mail: ${data.email}`,\r\n        `Ethereum address: ${data.ethAddress}`,\r\n        `Node address: ${data.nodeAddress}`\r\n    ].join(\"\\n\");\r\n}\r\nfunction buildLoginSignaturePayload(address) {\r\n    return [\"PLAYGROUND ACCOUNT LOGIN\", `Ethereum address: ${address}`].join(\"\\n\");\r\n}\r\nexport class AccountRegister {\r\n    constructor() {\r\n        this.connected = false;\r\n        this.user = {};\r\n        this.updateAccount = e => { };\r\n        this.signer = {};\r\n        this.history = {};\r\n        this.metamaskUnlocked = false;\r\n        this.waitForMultisig = async () => { };\r\n        this.changeset = {\r\n            username: \"\",\r\n            email: \"\",\r\n            ethAddress: this.user.ethAddress,\r\n            nodeAddress: CounterfactualNode.getInstance().publicIdentifier\r\n        };\r\n        this.errors = {\r\n            username: \"\",\r\n            email: \"\",\r\n            ethAddress: \"\",\r\n            nodeAddress: \"\"\r\n        };\r\n        this.stage = \"ready\";\r\n    }\r\n    componentDidUpdate() {\r\n        if (!this.metamaskUnlocked) {\r\n            this.history.push(\"/\");\r\n            return;\r\n        }\r\n    }\r\n    async login(e) {\r\n        e.preventDefault();\r\n        const signature = await this.signer.signMessage(buildLoginSignaturePayload(this.user.ethAddress));\r\n        const user = await PlaygroundAPIClient.login({\r\n            ethAddress: this.user.ethAddress\r\n        }, signature);\r\n        window.localStorage.setItem(\"playground:user:token\", user.token);\r\n        this.updateAccount({ user });\r\n        this.history.push(\"/\");\r\n    }\r\n    change(key, event) {\r\n        this.changeset[key] = event.target.value;\r\n    }\r\n    async formSubmissionHandler() {\r\n        this.clearErrorMessage();\r\n        const data = this.changeset;\r\n        const payload = buildRegistrationSignaturePayload(data);\r\n        this.stage = \"awaitingForWallet\";\r\n        try {\r\n            const signature = await this.signer.signMessage(payload);\r\n            await this.register(signature);\r\n        }\r\n        catch (e) {\r\n            this.handleMetamaskErrors(e);\r\n            this.stage = \"ready\";\r\n        }\r\n    }\r\n    handleMetamaskErrors(error) {\r\n        if (error.message.match(/User denied message signature/)) {\r\n            this.setErrorMessage(\"user_denied_signature\");\r\n        }\r\n    }\r\n    onUserUpdated() {\r\n        if (this.user.multisigAddress && this.stage === \"deployingMultisig\") {\r\n            this.stage = \"finished\";\r\n        }\r\n    }\r\n    async register(signedMessage) {\r\n        try {\r\n            this.stage = \"creatingAccount\";\r\n            const newAccount = await PlaygroundAPIClient.createAccount(this.changeset, signedMessage);\r\n            this.updateAccount({ user: newAccount });\r\n            window.localStorage.setItem(\"playground:user:token\", newAccount.token);\r\n            ga(\"set\", \"userId\", newAccount.id);\r\n            this.stage = \"deployingMultisig\";\r\n            this.waitForMultisig();\r\n        }\r\n        catch (e) {\r\n            this.setErrorMessage(e.code);\r\n            this.stage = \"ready\";\r\n        }\r\n    }\r\n    clearErrorMessage() {\r\n        this.errors = { username: \"\", email: \"\", ethAddress: \"\", nodeAddress: \"\" };\r\n    }\r\n    setErrorMessage(errorCode) {\r\n        let update = {};\r\n        this.clearErrorMessage();\r\n        switch (errorCode) {\r\n            case \"username_required\":\r\n                update = { username: \"This field is required\" };\r\n                break;\r\n            case \"username_already_exists\":\r\n                update = {\r\n                    username: \"This username is not available, try another one.\"\r\n                };\r\n                break;\r\n            case \"email_required\":\r\n                update = { email: \"This field is required\" };\r\n                break;\r\n            case \"signature_required\":\r\n                update = {\r\n                    ethAddress: \"You must sign the operation with Metamask in order to continue\"\r\n                };\r\n                break;\r\n            case \"invalid_signature\":\r\n                update = {\r\n                    ethAddress: \"Something went wrong with your signature. Please try again.\"\r\n                };\r\n                break;\r\n            case \"address_already_registered\":\r\n                update = {\r\n                    ethAddress: \"Cannot use same ethereum address twice.\"\r\n                };\r\n                break;\r\n            case \"user_save_failed\":\r\n                update = {\r\n                    ethAddress: \"Something went wrong while saving your data. Please try again later.\"\r\n                };\r\n                break;\r\n            case \"user_denied_signature\":\r\n                update = {\r\n                    ethAddress: \"You must approve the message signature at Metamask in order to proceed.\"\r\n                };\r\n                break;\r\n        }\r\n        this.errors = Object.assign({}, this.errors, update);\r\n    }\r\n    render() {\r\n        if (this.stage === \"finished\") {\r\n            return h(\"stencil-router-redirect\", { url: \"/deposit\" });\r\n        }\r\n        if (this.user.ethAddress) {\r\n            this.changeset.ethAddress = this.user.ethAddress;\r\n        }\r\n        const buttonTexts = {\r\n            ready: \"Register\",\r\n            awaitingForWallet: \"Check Wallet...\",\r\n            creatingAccount: \"Creating your account...\",\r\n            deployingMultisig: \"Deploying contract...\"\r\n        };\r\n        const inputIsDisabled = this.stage !== \"ready\";\r\n        let slotElement = (h(\"div\", { slot: \"post\" },\r\n            \"Already have an account?\",\r\n            \" \",\r\n            h(\"a\", { href: \"#\", onClick: async (e) => await this.login(e) }, \"Login here\")));\r\n        if (this.stage === \"deployingMultisig\") {\r\n            slotElement = (h(\"div\", { slot: \"post\" },\r\n                h(\"b\", null, \"This can take around 15-90 seconds.\"),\r\n                h(\"br\", null),\r\n                \"Please be patient! :)\"));\r\n        }\r\n        return (h(\"widget-screen\", { exitable: !inputIsDisabled },\r\n            h(\"div\", { slot: \"header\" }, \"Create a Playground Account\"),\r\n            h(\"form-container\", { onFormSubmitted: async (e) => await this.formSubmissionHandler() },\r\n                h(\"form-input\", { disabled: inputIsDisabled, label: \"Username\", value: this.changeset.username, error: this.errors.username, autofocus: true, onChange: e => this.change(\"username\", e) }),\r\n                h(\"form-input\", { disabled: inputIsDisabled, label: \"Email (optional)\", value: this.changeset.email, error: this.errors.email, onChange: e => this.change(\"email\", e) }),\r\n                h(\"div\", { class: \"smallprint\" },\r\n                    h(\"b\", null, \"Account will be linked to your Ethereum address: \"),\r\n                    this.changeset.ethAddress),\r\n                h(\"div\", { class: \"error\" }, this.errors.ethAddress),\r\n                h(\"form-button\", { class: \"button\", disabled: inputIsDisabled, spinner: inputIsDisabled, onButtonPressed: async (e) => await this.formSubmissionHandler() }, buttonTexts[this.stage])),\r\n            slotElement));\r\n    }\r\n    static get is() { return \"account-register\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get properties() { return {\r\n        \"connected\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"connected\"\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"errors\": {\r\n            \"state\": true\r\n        },\r\n        \"history\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"history\"\r\n        },\r\n        \"metamaskUnlocked\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"metamask-unlocked\"\r\n        },\r\n        \"signer\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"signer\"\r\n        },\r\n        \"stage\": {\r\n            \"state\": true\r\n        },\r\n        \"updateAccount\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"update-account\"\r\n        },\r\n        \"user\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"user\",\r\n            \"watchCallbacks\": [\"onUserUpdated\"]\r\n        },\r\n        \"waitForMultisig\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"wait-for-multisig\"\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:account-register:**/\"; }\r\n}\r\nAccountTunnel.injectProps(AccountRegister, [\r\n    \"updateAccount\",\r\n    \"user\",\r\n    \"waitForMultisig\"\r\n]);\r\nWalletTunnel.injectProps(AccountRegister, [\r\n    \"connected\",\r\n    \"signer\",\r\n    \"metamaskUnlocked\"\r\n]);\r\n"}