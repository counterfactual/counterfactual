const e = window.App.h;

import "./chunk-deed3e85.js";

import { a as t } from "./chunk-dfef6d51.js";

import { a as s } from "./chunk-868ccbc3.js";

import { a } from "./chunk-515d15f9.js";

import { a as n } from "./chunk-adf5a5b1.js";

class i {
  constructor() {
    this.match = {}, this.history = {}, this.url = "", this.apps = [], this.user = {}, 
    this.ethMultisigBalance = window.ethers.constants.Zero, this.getBalances = (async () => void 0), 
    this.frameWindow = null, this.port = null, this.eventEmitter = new EventEmitter(), 
    this.messageQueue = [], this.iframe = {}, this.node = a.getInstance(), this.$onMessage = (() => {});
  }
  render() {
    return e("node-listener", {
      history: this.history
    }, e("layout-header", null));
  }
  getDapp() {
    const e = this.match.params.dappName;
    return this.apps.find(t => t.slug === e);
  }
  getDappUrl() {
    const e = this.getDapp(), t = new URLSearchParams(window.location.search).get("dappState") || "";
    return e ? `${e.url}${t}` : "";
  }
  componentDidLoad() {
    this.url = this.getDappUrl(), this.node.on("proposeInstallVirtual", this.postOrQueueMessage.bind(this)), 
    this.node.on("installVirtualEvent", this.postOrQueueMessage.bind(this)), this.node.on("getAppInstanceDetails", this.postOrQueueMessage.bind(this)), 
    this.node.on("getState", this.postOrQueueMessage.bind(this)), this.node.on("takeAction", this.postOrQueueMessage.bind(this)), 
    this.node.on("updateStateEvent", this.postOrQueueMessage.bind(this)), this.node.on("uninstallEvent", this.postOrQueueMessage.bind(this)), 
    this.node.on("protocolMessageEvent", this.getBalances.bind(this));
    const e = this.element.shadowRoot, t = document.createElement("iframe");
    t.src = this.url, e.appendChild(t), this.frameWindow = t.contentWindow, this.$onMessage = this.configureMessageChannel.bind(this), 
    window.addEventListener("message", this.$onMessage), window.addEventListener("message", this.handlePlaygroundMessage.bind(this)), 
    this.iframe = t;
  }
  componentDidUnload() {
    this.frameWindow && (this.frameWindow = null), this.eventEmitter.off("message"), 
    this.port && (this.port.close(), this.port = null), this.iframe.remove();
  }
  async handlePlaygroundMessage(e) {
    if (this.frameWindow && "string" == typeof e.data && ("playground:request:user" === e.data && await this.sendResponseForRequestUser(this.frameWindow), 
    "playground:request:matchmake" === e.data && await this.sendResponseForMatchmakeRequest(this.frameWindow), 
    "playground:request:appInstance" === e.data && await this.sendResponseForAppInstance(this.frameWindow), 
    "playground:request:getBalances" === e.data && await this.sendResponseForGetBalances(this.frameWindow), 
    e.data.startsWith("playground:send:dappRoute"))) {
      const [, t] = e.data.split("|"), s = new URLSearchParams(window.location.search);
      s.set("dappState", t);
      const a = `${window.location.pathname}?${s.toString()}`;
      history.pushState(null, "", a);
    }
  }
  get token() {
    return window.localStorage.getItem("playground:user:token");
  }
  get matchmakeWith() {
    return window.localStorage.getItem("playground:matchmakeWith");
  }
  async sendResponseForRequestUser(e) {
    e.postMessage(`playground:response:user|${JSON.stringify({
      user: Object.assign({}, this.user, {
        token: this.token
      }),
      balance: this.ethMultisigBalance ? window.ethers.utils.formatEther(this.ethMultisigBalance) : "0"
    })}`, "*");
  }
  getBotName() {
    return {
      "high-roller": "HighRollerBot",
      "tic-tac-toe": "TicTacToeBot"
    }[this.getDapp().slug];
  }
  async sendResponseForMatchmakeRequest(e) {
    const t = await n.matchmake(this.token, this.matchmakeWith || this.getBotName()), s = JSON.stringify(t);
    window.localStorage.setItem("playground:lastMatchmake", s), e.postMessage(`playground:response:matchmake|${s}`, "*");
  }
  postOrQueueMessage(e) {
    this.port ? this.port.postMessage(e) : this.queueMessage(e);
  }
  configureMessageChannel(e) {
    if (this.frameWindow) {
      if ("cf-node-provider:init" === e.data) {
        const {port2: e} = this.configureMessagePorts();
        this.frameWindow.postMessage("cf-node-provider:port", "*", [ e ]);
      }
      "cf-node-provider:ready" === e.data && (this.flushMessageQueue(), window.removeEventListener("message", this.$onMessage));
    }
  }
  configureMessagePorts() {
    const e = new MessageChannel();
    return this.port = e.port1, this.port.addEventListener("message", this.relayMessage.bind(this)), 
    this.port.start(), e;
  }
  relayMessage(e) {
    this.node.rpcRouter.dispatch(Object.assign({}, e.data));
  }
  queueMessage(e) {
    this.messageQueue.push(e);
  }
  flushMessageQueue() {
    if (!this.port) return;
    let e;
    for (;e = this.messageQueue.shift(); ) this.port.postMessage(e);
  }
  sendResponseForAppInstance(e) {
    const t = window.localStorage.getItem("playground:installingDapp");
    if (!e || !t) return;
    const {installedApp: s} = JSON.parse(t);
    e.postMessage(`playground:response:appInstance|${s ? JSON.stringify(s) : ""}`, "*"), 
    s && console.log("Playground sent appInstance", JSON.stringify(s)), window.localStorage.removeItem("playground:installingDapp");
  }
  async sendResponseForGetBalances(e) {
    const t = await this.getBalances();
    e.postMessage(`playground:response:getBalances|${JSON.stringify(t)}`, "*");
  }
  static get is() {
    return "dapp-container";
  }
  static get encapsulation() {
    return "shadow";
  }
  static get properties() {
    return {
      apps: {
        type: "Any",
        attr: "apps"
      },
      element: {
        elementRef: !0
      },
      ethMultisigBalance: {
        type: "Any",
        attr: "eth-multisig-balance"
      },
      getBalances: {
        type: "Any",
        attr: "get-balances"
      },
      history: {
        type: "Any",
        attr: "history"
      },
      match: {
        type: "Any",
        attr: "match"
      },
      url: {
        type: String,
        attr: "url",
        mutable: !0
      },
      user: {
        type: "Any",
        attr: "user"
      }
    };
  }
  static get style() {
    return "/**style-placeholder:dapp-container:**/";
  }
}

s.injectProps(i, [ "apps" ]), t.injectProps(i, [ "ethMultisigBalance", "getBalances", "user" ]);

export { i as DappContainer };