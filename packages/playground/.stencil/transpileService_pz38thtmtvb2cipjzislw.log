{"moduleFile":{"sourceFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/components/dapp-container/dapp-container.tsx","localImports":["/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/account","/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/app-registry","/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/counterfactual","/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/playground-api-client"],"externalImports":["@stencil/core","@stencil/router","ethers/utils"],"potentialCmpRefs":[{"tag":"node-listener"},{"tag":"layout-header"}],"cmpMeta":{"tagNameMeta":"dapp-container","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/components/dapp-container/dapp-container.scss","cmpRelativePath":"dapp-container.scss","originalComponentPath":"dapp-container.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"DappContainer","tags":[],"documentation":"","type":"typeof DappContainer"},"encapsulationMeta":1,"componentClass":"DappContainer","membersMeta":{"element":{"memberType":64},"match":{"memberType":1,"attribName":"match","attribType":{"text":"MatchResults","required":false,"optional":false,"typeReferences":{"MatchResults":{"referenceLocation":"import","importReferenceLocation":"@stencil/router"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"match","tags":[],"documentation":"","type":"MatchResults","default":"{} as MatchResults"}},"history":{"memberType":1,"attribName":"history","attribType":{"text":"RouterHistory","required":false,"optional":false,"typeReferences":{"RouterHistory":{"referenceLocation":"import","importReferenceLocation":"@stencil/router"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"history","tags":[],"documentation":"","type":"RouterHistory","default":"{} as RouterHistory"}},"url":{"memberType":2,"attribName":"url","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"url","tags":[],"documentation":"","type":"string","default":"\"\""}},"apps":{"memberType":1,"attribName":"apps","attribType":{"text":"AppDefinition[]","required":false,"optional":false,"typeReferences":{"AppDefinition":{"referenceLocation":"import","importReferenceLocation":"../../types"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"apps","tags":[],"documentation":"","type":"AppDefinition[]","default":"[]"}},"user":{"memberType":1,"attribName":"user","attribType":{"text":"UserSession","required":false,"optional":false,"typeReferences":{"UserSession":{"referenceLocation":"import","importReferenceLocation":"../../types"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"user","tags":[],"documentation":"","type":"{ id: string; username: string; ethAddress: string; nodeAddress: string; email: string; multisigAddress: string; transactionHash: string; token?: string; }","default":"{} as UserSession"}},"ethMultisigBalance":{"memberType":1,"attribName":"eth-multisig-balance","attribType":{"text":"BigNumber","required":false,"optional":false,"typeReferences":{"BigNumber":{"referenceLocation":"import","importReferenceLocation":"ethers/utils"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"ethMultisigBalance","tags":[],"documentation":"","type":"BigNumber","default":"window[\"ethers\"].constants.Zero"}},"getBalances":{"memberType":1,"attribName":"get-balances","attribType":{"text":"() => Promise<\n    { ethMultisigBalance: BigNumber; ethFreeBalanceWei: BigNumber } | undefined\n  >","required":false,"optional":false,"typeReferences":{"Promise":{"referenceLocation":"global"},"BigNumber":{"referenceLocation":"import","importReferenceLocation":"ethers/utils"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"getBalances","tags":[],"documentation":"","type":"() => Promise<{ ethMultisigBalance: BigNumber; ethFreeBalanceWei: BigNumber; }>","default":"async () => undefined"}}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/components/dapp-container/dapp-container.js"},"jsText":"import AccountTunnel from \"../../data/account\";\r\nimport AppRegistryTunnel from \"../../data/app-registry\";\r\nimport CounterfactualNode from \"../../data/counterfactual\";\r\nimport PlaygroundAPIClient from \"../../data/playground-api-client\";\r\nexport class DappContainer {\r\n    constructor() {\r\n        this.match = {};\r\n        this.history = {};\r\n        this.url = \"\";\r\n        this.apps = [];\r\n        this.user = {};\r\n        this.ethMultisigBalance = window[\"ethers\"].constants.Zero;\r\n        this.getBalances = async () => undefined;\r\n        this.frameWindow = null;\r\n        this.port = null;\r\n        this.eventEmitter = new EventEmitter();\r\n        this.messageQueue = [];\r\n        this.iframe = {};\r\n        this.node = CounterfactualNode.getInstance();\r\n        this.$onMessage = () => { };\r\n    }\r\n    render() {\r\n        return (h(\"node-listener\", { history: this.history },\r\n            h(\"layout-header\", null)));\r\n    }\r\n    getDapp() {\r\n        const dappSlug = this.match.params.dappName;\r\n        const dapp = this.apps.find(app => app.slug === dappSlug);\r\n        return dapp;\r\n    }\r\n    getDappUrl() {\r\n        const dapp = this.getDapp();\r\n        const dappState = new URLSearchParams(window.location.search).get(\"dappState\") || \"\";\r\n        if (!dapp) {\r\n            return \"\";\r\n        }\r\n        return `${dapp.url}${dappState}`;\r\n    }\r\n    componentDidLoad() {\r\n        this.url = this.getDappUrl();\r\n        this.node.on(\"proposeInstallVirtual\", this.postOrQueueMessage.bind(this));\r\n        this.node.on(\"installVirtualEvent\", this.postOrQueueMessage.bind(this));\r\n        this.node.on(\"getAppInstanceDetails\", this.postOrQueueMessage.bind(this));\r\n        this.node.on(\"getState\", this.postOrQueueMessage.bind(this));\r\n        this.node.on(\"takeAction\", this.postOrQueueMessage.bind(this));\r\n        this.node.on(\"updateStateEvent\", this.postOrQueueMessage.bind(this));\r\n        this.node.on(\"uninstallEvent\", this.postOrQueueMessage.bind(this));\r\n        this.node.on(\"protocolMessageEvent\", this.getBalances.bind(this));\r\n        const element = this.element.shadowRoot;\r\n        const iframe = document.createElement(\"iframe\");\r\n        iframe.src = this.url;\r\n        element.appendChild(iframe);\r\n        this.frameWindow = iframe.contentWindow;\r\n        this.$onMessage = this.configureMessageChannel.bind(this);\r\n        window.addEventListener(\"message\", this.$onMessage);\r\n        window.addEventListener(\"message\", this.handlePlaygroundMessage.bind(this));\r\n        this.iframe = iframe;\r\n    }\r\n    componentDidUnload() {\r\n        if (this.frameWindow) {\r\n            this.frameWindow = null;\r\n        }\r\n        this.eventEmitter.off(\"message\");\r\n        if (this.port) {\r\n            this.port.close();\r\n            this.port = null;\r\n        }\r\n        this.iframe.remove();\r\n    }\r\n    async handlePlaygroundMessage(event) {\r\n        if (!this.frameWindow || typeof event.data !== \"string\") {\r\n            return;\r\n        }\r\n        if (event.data === \"playground:request:user\") {\r\n            await this.sendResponseForRequestUser(this.frameWindow);\r\n        }\r\n        if (event.data === \"playground:request:matchmake\") {\r\n            await this.sendResponseForMatchmakeRequest(this.frameWindow);\r\n        }\r\n        if (event.data === \"playground:request:appInstance\") {\r\n            await this.sendResponseForAppInstance(this.frameWindow);\r\n        }\r\n        if (event.data === \"playground:request:getBalances\") {\r\n            await this.sendResponseForGetBalances(this.frameWindow);\r\n        }\r\n        if (event.data.startsWith(\"playground:send:dappRoute\")) {\r\n            const [, data] = event.data.split(\"|\");\r\n            const searchParams = new URLSearchParams(window.location.search);\r\n            searchParams.set(\"dappState\", data);\r\n            const newURL = `${window.location.pathname}?${searchParams.toString()}`;\r\n            history.pushState(null, \"\", newURL);\r\n        }\r\n    }\r\n    get token() {\r\n        return window.localStorage.getItem(\"playground:user:token\");\r\n    }\r\n    get matchmakeWith() {\r\n        return window.localStorage.getItem(\"playground:matchmakeWith\");\r\n    }\r\n    async sendResponseForRequestUser(frameWindow) {\r\n        frameWindow.postMessage(`playground:response:user|${JSON.stringify({\r\n            user: Object.assign({}, this.user, { token: this.token }),\r\n            balance: this.ethMultisigBalance\r\n                ? window[\"ethers\"].utils.formatEther(this.ethMultisigBalance)\r\n                : \"0\"\r\n        })}`, \"*\");\r\n    }\r\n    getBotName() {\r\n        const bots = {\r\n            \"high-roller\": \"HighRollerBot\",\r\n            \"tic-tac-toe\": \"TicTacToeBot\"\r\n        };\r\n        return bots[this.getDapp().slug];\r\n    }\r\n    async sendResponseForMatchmakeRequest(frameWindow) {\r\n        const json = await PlaygroundAPIClient.matchmake(this.token, this.matchmakeWith || this.getBotName());\r\n        const response = JSON.stringify(json);\r\n        window.localStorage.setItem(\"playground:lastMatchmake\", response);\r\n        frameWindow.postMessage(`playground:response:matchmake|${response}`, \"*\");\r\n    }\r\n    postOrQueueMessage(message) {\r\n        if (this.port) {\r\n            this.port.postMessage(message);\r\n        }\r\n        else {\r\n            this.queueMessage(message);\r\n        }\r\n    }\r\n    configureMessageChannel(event) {\r\n        if (!this.frameWindow) {\r\n            return;\r\n        }\r\n        if (event.data === \"cf-node-provider:init\") {\r\n            const { port2 } = this.configureMessagePorts();\r\n            this.frameWindow.postMessage(\"cf-node-provider:port\", \"*\", [port2]);\r\n        }\r\n        if (event.data === \"cf-node-provider:ready\") {\r\n            this.flushMessageQueue();\r\n            window.removeEventListener(\"message\", this.$onMessage);\r\n        }\r\n    }\r\n    configureMessagePorts() {\r\n        const channel = new MessageChannel();\r\n        this.port = channel.port1;\r\n        this.port.addEventListener(\"message\", this.relayMessage.bind(this));\r\n        this.port.start();\r\n        return channel;\r\n    }\r\n    relayMessage(event) {\r\n        this.node.rpcRouter.dispatch(Object.assign({}, event.data));\r\n    }\r\n    queueMessage(message) {\r\n        this.messageQueue.push(message);\r\n    }\r\n    flushMessageQueue() {\r\n        if (!this.port) {\r\n            return;\r\n        }\r\n        let message;\r\n        while ((message = this.messageQueue.shift())) {\r\n            this.port.postMessage(message);\r\n        }\r\n    }\r\n    sendResponseForAppInstance(frameWindow) {\r\n        const dappInstallationRequest = window.localStorage.getItem(\"playground:installingDapp\");\r\n        if (!frameWindow || !dappInstallationRequest) {\r\n            return;\r\n        }\r\n        const { installedApp } = JSON.parse(dappInstallationRequest);\r\n        frameWindow.postMessage(`playground:response:appInstance|${installedApp ? JSON.stringify(installedApp) : \"\"}`, \"*\");\r\n        if (installedApp) {\r\n            console.log(\"Playground sent appInstance\", JSON.stringify(installedApp));\r\n        }\r\n        window.localStorage.removeItem(\"playground:installingDapp\");\r\n    }\r\n    async sendResponseForGetBalances(frameWindow) {\r\n        const balances = await this.getBalances();\r\n        frameWindow.postMessage(`playground:response:getBalances|${JSON.stringify(balances)}`, \"*\");\r\n    }\r\n    static get is() { return \"dapp-container\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get properties() { return {\r\n        \"apps\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"apps\"\r\n        },\r\n        \"element\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"ethMultisigBalance\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"eth-multisig-balance\"\r\n        },\r\n        \"getBalances\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"get-balances\"\r\n        },\r\n        \"history\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"history\"\r\n        },\r\n        \"match\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"match\"\r\n        },\r\n        \"url\": {\r\n            \"type\": String,\r\n            \"attr\": \"url\",\r\n            \"mutable\": true\r\n        },\r\n        \"user\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"user\"\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:dapp-container:**/\"; }\r\n}\r\nAppRegistryTunnel.injectProps(DappContainer, [\"apps\"]);\r\nAccountTunnel.injectProps(DappContainer, [\r\n    \"ethMultisigBalance\",\r\n    \"getBalances\",\r\n    \"user\"\r\n]);\r\n"}