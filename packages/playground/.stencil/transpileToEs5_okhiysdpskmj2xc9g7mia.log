import * as tslib_1 from "tslib";
var OutcomeType;
(function (OutcomeType) {
    OutcomeType[OutcomeType["TWO_PARTY_FIXED_OUTCOME"] = 0] = "TWO_PARTY_FIXED_OUTCOME";
    OutcomeType[OutcomeType["COIN_TRANSFER"] = 1] = "COIN_TRANSFER";
})(OutcomeType || (OutcomeType = {}));
var TwoPartyFixedOutcome;
(function (TwoPartyFixedOutcome) {
    TwoPartyFixedOutcome[TwoPartyFixedOutcome["SEND_TO_ADDR_ONE"] = 0] = "SEND_TO_ADDR_ONE";
    TwoPartyFixedOutcome[TwoPartyFixedOutcome["SEND_TO_ADDR_TWO"] = 1] = "SEND_TO_ADDR_TWO";
    TwoPartyFixedOutcome[TwoPartyFixedOutcome["SPLIT_AND_SEND_TO_BOTH_ADDRS"] = 2] = "SPLIT_AND_SEND_TO_BOTH_ADDRS";
})(TwoPartyFixedOutcome || (TwoPartyFixedOutcome = {}));
var Node$1;
(function (Node) {
    var ErrorType;
    (function (ErrorType) {
        ErrorType["ERROR"] = "error";
    })(ErrorType = Node.ErrorType || (Node.ErrorType = {}));
    var MethodName;
    (function (MethodName) {
        MethodName["ACCEPT_STATE"] = "acceptState";
        MethodName["CREATE_CHANNEL"] = "createChannel";
        MethodName["DEPOSIT"] = "deposit";
        MethodName["GET_APP_INSTANCE_DETAILS"] = "getAppInstanceDetails";
        MethodName["GET_APP_INSTANCES"] = "getAppInstances";
        MethodName["GET_CHANNEL_ADDRESSES"] = "getChannelAddresses";
        MethodName["GET_STATE_DEPOSIT_HOLDER_ADDRESS"] = "getStateDepositHolderAddress";
        MethodName["GET_FREE_BALANCE_STATE"] = "getFreeBalanceState";
        MethodName["GET_PROPOSED_APP_INSTANCE"] = "getProposedAppInstance";
        MethodName["GET_PROPOSED_APP_INSTANCES"] = "getProposedAppInstances";
        MethodName["GET_STATE"] = "getState";
        MethodName["GET_STATE_CHANNEL"] = "getStateChannel";
        MethodName["INSTALL"] = "install";
        MethodName["INSTALL_VIRTUAL"] = "installVirtual";
        MethodName["PROPOSE_INSTALL"] = "proposeInstall";
        MethodName["PROPOSE_INSTALL_VIRTUAL"] = "proposeInstallVirtual";
        MethodName["PROPOSE_STATE"] = "proposeState";
        MethodName["REJECT_INSTALL"] = "rejectInstall";
        MethodName["REJECT_STATE"] = "rejectState";
        MethodName["UPDATE_STATE"] = "updateState";
        MethodName["TAKE_ACTION"] = "takeAction";
        MethodName["UNINSTALL"] = "uninstall";
        MethodName["UNINSTALL_VIRTUAL"] = "uninstallVirtual";
        MethodName["WITHDRAW"] = "withdraw";
    })(MethodName = Node.MethodName || (Node.MethodName = {}));
    var RpcMethodName;
    (function (RpcMethodName) {
        RpcMethodName["CREATE_CHANNEL"] = "chan_create";
        RpcMethodName["DEPOSIT"] = "chan_deposit";
        RpcMethodName["GET_APP_INSTANCE_DETAILS"] = "chan_getAppInstance";
        RpcMethodName["GET_APP_INSTANCES"] = "chan_getAppInstances";
        RpcMethodName["GET_STATE_DEPOSIT_HOLDER_ADDRESS"] = "chan_getStateDepositHolderAddress";
        RpcMethodName["GET_FREE_BALANCE_STATE"] = "chan_getFreeBalanceState";
        RpcMethodName["GET_PROPOSED_APP_INSTANCES"] = "chan_getProposedAppInstances";
        RpcMethodName["GET_STATE"] = "chan_getState";
        RpcMethodName["INSTALL"] = "chan_install";
        RpcMethodName["INSTALL_VIRTUAL"] = "chan_installVirtual";
        RpcMethodName["PROPOSE_INSTALL"] = "chan_proposeInstall";
        RpcMethodName["PROPOSE_INSTALL_VIRTUAL"] = "chan_proposeInstallVirtual";
        RpcMethodName["PROPOSE_STATE"] = "chan_proposeState";
        RpcMethodName["REJECT_INSTALL"] = "chan_rejectInstall";
        RpcMethodName["REJECT_STATE"] = "chan_rejectState";
        RpcMethodName["UPDATE_STATE"] = "chan_updateState";
        RpcMethodName["TAKE_ACTION"] = "chan_takeAction";
        RpcMethodName["UNINSTALL"] = "chan_uninstall";
        RpcMethodName["UNINSTALL_VIRTUAL"] = "chan_uninstallVirtual";
        RpcMethodName["WITHDRAW"] = "chan_withdraw";
    })(RpcMethodName = Node.RpcMethodName || (Node.RpcMethodName = {}));
    var EventName;
    (function (EventName) {
        EventName["COUNTER_DEPOSIT_CONFIRMED"] = "counterDepositConfirmed";
        EventName["CREATE_CHANNEL"] = "createChannelEvent";
        EventName["DEPOSIT_CONFIRMED"] = "depositConfirmedEvent";
        EventName["DEPOSIT_FAILED"] = "depositFailed";
        EventName["DEPOSIT_STARTED"] = "depositStartedEvent";
        EventName["INSTALL"] = "installEvent";
        EventName["INSTALL_VIRTUAL"] = "installVirtualEvent";
        EventName["PROPOSE_STATE"] = "proposeStateEvent";
        EventName["REJECT_INSTALL"] = "rejectInstallEvent";
        EventName["REJECT_STATE"] = "rejectStateEvent";
        EventName["UNINSTALL"] = "uninstallEvent";
        EventName["UNINSTALL_VIRTUAL"] = "uninstallVirtualEvent";
        EventName["UPDATE_STATE"] = "updateStateEvent";
        EventName["WITHDRAWAL_CONFIRMED"] = "withdrawalConfirmedEvent";
        EventName["WITHDRAWAL_FAILED"] = "withdrawalFailed";
        EventName["WITHDRAWAL_STARTED"] = "withdrawalStartedEvent";
        EventName["PROPOSE_INSTALL"] = "proposeInstallEvent";
        EventName["PROPOSE_INSTALL_VIRTUAL"] = "proposeInstallVirtualEvent";
        EventName["PROTOCOL_MESSAGE_EVENT"] = "protocolMessageEvent";
        EventName["WITHDRAW_EVENT"] = "withdrawEvent";
        EventName["REJECT_INSTALL_VIRTUAL"] = "rejectInstallVirtualEvent";
    })(EventName = Node.EventName || (Node.EventName = {}));
})(Node$1 || (Node$1 = {}));
var CounterfactualNode = /** @class */ (function () {
    function CounterfactualNode() {
    }
    CounterfactualNode.getInstance = function () {
        return CounterfactualNode.node;
    };
    CounterfactualNode.getCfProvider = function () {
        return CounterfactualNode.cfProvider;
    };
    CounterfactualNode.create = function (settings) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (CounterfactualNode.node) {
                            return [2 /*return*/, CounterfactualNode.node];
                        }
                        _a = CounterfactualNode;
                        return [4 /*yield*/, Node.create(settings.messagingService, settings.storeService, settings.nodeConfig, new window["ethers"].providers.Web3Provider(window["web3"].currentProvider), settings.network)];
                    case 1:
                        _a.node = _b.sent();
                        return [4 /*yield*/, this.setupNodeProvider()];
                    case 2:
                        _b.sent();
                        return [2 /*return*/, CounterfactualNode.getInstance()];
                }
            });
        });
    };
    CounterfactualNode.setupNodeProvider = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.node.on(Node$1.MethodName.PROPOSE_INSTALL_VIRTUAL, this.postToPort.bind(this));
                        this.node.on(Node$1.MethodName.INSTALL_VIRTUAL, this.postToPort.bind(this));
                        this.node.on(Node$1.MethodName.REJECT_INSTALL, this.postToPort.bind(this));
                        this.node.on(Node$1.MethodName.DEPOSIT, this.postToPort.bind(this));
                        this.node.on(Node$1.MethodName.WITHDRAW, this.postToPort.bind(this));
                        this.node.on(Node$1.MethodName.GET_FREE_BALANCE_STATE, this.postToPort.bind(this));
                        this.node.on(Node$1.EventName.CREATE_CHANNEL, this.postToPort.bind(this));
                        this.node.on(Node$1.RpcMethodName.PROPOSE_INSTALL_VIRTUAL, this.postToJsonRpcPort.bind(this));
                        this.node.on(Node$1.RpcMethodName.INSTALL_VIRTUAL, this.postToJsonRpcPort.bind(this));
                        this.node.on(Node$1.RpcMethodName.REJECT_INSTALL, this.postToJsonRpcPort.bind(this));
                        this.node.on(Node$1.RpcMethodName.DEPOSIT, this.postToJsonRpcPort.bind(this));
                        this.node.on(Node$1.EventName.DEPOSIT_CONFIRMED, this.postToJsonRpcPort.bind(this));
                        this.node.on(Node$1.RpcMethodName.WITHDRAW, this.postToJsonRpcPort.bind(this));
                        this.node.on(Node$1.RpcMethodName.GET_FREE_BALANCE_STATE, this.postToJsonRpcPort.bind(this));
                        this.node.on(Node$1.RpcMethodName.CREATE_CHANNEL, this.postToJsonRpcPort.bind(this));
                        window.addEventListener("message", function (event) {
                            if (event.data === "cf-node-provider:init") {
                                var port2 = _this.configureMessagePorts().port2;
                                window.postMessage("cf-node-provider:port", "*", [port2]);
                            }
                        });
                        this.nodeProvider = new cfWallet.NodeProvider();
                        return [4 /*yield*/, this.nodeProvider.connect()];
                    case 1:
                        _a.sent();
                        this.cfProvider = this.createCfProvider();
                        return [2 /*return*/];
                }
            });
        });
    };
    CounterfactualNode.configureMessagePorts = function () {
        var _this = this;
        var channel = new MessageChannel();
        this.port = channel.port1;
        this.port.addEventListener("message", function (event) {
            var jsonrpcData = event.data;
            if (jsonrpcData.methodName && jsonrpcData.parameters) {
                _this.relayJsonRpcMessage(jsonrpcData);
            }
            else {
                _this.relayMessage(event);
            }
        });
        this.port.start();
        return channel;
    };
    CounterfactualNode.relayMessage = function (event) {
        this.node.emit(event.data.methodName, event.data);
    };
    CounterfactualNode.relayJsonRpcMessage = function (event) {
        this.node.rpcRouter.dispatch(event);
    };
    CounterfactualNode.postToPort = function (message) {
        this.port.postMessage(message);
    };
    CounterfactualNode.postToJsonRpcPort = function (message) {
        this.port.postMessage(message);
    };
    CounterfactualNode.createCfProvider = function () {
        return new cfWallet.Provider(this.nodeProvider);
    };
    return CounterfactualNode;
}());
export { CounterfactualNode as a, Node$1 as b };
