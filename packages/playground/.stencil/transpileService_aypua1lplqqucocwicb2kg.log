{"moduleFile":{"sourceFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/components/layout/layout-header/header-account/header-account.tsx","localImports":["/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/account","/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/wallet"],"externalImports":["@stencil/core"],"potentialCmpRefs":[{"tag":"widget-error-message"},{"tag":"widget-tooltip"},{"tag":"stencil-route-link"},{"tag":"header-balance"},{"tag":"header-account-info"}],"cmpMeta":{"tagNameMeta":"header-account","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/components/layout/layout-header/header-account/header-account.scss","cmpRelativePath":"header-account.scss","originalComponentPath":"header-account.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"HeaderAccount","tags":[],"documentation":"","type":"typeof HeaderAccount"},"encapsulationMeta":1,"componentClass":"HeaderAccount","membersMeta":{"el":{"memberType":64},"waitMultisigInterval":{"memberType":16},"metamaskConfirmationUIOpen":{"memberType":16},"network":{"memberType":1,"attribName":"network","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"network","tags":[],"documentation":"","type":"string","default":"\"\""}},"error":{"memberType":1,"attribName":"error","attribType":{"text":"{ primary: string; secondary: string }","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"error","tags":[],"documentation":"","type":"{ primary: string; secondary: string; }","default":"{\n    primary: \"\",\n    secondary: \"\"\n  }"}},"web3Detected":{"memberType":1,"attribName":"web-3-detected","attribType":{"text":"boolean","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":4,"jsdoc":{"name":"web3Detected","tags":[],"documentation":"","type":"boolean","default":"false"}},"hasDetectedNetwork":{"memberType":1,"attribName":"has-detected-network","attribType":{"text":"boolean","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":4,"jsdoc":{"name":"hasDetectedNetwork","tags":[],"documentation":"","type":"boolean","default":"false"}},"metamaskUnlocked":{"memberType":1,"attribName":"metamask-unlocked","attribType":{"text":"boolean","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":4,"jsdoc":{"name":"metamaskUnlocked","tags":[],"documentation":"","type":"boolean","default":"false"}},"networkPermitted":{"memberType":1,"attribName":"network-permitted","attribType":{"text":"boolean","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":4,"jsdoc":{"name":"networkPermitted","tags":[],"documentation":"","type":"boolean","default":"false"}},"user":{"memberType":2,"attribName":"user","attribType":{"text":"UserSession","required":false,"optional":false,"typeReferences":{"UserSession":{"referenceLocation":"import","importReferenceLocation":"../../../../types"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"user","tags":[],"documentation":"","type":"{ id: string; username: string; ethAddress: string; nodeAddress: string; email: string; multisigAddress: string; transactionHash: string; token?: string; }","default":"{} as UserSession"},"watchCallbacks":["userChangedHandler"]},"authenticated":{"memberType":2,"attribName":"authenticated","attribType":{"text":"boolean","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":4,"jsdoc":{"name":"authenticated","tags":[],"documentation":"","type":"boolean","default":"false"},"watchCallbacks":["authenticationChangedHandler"]},"updateAccount":{"memberType":1,"attribName":"update-account","attribType":{"text":"(e) => void","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"updateAccount","tags":[],"documentation":"","type":"(e: any) => void","default":"e => {}"}},"login":{"memberType":1,"attribName":"login","attribType":{"text":"() => Promise<UserSession>","required":false,"optional":false,"typeReferences":{"Promise":{"referenceLocation":"global"},"UserSession":{"referenceLocation":"import","importReferenceLocation":"../../../../types"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"login","tags":[],"documentation":"","type":"() => Promise<UserSession>","default":"async () => ({} as UserSession)"}},"autoLogin":{"memberType":1,"attribName":"auto-login","attribType":{"text":"() => Promise<void>","required":false,"optional":false,"typeReferences":{"Promise":{"referenceLocation":"global"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"autoLogin","tags":[],"documentation":"","type":"() => Promise<void>","default":"async () => {}"}},"hasCorruptStateChannelState":{"memberType":1,"attribName":"has-corrupt-state-channel-state","attribType":{"text":"boolean","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":4,"jsdoc":{"name":"hasCorruptStateChannelState","tags":[],"documentation":"","type":"boolean","default":"false"}}},"eventsMeta":[{"eventMethodName":"authenticationChanged","eventName":"authenticationChanged","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"jsdoc":{"name":"authenticationChanged","tags":[],"documentation":"","type":"EventEmitter<any>"}}],"listenersMeta":[]},"hasSlot":false,"hasSvg":true,"jsFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/components/layout/layout-header/header-account/header-account.js"},"jsText":"import AccountTunnel from \"../../../../data/account\";\r\nimport WalletTunnel from \"../../../../data/wallet\";\r\nexport class HeaderAccount {\r\n    constructor() {\r\n        this.network = \"\";\r\n        this.error = {\r\n            primary: \"\",\r\n            secondary: \"\"\r\n        };\r\n        this.web3Detected = false;\r\n        this.hasDetectedNetwork = false;\r\n        this.metamaskUnlocked = false;\r\n        this.networkPermitted = false;\r\n        this.user = {};\r\n        this.authenticated = false;\r\n        this.updateAccount = e => { };\r\n        this.login = async () => ({});\r\n        this.autoLogin = async () => { };\r\n        this.hasCorruptStateChannelState = false;\r\n        this.authenticationChanged = {};\r\n        this.waitMultisigInterval = 0;\r\n        this.metamaskConfirmationUIOpen = false;\r\n    }\r\n    authenticationChangedHandler() {\r\n        this.authenticationChanged.emit({ authenticated: this.authenticated });\r\n    }\r\n    userChangedHandler() {\r\n        this.authenticated = !!(this.user && this.user.id);\r\n    }\r\n    async onLoginClicked() {\r\n        this.removeError();\r\n        this.metamaskConfirmationUIOpen = true;\r\n        try {\r\n            this.user = await this.login();\r\n        }\r\n        catch (error) {\r\n            this.displayLoginError();\r\n        }\r\n        finally {\r\n            this.metamaskConfirmationUIOpen = false;\r\n        }\r\n    }\r\n    async onConnectMetamask() {\r\n        this.metamaskConfirmationUIOpen = true;\r\n        try {\r\n            await window[\"ethereum\"].enable();\r\n        }\r\n        catch (_a) {\r\n            console.error(\"Was not able to call `window.ethereum.enable()`\");\r\n            window.alert(\"Your browser does not support enabling your wallet programatically. Please unlock your Web3 wallet and try again.\");\r\n        }\r\n        finally {\r\n            this.metamaskConfirmationUIOpen = false;\r\n        }\r\n    }\r\n    async componentWillLoad() {\r\n        if (HeaderAccount.busy) {\r\n            return;\r\n        }\r\n        await this.autoLogin();\r\n        HeaderAccount.busy = true;\r\n    }\r\n    componentDidUnload() {\r\n        HeaderAccount.busy = false;\r\n    }\r\n    displayLoginError() {\r\n        this.updateAccount({\r\n            error: {\r\n                primary: \"Login Failed\",\r\n                secondary: \"You may not have a Playground account yet. Try registering.\"\r\n            }\r\n        });\r\n        setTimeout(this.removeError.bind(this), 5000);\r\n    }\r\n    removeError() {\r\n        this.updateAccount({\r\n            error: null\r\n        });\r\n    }\r\n    render() {\r\n        if (!this.hasDetectedNetwork) {\r\n            return;\r\n        }\r\n        if (!this.web3Detected) {\r\n            return (h(\"div\", { class: \"account-container\" },\r\n                h(\"widget-error-message\", null),\r\n                h(\"div\", { class: \"message-container\" }, \"No Ethereum Connection\")));\r\n        }\r\n        if (!this.networkPermitted) {\r\n            return (h(\"div\", { class: \"account-container\" },\r\n                h(\"widget-error-message\", null),\r\n                h(\"div\", { class: \"message-container\" }, \"Wrong Network\")));\r\n        }\r\n        if (!this.metamaskUnlocked) {\r\n            return (h(\"div\", { class: \"account-container\" },\r\n                h(\"widget-error-message\", null),\r\n                h(\"div\", { class: \"btn-container\" },\r\n                    h(\"button\", { disabled: this.metamaskConfirmationUIOpen, onClick: this.onConnectMetamask.bind(this), class: \"btn btn--connect-to-wallet\" },\r\n                        h(\"svg\", { class: \"icon wallet\", \"enable-background\": \"new 0 0 50 50\", viewBox: \"0 0 50 50\" },\r\n                            h(\"rect\", { fill: \"none\", height: \"50\", width: \"50\" }),\r\n                            h(\"path\", { d: \"  M40,14c0,0-25.397,0-30,0c-3.076,0-5,3-5,5v21.384C5,42.934,7.066,45,9.616,45h30.768C42.933,45,45,42.934,45,40.384V18.846  C45,16.299,42.549,14,40,14z\", fill: \"none\", stroke: \"#000000\", \"stroke-linecap\": \"round\", \"stroke-linejoin\": \"round\", \"stroke-miterlimit\": \"10\", \"stroke-width\": \"2\" }),\r\n                            h(\"path\", { d: \"M37,11V7.658  c0-3.331-0.719-4.292-4.852-3.202c-3.036,0.801-20.801,5.726-20.801,5.726c-5.471,2.062-6.306,3.817-6.306,7.816L5,20.453\", fill: \"none\", stroke: \"#000000\", \"stroke-linejoin\": \"round\", \"stroke-miterlimit\": \"10\", \"stroke-width\": \"2\" }),\r\n                            h(\"path\", { d: \"M38.502,32C37.121,32,36,30.882,36,29.501S37.121,27,38.502,27C39.879,27,41,28.12,41,29.501S39.879,32,38.502,32z\" })),\r\n                        this.metamaskConfirmationUIOpen\r\n                            ? \"Check Wallet...\"\r\n                            : \"Connect to Wallet\"))));\r\n        }\r\n        if (this.hasCorruptStateChannelState) {\r\n            return (h(\"div\", { class: \"account-container\" },\r\n                h(\"widget-error-message\", null),\r\n                h(\"div\", { class: \"message-container\" }, \"Corrupt State\")));\r\n        }\r\n        if (!this.authenticated) {\r\n            return (h(\"div\", { class: \"account-container\" },\r\n                h(\"div\", { class: \"btn-container\" },\r\n                    this.error ? (h(\"button\", { onClick: this.onLoginClicked.bind(this), class: \"btn btn-error\" },\r\n                        h(\"widget-tooltip\", { message: this.error.secondary },\r\n                            h(\"div\", { class: \"widget-error-message\" },\r\n                                h(\"img\", { class: \"icon\", src: \"/assets/icon/error.svg\" }),\r\n                                this.error.primary)))) : (h(\"button\", { onClick: this.onLoginClicked.bind(this), class: \"btn\", disabled: this.metamaskConfirmationUIOpen },\r\n                        h(\"svg\", { class: \"icon login\", viewBox: \"0 0 32 32\" },\r\n                            h(\"g\", null,\r\n                                h(\"path\", { d: \"M27,3V29a1,1,0,0,1-1,1H6a1,1,0,0,1-1-1V27H7v1H25V4H7V7H5V3A1,1,0,0,1,6,2H26A1,1,0,0,1,27,3ZM12.29,20.29l1.42,1.42,5-5a1,1,0,0,0,0-1.42l-5-5-1.42,1.42L15.59,15H5v2H15.59Z\", id: \"login_account_enter_door\" }))),\r\n                        this.metamaskConfirmationUIOpen ? \"Check Wallet...\" : \"Login\")),\r\n                    h(\"stencil-route-link\", { url: \"/register\" },\r\n                        h(\"button\", { class: \"btn btn-alternate\" },\r\n                            h(\"svg\", { class: \"icon register\", viewBox: \"0 0 48 48\" },\r\n                                h(\"g\", null,\r\n                                    h(\"path\", { d: \"M24,26c6.6,0,12-5.4,12-12S30.6,2,24,2c-6.6,0-12,5.4-12,12S17.4,26,24,26z M24,4c5.5,0,10,4.5,10,10s-4.5,10-10,10   c-5.5,0-10-4.5-10-10S18.5,4,24,4z\" }),\r\n                                    h(\"path\", { d: \"M33,28H15C7.8,28,2,33.8,2,41v5h2v-5c0-6.1,4.9-11,11-11h18V28z\" }),\r\n                                    h(\"polygon\", { points: \"46,38 40,38 40,32 38,32 38,38 32,38 32,40 38,40 38,46 40,46 40,40 46,40  \" }))),\r\n                            \"Register\")))));\r\n        }\r\n        return (h(\"div\", { class: \"account-container\" },\r\n            h(\"div\", { class: \"info-container\" },\r\n                h(\"header-balance\", null),\r\n                h(\"stencil-route-link\", { url: \"/account\" },\r\n                    h(\"header-account-info\", { src: \"/assets/icon/account.svg\", header: \"Account\", content: this.user.username })))));\r\n    }\r\n    static get is() { return \"header-account\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get properties() { return {\r\n        \"authenticated\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"authenticated\",\r\n            \"mutable\": true,\r\n            \"watchCallbacks\": [\"authenticationChangedHandler\"]\r\n        },\r\n        \"autoLogin\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"auto-login\"\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"error\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"error\"\r\n        },\r\n        \"hasCorruptStateChannelState\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"has-corrupt-state-channel-state\"\r\n        },\r\n        \"hasDetectedNetwork\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"has-detected-network\"\r\n        },\r\n        \"login\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"login\"\r\n        },\r\n        \"metamaskConfirmationUIOpen\": {\r\n            \"state\": true\r\n        },\r\n        \"metamaskUnlocked\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"metamask-unlocked\"\r\n        },\r\n        \"network\": {\r\n            \"type\": String,\r\n            \"attr\": \"network\"\r\n        },\r\n        \"networkPermitted\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"network-permitted\"\r\n        },\r\n        \"updateAccount\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"update-account\"\r\n        },\r\n        \"user\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"user\",\r\n            \"mutable\": true,\r\n            \"watchCallbacks\": [\"userChangedHandler\"]\r\n        },\r\n        \"waitMultisigInterval\": {\r\n            \"state\": true\r\n        },\r\n        \"web3Detected\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"web-3-detected\"\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"authenticationChanged\",\r\n            \"method\": \"authenticationChanged\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get style() { return \"/**style-placeholder:header-account:**/\"; }\r\n}\r\nHeaderAccount.busy = false;\r\nAccountTunnel.injectProps(HeaderAccount, [\r\n    \"user\",\r\n    \"error\",\r\n    \"updateAccount\",\r\n    \"login\",\r\n    \"autoLogin\",\r\n    \"hasCorruptStateChannelState\"\r\n]);\r\nWalletTunnel.injectProps(HeaderAccount, [\r\n    \"network\",\r\n    \"web3Detected\",\r\n    \"networkPermitted\",\r\n    \"metamaskUnlocked\",\r\n    \"hasDetectedNetwork\"\r\n]);\r\n"}