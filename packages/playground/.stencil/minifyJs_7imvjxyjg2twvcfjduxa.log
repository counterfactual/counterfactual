const t = window.App.h;

import "./chunk-deed3e85.js";

import { a as e } from "./chunk-dfef6d51.js";

import { a as s } from "./chunk-868ccbc3.js";

class i {
  constructor() {
    this.el = {}, this.appClicked = {}, this.apps = [], this.name = "", this.user = {};
  }
  appClickedHandler(t) {
    this.appClicked.emit(t.detail);
  }
  render() {
    return t("div", {
      class: "apps"
    }, t("h2", {
      class: "title"
    }, this.name), t("ul", {
      class: "list"
    }, this.apps.map(e => t("apps-list-item", {
      onAppClicked: t => this.appClickedHandler(t),
      icon: e.icon,
      name: e.name,
      notifications: e.notifications,
      url: e.url
    }))));
  }
  static get is() {
    return "apps-list";
  }
  static get encapsulation() {
    return "shadow";
  }
  static get properties() {
    return {
      apps: {
        type: "Any",
        attr: "apps"
      },
      el: {
        elementRef: !0
      },
      name: {
        type: String,
        attr: "name"
      },
      user: {
        type: "Any",
        attr: "user"
      }
    };
  }
  static get events() {
    return [ {
      name: "appClicked",
      method: "appClicked",
      bubbles: !0,
      cancelable: !0,
      composed: !0
    } ];
  }
  static get style() {
    return "/**style-placeholder:apps-list:**/";
  }
}

e.injectProps(i, [ "user" ]);

class a {
  constructor() {
    this.el = {}, this.appClicked = {}, this.icon = "", this.name = "", this.notifications = null, 
    this.url = "", this.canUseApps = !1;
  }
  getAppSlug() {
    return this.name.toLowerCase().replace(/ /g, "-");
  }
  appClickedHandler(t) {
    t.preventDefault(), this.appClicked.emit(t);
  }
  openApp(t) {
    t.preventDefault(), this.canUseApps && this.appClicked.emit({
      name: this.name,
      dappContainerUrl: `/dapp/${this.getAppSlug()}`,
      dappUrl: this.url
    });
  }
  render() {
    return t("li", {
      class: "item"
    }, t("a", {
      href: this.canUseApps ? `/dapp/${this.getAppSlug()}` : "#",
      onClick: t => this.openApp(t)
    }, t("div", {
      class: "icon"
    }, this.notifications ? t("div", {
      class: "notification"
    }, this.notifications) : null, t("img", {
      src: `${this.url}/${this.icon}`,
      alt: this.name
    })), t("span", {
      class: "name"
    }, this.name)));
  }
  static get is() {
    return "apps-list-item";
  }
  static get encapsulation() {
    return "shadow";
  }
  static get properties() {
    return {
      canUseApps: {
        type: Boolean,
        attr: "can-use-apps"
      },
      el: {
        elementRef: !0
      },
      icon: {
        type: String,
        attr: "icon"
      },
      name: {
        type: String,
        attr: "name"
      },
      notifications: {
        type: Number,
        attr: "notifications"
      },
      url: {
        type: String,
        attr: "url"
      }
    };
  }
  static get events() {
    return [ {
      name: "appClicked",
      method: "appClicked",
      bubbles: !0,
      cancelable: !0,
      composed: !0
    } ];
  }
  static get style() {
    return "/**style-placeholder:apps-list-item:**/";
  }
}

s.injectProps(a, [ "canUseApps" ]);

export { i as AppsList, a as AppsListItem };