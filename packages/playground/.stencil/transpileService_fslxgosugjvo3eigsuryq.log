{"moduleFile":{"sourceFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/firebase.ts","localImports":[],"externalImports":["@counterfactual/types"],"potentialCmpRefs":[],"hasSlot":false,"hasSvg":false,"jsFilePath":"/home/arjun/repositories/counterfactual/monorepo/packages/playground/src/data/firebase.js"},"jsText":"export default class FirebaseService {\r\n    static create(configuration) {\r\n        if (FirebaseService.app) {\r\n            return FirebaseService.app;\r\n        }\r\n        FirebaseService.app = window[\"firebase\"].initializeApp(configuration);\r\n    }\r\n    static createMessagingService(messagingServiceKey) {\r\n        return new FirebaseMessagingService(FirebaseService.app.database(), messagingServiceKey);\r\n    }\r\n    static createStoreService(storeServiceKey) {\r\n        return new FirebaseStoreService(FirebaseService.app.database(), storeServiceKey);\r\n    }\r\n}\r\nclass FirebaseMessagingService {\r\n    constructor(firebase, messagingServerKey) {\r\n        this.firebase = firebase;\r\n        this.messagingServerKey = messagingServerKey;\r\n    }\r\n    async send(to, msg) {\r\n        await this.firebase\r\n            .ref(`${this.messagingServerKey}/${to}/${msg.from}`)\r\n            .set(JSON.parse(JSON.stringify(msg)));\r\n    }\r\n    onReceive(address, callback) {\r\n        if (!this.firebase.app) {\r\n            console.error(\"Cannot register a connection with an uninitialized firebase handle\");\r\n            return;\r\n        }\r\n        const childAddedHandler = async (snapshot) => {\r\n            if (!snapshot) {\r\n                console.error(`Node with address ${address} received a \"null\" snapshot`);\r\n                return;\r\n            }\r\n            const msg = snapshot.val();\r\n            if (msg === null) {\r\n                return;\r\n            }\r\n            if (msg.from !== snapshot.key) {\r\n                console.error(\"Incorrect message received\", msg);\r\n            }\r\n            await this.firebase\r\n                .ref(`${this.messagingServerKey}/${address}/${msg.from}`)\r\n                .remove();\r\n            try {\r\n                console.log(\"Received message from\", address, msg, \"Handling via\", callback);\r\n                callback(msg);\r\n            }\r\n            catch (error) {\r\n                console.error(\"Encountered an error while handling message callback\", error);\r\n            }\r\n        };\r\n        this.firebase.ref(`${this.messagingServerKey}/${address}`).remove();\r\n        this.firebase\r\n            .ref(`${this.messagingServerKey}/${address}`)\r\n            .on(\"child_added\", childAddedHandler);\r\n    }\r\n}\r\nclass FirebaseStoreService {\r\n    constructor(firebase, storeServiceKey) {\r\n        this.firebase = firebase;\r\n        this.storeServiceKey = storeServiceKey;\r\n    }\r\n    async get(key) {\r\n        let result;\r\n        await this.firebase\r\n            .ref(this.storeServiceKey)\r\n            .child(key)\r\n            .once(\"value\", (snapshot) => {\r\n            if (snapshot === null) {\r\n                console.debug(`Failed to retrieve value at ${key}: received a \"null\" snapshot`);\r\n                return;\r\n            }\r\n            result = snapshot.val();\r\n        });\r\n        return result;\r\n    }\r\n    async set(pairs) {\r\n        const updates = {};\r\n        for (const pair of pairs) {\r\n            updates[pair.key] = JSON.parse(JSON.stringify(pair.value));\r\n        }\r\n        await this.firebase.ref(this.storeServiceKey).update(updates);\r\n    }\r\n}\r\n"}